/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Dm_Exhibit_threedimensional implements org.apache.thrift.TBase<Dm_Exhibit_threedimensional, Dm_Exhibit_threedimensional._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dm_Exhibit_threedimensional");

  private static final org.apache.thrift.protocol.TField EID_FIELD_DESC = new org.apache.thrift.protocol.TField("eid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField THUMBNAIL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("thumbnail_url", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ATTACHURL_FIELD_DESC = new org.apache.thrift.protocol.TField("attachurl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORI_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ori_name", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Dm_Exhibit_threedimensionalStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Dm_Exhibit_threedimensionalTupleSchemeFactory());
  }

  public String eid; // required
  public String thumbnail_url; // required
  public String attachurl; // required
  public String ori_name; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EID((short)1, "eid"),
    THUMBNAIL_URL((short)2, "thumbnail_url"),
    ATTACHURL((short)3, "attachurl"),
    ORI_NAME((short)4, "ori_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EID
          return EID;
        case 2: // THUMBNAIL_URL
          return THUMBNAIL_URL;
        case 3: // ATTACHURL
          return ATTACHURL;
        case 4: // ORI_NAME
          return ORI_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EID, new org.apache.thrift.meta_data.FieldMetaData("eid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THUMBNAIL_URL, new org.apache.thrift.meta_data.FieldMetaData("thumbnail_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACHURL, new org.apache.thrift.meta_data.FieldMetaData("attachurl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORI_NAME, new org.apache.thrift.meta_data.FieldMetaData("ori_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dm_Exhibit_threedimensional.class, metaDataMap);
  }

  public Dm_Exhibit_threedimensional() {
  }

  public Dm_Exhibit_threedimensional(
    String eid,
    String thumbnail_url,
    String attachurl,
    String ori_name)
  {
    this();
    this.eid = eid;
    this.thumbnail_url = thumbnail_url;
    this.attachurl = attachurl;
    this.ori_name = ori_name;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dm_Exhibit_threedimensional(Dm_Exhibit_threedimensional other) {
    if (other.isSetEid()) {
      this.eid = other.eid;
    }
    if (other.isSetThumbnail_url()) {
      this.thumbnail_url = other.thumbnail_url;
    }
    if (other.isSetAttachurl()) {
      this.attachurl = other.attachurl;
    }
    if (other.isSetOri_name()) {
      this.ori_name = other.ori_name;
    }
  }

  public Dm_Exhibit_threedimensional deepCopy() {
    return new Dm_Exhibit_threedimensional(this);
  }

  @Override
  public void clear() {
    this.eid = null;
    this.thumbnail_url = null;
    this.attachurl = null;
    this.ori_name = null;
  }

  public String getEid() {
    return this.eid;
  }

  public Dm_Exhibit_threedimensional setEid(String eid) {
    this.eid = eid;
    return this;
  }

  public void unsetEid() {
    this.eid = null;
  }

  /** Returns true if field eid is set (has been assigned a value) and false otherwise */
  public boolean isSetEid() {
    return this.eid != null;
  }

  public void setEidIsSet(boolean value) {
    if (!value) {
      this.eid = null;
    }
  }

  public String getThumbnail_url() {
    return this.thumbnail_url;
  }

  public Dm_Exhibit_threedimensional setThumbnail_url(String thumbnail_url) {
    this.thumbnail_url = thumbnail_url;
    return this;
  }

  public void unsetThumbnail_url() {
    this.thumbnail_url = null;
  }

  /** Returns true if field thumbnail_url is set (has been assigned a value) and false otherwise */
  public boolean isSetThumbnail_url() {
    return this.thumbnail_url != null;
  }

  public void setThumbnail_urlIsSet(boolean value) {
    if (!value) {
      this.thumbnail_url = null;
    }
  }

  public String getAttachurl() {
    return this.attachurl;
  }

  public Dm_Exhibit_threedimensional setAttachurl(String attachurl) {
    this.attachurl = attachurl;
    return this;
  }

  public void unsetAttachurl() {
    this.attachurl = null;
  }

  /** Returns true if field attachurl is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachurl() {
    return this.attachurl != null;
  }

  public void setAttachurlIsSet(boolean value) {
    if (!value) {
      this.attachurl = null;
    }
  }

  public String getOri_name() {
    return this.ori_name;
  }

  public Dm_Exhibit_threedimensional setOri_name(String ori_name) {
    this.ori_name = ori_name;
    return this;
  }

  public void unsetOri_name() {
    this.ori_name = null;
  }

  /** Returns true if field ori_name is set (has been assigned a value) and false otherwise */
  public boolean isSetOri_name() {
    return this.ori_name != null;
  }

  public void setOri_nameIsSet(boolean value) {
    if (!value) {
      this.ori_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EID:
      if (value == null) {
        unsetEid();
      } else {
        setEid((String)value);
      }
      break;

    case THUMBNAIL_URL:
      if (value == null) {
        unsetThumbnail_url();
      } else {
        setThumbnail_url((String)value);
      }
      break;

    case ATTACHURL:
      if (value == null) {
        unsetAttachurl();
      } else {
        setAttachurl((String)value);
      }
      break;

    case ORI_NAME:
      if (value == null) {
        unsetOri_name();
      } else {
        setOri_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EID:
      return getEid();

    case THUMBNAIL_URL:
      return getThumbnail_url();

    case ATTACHURL:
      return getAttachurl();

    case ORI_NAME:
      return getOri_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EID:
      return isSetEid();
    case THUMBNAIL_URL:
      return isSetThumbnail_url();
    case ATTACHURL:
      return isSetAttachurl();
    case ORI_NAME:
      return isSetOri_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dm_Exhibit_threedimensional)
      return this.equals((Dm_Exhibit_threedimensional)that);
    return false;
  }

  public boolean equals(Dm_Exhibit_threedimensional that) {
    if (that == null)
      return false;

    boolean this_present_eid = true && this.isSetEid();
    boolean that_present_eid = true && that.isSetEid();
    if (this_present_eid || that_present_eid) {
      if (!(this_present_eid && that_present_eid))
        return false;
      if (!this.eid.equals(that.eid))
        return false;
    }

    boolean this_present_thumbnail_url = true && this.isSetThumbnail_url();
    boolean that_present_thumbnail_url = true && that.isSetThumbnail_url();
    if (this_present_thumbnail_url || that_present_thumbnail_url) {
      if (!(this_present_thumbnail_url && that_present_thumbnail_url))
        return false;
      if (!this.thumbnail_url.equals(that.thumbnail_url))
        return false;
    }

    boolean this_present_attachurl = true && this.isSetAttachurl();
    boolean that_present_attachurl = true && that.isSetAttachurl();
    if (this_present_attachurl || that_present_attachurl) {
      if (!(this_present_attachurl && that_present_attachurl))
        return false;
      if (!this.attachurl.equals(that.attachurl))
        return false;
    }

    boolean this_present_ori_name = true && this.isSetOri_name();
    boolean that_present_ori_name = true && that.isSetOri_name();
    if (this_present_ori_name || that_present_ori_name) {
      if (!(this_present_ori_name && that_present_ori_name))
        return false;
      if (!this.ori_name.equals(that.ori_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Dm_Exhibit_threedimensional other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Dm_Exhibit_threedimensional typedOther = (Dm_Exhibit_threedimensional)other;

    lastComparison = Boolean.valueOf(isSetEid()).compareTo(typedOther.isSetEid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eid, typedOther.eid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThumbnail_url()).compareTo(typedOther.isSetThumbnail_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThumbnail_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thumbnail_url, typedOther.thumbnail_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachurl()).compareTo(typedOther.isSetAttachurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachurl, typedOther.attachurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOri_name()).compareTo(typedOther.isSetOri_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOri_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ori_name, typedOther.ori_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dm_Exhibit_threedimensional(");
    boolean first = true;

    sb.append("eid:");
    if (this.eid == null) {
      sb.append("null");
    } else {
      sb.append(this.eid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thumbnail_url:");
    if (this.thumbnail_url == null) {
      sb.append("null");
    } else {
      sb.append(this.thumbnail_url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachurl:");
    if (this.attachurl == null) {
      sb.append("null");
    } else {
      sb.append(this.attachurl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ori_name:");
    if (this.ori_name == null) {
      sb.append("null");
    } else {
      sb.append(this.ori_name);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Dm_Exhibit_threedimensionalStandardSchemeFactory implements SchemeFactory {
    public Dm_Exhibit_threedimensionalStandardScheme getScheme() {
      return new Dm_Exhibit_threedimensionalStandardScheme();
    }
  }

  private static class Dm_Exhibit_threedimensionalStandardScheme extends StandardScheme<Dm_Exhibit_threedimensional> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dm_Exhibit_threedimensional struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eid = iprot.readString();
              struct.setEidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // THUMBNAIL_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thumbnail_url = iprot.readString();
              struct.setThumbnail_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ATTACHURL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attachurl = iprot.readString();
              struct.setAttachurlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORI_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ori_name = iprot.readString();
              struct.setOri_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dm_Exhibit_threedimensional struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.eid != null) {
        oprot.writeFieldBegin(EID_FIELD_DESC);
        oprot.writeString(struct.eid);
        oprot.writeFieldEnd();
      }
      if (struct.thumbnail_url != null) {
        oprot.writeFieldBegin(THUMBNAIL_URL_FIELD_DESC);
        oprot.writeString(struct.thumbnail_url);
        oprot.writeFieldEnd();
      }
      if (struct.attachurl != null) {
        oprot.writeFieldBegin(ATTACHURL_FIELD_DESC);
        oprot.writeString(struct.attachurl);
        oprot.writeFieldEnd();
      }
      if (struct.ori_name != null) {
        oprot.writeFieldBegin(ORI_NAME_FIELD_DESC);
        oprot.writeString(struct.ori_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Dm_Exhibit_threedimensionalTupleSchemeFactory implements SchemeFactory {
    public Dm_Exhibit_threedimensionalTupleScheme getScheme() {
      return new Dm_Exhibit_threedimensionalTupleScheme();
    }
  }

  private static class Dm_Exhibit_threedimensionalTupleScheme extends TupleScheme<Dm_Exhibit_threedimensional> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dm_Exhibit_threedimensional struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEid()) {
        optionals.set(0);
      }
      if (struct.isSetThumbnail_url()) {
        optionals.set(1);
      }
      if (struct.isSetAttachurl()) {
        optionals.set(2);
      }
      if (struct.isSetOri_name()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEid()) {
        oprot.writeString(struct.eid);
      }
      if (struct.isSetThumbnail_url()) {
        oprot.writeString(struct.thumbnail_url);
      }
      if (struct.isSetAttachurl()) {
        oprot.writeString(struct.attachurl);
      }
      if (struct.isSetOri_name()) {
        oprot.writeString(struct.ori_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dm_Exhibit_threedimensional struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.eid = iprot.readString();
        struct.setEidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.thumbnail_url = iprot.readString();
        struct.setThumbnail_urlIsSet(true);
      }
      if (incoming.get(2)) {
        struct.attachurl = iprot.readString();
        struct.setAttachurlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ori_name = iprot.readString();
        struct.setOri_nameIsSet(true);
      }
    }
  }

}

