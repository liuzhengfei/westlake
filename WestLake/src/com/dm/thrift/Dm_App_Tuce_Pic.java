/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Dm_App_Tuce_Pic implements org.apache.thrift.TBase<Dm_App_Tuce_Pic, Dm_App_Tuce_Pic._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dm_App_Tuce_Pic");

  private static final org.apache.thrift.protocol.TField TUCE_PICID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuce_picid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TUCEID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuceid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ISFABU_FIELD_DESC = new org.apache.thrift.protocol.TField("isfabu", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TUCENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tucename", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdate", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Dm_App_Tuce_PicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Dm_App_Tuce_PicTupleSchemeFactory());
  }

  public String tuce_picid; // required
  public String tuceid; // required
  public String title; // required
  public String userid; // required
  public String username; // required
  public String url; // required
  public String isfabu; // required
  public String tucename; // required
  public String description; // required
  public String createdate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUCE_PICID((short)1, "tuce_picid"),
    TUCEID((short)2, "tuceid"),
    TITLE((short)3, "title"),
    USERID((short)4, "userid"),
    USERNAME((short)5, "username"),
    URL((short)6, "url"),
    ISFABU((short)7, "isfabu"),
    TUCENAME((short)8, "tucename"),
    DESCRIPTION((short)9, "description"),
    CREATEDATE((short)10, "createdate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUCE_PICID
          return TUCE_PICID;
        case 2: // TUCEID
          return TUCEID;
        case 3: // TITLE
          return TITLE;
        case 4: // USERID
          return USERID;
        case 5: // USERNAME
          return USERNAME;
        case 6: // URL
          return URL;
        case 7: // ISFABU
          return ISFABU;
        case 8: // TUCENAME
          return TUCENAME;
        case 9: // DESCRIPTION
          return DESCRIPTION;
        case 10: // CREATEDATE
          return CREATEDATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUCE_PICID, new org.apache.thrift.meta_data.FieldMetaData("tuce_picid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TUCEID, new org.apache.thrift.meta_data.FieldMetaData("tuceid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISFABU, new org.apache.thrift.meta_data.FieldMetaData("isfabu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TUCENAME, new org.apache.thrift.meta_data.FieldMetaData("tucename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATEDATE, new org.apache.thrift.meta_data.FieldMetaData("createdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dm_App_Tuce_Pic.class, metaDataMap);
  }

  public Dm_App_Tuce_Pic() {
  }

  public Dm_App_Tuce_Pic(
    String tuce_picid,
    String tuceid,
    String title,
    String userid,
    String username,
    String url,
    String isfabu,
    String tucename,
    String description,
    String createdate)
  {
    this();
    this.tuce_picid = tuce_picid;
    this.tuceid = tuceid;
    this.title = title;
    this.userid = userid;
    this.username = username;
    this.url = url;
    this.isfabu = isfabu;
    this.tucename = tucename;
    this.description = description;
    this.createdate = createdate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dm_App_Tuce_Pic(Dm_App_Tuce_Pic other) {
    if (other.isSetTuce_picid()) {
      this.tuce_picid = other.tuce_picid;
    }
    if (other.isSetTuceid()) {
      this.tuceid = other.tuceid;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetUserid()) {
      this.userid = other.userid;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetIsfabu()) {
      this.isfabu = other.isfabu;
    }
    if (other.isSetTucename()) {
      this.tucename = other.tucename;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetCreatedate()) {
      this.createdate = other.createdate;
    }
  }

  public Dm_App_Tuce_Pic deepCopy() {
    return new Dm_App_Tuce_Pic(this);
  }

  @Override
  public void clear() {
    this.tuce_picid = null;
    this.tuceid = null;
    this.title = null;
    this.userid = null;
    this.username = null;
    this.url = null;
    this.isfabu = null;
    this.tucename = null;
    this.description = null;
    this.createdate = null;
  }

  public String getTuce_picid() {
    return this.tuce_picid;
  }

  public Dm_App_Tuce_Pic setTuce_picid(String tuce_picid) {
    this.tuce_picid = tuce_picid;
    return this;
  }

  public void unsetTuce_picid() {
    this.tuce_picid = null;
  }

  /** Returns true if field tuce_picid is set (has been assigned a value) and false otherwise */
  public boolean isSetTuce_picid() {
    return this.tuce_picid != null;
  }

  public void setTuce_picidIsSet(boolean value) {
    if (!value) {
      this.tuce_picid = null;
    }
  }

  public String getTuceid() {
    return this.tuceid;
  }

  public Dm_App_Tuce_Pic setTuceid(String tuceid) {
    this.tuceid = tuceid;
    return this;
  }

  public void unsetTuceid() {
    this.tuceid = null;
  }

  /** Returns true if field tuceid is set (has been assigned a value) and false otherwise */
  public boolean isSetTuceid() {
    return this.tuceid != null;
  }

  public void setTuceidIsSet(boolean value) {
    if (!value) {
      this.tuceid = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public Dm_App_Tuce_Pic setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getUserid() {
    return this.userid;
  }

  public Dm_App_Tuce_Pic setUserid(String userid) {
    this.userid = userid;
    return this;
  }

  public void unsetUserid() {
    this.userid = null;
  }

  /** Returns true if field userid is set (has been assigned a value) and false otherwise */
  public boolean isSetUserid() {
    return this.userid != null;
  }

  public void setUseridIsSet(boolean value) {
    if (!value) {
      this.userid = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public Dm_App_Tuce_Pic setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public Dm_App_Tuce_Pic setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getIsfabu() {
    return this.isfabu;
  }

  public Dm_App_Tuce_Pic setIsfabu(String isfabu) {
    this.isfabu = isfabu;
    return this;
  }

  public void unsetIsfabu() {
    this.isfabu = null;
  }

  /** Returns true if field isfabu is set (has been assigned a value) and false otherwise */
  public boolean isSetIsfabu() {
    return this.isfabu != null;
  }

  public void setIsfabuIsSet(boolean value) {
    if (!value) {
      this.isfabu = null;
    }
  }

  public String getTucename() {
    return this.tucename;
  }

  public Dm_App_Tuce_Pic setTucename(String tucename) {
    this.tucename = tucename;
    return this;
  }

  public void unsetTucename() {
    this.tucename = null;
  }

  /** Returns true if field tucename is set (has been assigned a value) and false otherwise */
  public boolean isSetTucename() {
    return this.tucename != null;
  }

  public void setTucenameIsSet(boolean value) {
    if (!value) {
      this.tucename = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public Dm_App_Tuce_Pic setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getCreatedate() {
    return this.createdate;
  }

  public Dm_App_Tuce_Pic setCreatedate(String createdate) {
    this.createdate = createdate;
    return this;
  }

  public void unsetCreatedate() {
    this.createdate = null;
  }

  /** Returns true if field createdate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedate() {
    return this.createdate != null;
  }

  public void setCreatedateIsSet(boolean value) {
    if (!value) {
      this.createdate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TUCE_PICID:
      if (value == null) {
        unsetTuce_picid();
      } else {
        setTuce_picid((String)value);
      }
      break;

    case TUCEID:
      if (value == null) {
        unsetTuceid();
      } else {
        setTuceid((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case USERID:
      if (value == null) {
        unsetUserid();
      } else {
        setUserid((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case ISFABU:
      if (value == null) {
        unsetIsfabu();
      } else {
        setIsfabu((String)value);
      }
      break;

    case TUCENAME:
      if (value == null) {
        unsetTucename();
      } else {
        setTucename((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case CREATEDATE:
      if (value == null) {
        unsetCreatedate();
      } else {
        setCreatedate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TUCE_PICID:
      return getTuce_picid();

    case TUCEID:
      return getTuceid();

    case TITLE:
      return getTitle();

    case USERID:
      return getUserid();

    case USERNAME:
      return getUsername();

    case URL:
      return getUrl();

    case ISFABU:
      return getIsfabu();

    case TUCENAME:
      return getTucename();

    case DESCRIPTION:
      return getDescription();

    case CREATEDATE:
      return getCreatedate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TUCE_PICID:
      return isSetTuce_picid();
    case TUCEID:
      return isSetTuceid();
    case TITLE:
      return isSetTitle();
    case USERID:
      return isSetUserid();
    case USERNAME:
      return isSetUsername();
    case URL:
      return isSetUrl();
    case ISFABU:
      return isSetIsfabu();
    case TUCENAME:
      return isSetTucename();
    case DESCRIPTION:
      return isSetDescription();
    case CREATEDATE:
      return isSetCreatedate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dm_App_Tuce_Pic)
      return this.equals((Dm_App_Tuce_Pic)that);
    return false;
  }

  public boolean equals(Dm_App_Tuce_Pic that) {
    if (that == null)
      return false;

    boolean this_present_tuce_picid = true && this.isSetTuce_picid();
    boolean that_present_tuce_picid = true && that.isSetTuce_picid();
    if (this_present_tuce_picid || that_present_tuce_picid) {
      if (!(this_present_tuce_picid && that_present_tuce_picid))
        return false;
      if (!this.tuce_picid.equals(that.tuce_picid))
        return false;
    }

    boolean this_present_tuceid = true && this.isSetTuceid();
    boolean that_present_tuceid = true && that.isSetTuceid();
    if (this_present_tuceid || that_present_tuceid) {
      if (!(this_present_tuceid && that_present_tuceid))
        return false;
      if (!this.tuceid.equals(that.tuceid))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_userid = true && this.isSetUserid();
    boolean that_present_userid = true && that.isSetUserid();
    if (this_present_userid || that_present_userid) {
      if (!(this_present_userid && that_present_userid))
        return false;
      if (!this.userid.equals(that.userid))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_isfabu = true && this.isSetIsfabu();
    boolean that_present_isfabu = true && that.isSetIsfabu();
    if (this_present_isfabu || that_present_isfabu) {
      if (!(this_present_isfabu && that_present_isfabu))
        return false;
      if (!this.isfabu.equals(that.isfabu))
        return false;
    }

    boolean this_present_tucename = true && this.isSetTucename();
    boolean that_present_tucename = true && that.isSetTucename();
    if (this_present_tucename || that_present_tucename) {
      if (!(this_present_tucename && that_present_tucename))
        return false;
      if (!this.tucename.equals(that.tucename))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_createdate = true && this.isSetCreatedate();
    boolean that_present_createdate = true && that.isSetCreatedate();
    if (this_present_createdate || that_present_createdate) {
      if (!(this_present_createdate && that_present_createdate))
        return false;
      if (!this.createdate.equals(that.createdate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Dm_App_Tuce_Pic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Dm_App_Tuce_Pic typedOther = (Dm_App_Tuce_Pic)other;

    lastComparison = Boolean.valueOf(isSetTuce_picid()).compareTo(typedOther.isSetTuce_picid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuce_picid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuce_picid, typedOther.tuce_picid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTuceid()).compareTo(typedOther.isSetTuceid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuceid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuceid, typedOther.tuceid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsfabu()).compareTo(typedOther.isSetIsfabu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsfabu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isfabu, typedOther.isfabu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTucename()).compareTo(typedOther.isSetTucename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTucename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tucename, typedOther.tucename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedate()).compareTo(typedOther.isSetCreatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdate, typedOther.createdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dm_App_Tuce_Pic(");
    boolean first = true;

    sb.append("tuce_picid:");
    if (this.tuce_picid == null) {
      sb.append("null");
    } else {
      sb.append(this.tuce_picid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tuceid:");
    if (this.tuceid == null) {
      sb.append("null");
    } else {
      sb.append(this.tuceid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userid:");
    if (this.userid == null) {
      sb.append("null");
    } else {
      sb.append(this.userid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isfabu:");
    if (this.isfabu == null) {
      sb.append("null");
    } else {
      sb.append(this.isfabu);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tucename:");
    if (this.tucename == null) {
      sb.append("null");
    } else {
      sb.append(this.tucename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdate:");
    if (this.createdate == null) {
      sb.append("null");
    } else {
      sb.append(this.createdate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Dm_App_Tuce_PicStandardSchemeFactory implements SchemeFactory {
    public Dm_App_Tuce_PicStandardScheme getScheme() {
      return new Dm_App_Tuce_PicStandardScheme();
    }
  }

  private static class Dm_App_Tuce_PicStandardScheme extends StandardScheme<Dm_App_Tuce_Pic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dm_App_Tuce_Pic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUCE_PICID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tuce_picid = iprot.readString();
              struct.setTuce_picidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TUCEID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tuceid = iprot.readString();
              struct.setTuceidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USERID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userid = iprot.readString();
              struct.setUseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ISFABU
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isfabu = iprot.readString();
              struct.setIsfabuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TUCENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tucename = iprot.readString();
              struct.setTucenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdate = iprot.readString();
              struct.setCreatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dm_App_Tuce_Pic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tuce_picid != null) {
        oprot.writeFieldBegin(TUCE_PICID_FIELD_DESC);
        oprot.writeString(struct.tuce_picid);
        oprot.writeFieldEnd();
      }
      if (struct.tuceid != null) {
        oprot.writeFieldBegin(TUCEID_FIELD_DESC);
        oprot.writeString(struct.tuceid);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(struct.userid);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.isfabu != null) {
        oprot.writeFieldBegin(ISFABU_FIELD_DESC);
        oprot.writeString(struct.isfabu);
        oprot.writeFieldEnd();
      }
      if (struct.tucename != null) {
        oprot.writeFieldBegin(TUCENAME_FIELD_DESC);
        oprot.writeString(struct.tucename);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.createdate != null) {
        oprot.writeFieldBegin(CREATEDATE_FIELD_DESC);
        oprot.writeString(struct.createdate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Dm_App_Tuce_PicTupleSchemeFactory implements SchemeFactory {
    public Dm_App_Tuce_PicTupleScheme getScheme() {
      return new Dm_App_Tuce_PicTupleScheme();
    }
  }

  private static class Dm_App_Tuce_PicTupleScheme extends TupleScheme<Dm_App_Tuce_Pic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dm_App_Tuce_Pic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTuce_picid()) {
        optionals.set(0);
      }
      if (struct.isSetTuceid()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetUserid()) {
        optionals.set(3);
      }
      if (struct.isSetUsername()) {
        optionals.set(4);
      }
      if (struct.isSetUrl()) {
        optionals.set(5);
      }
      if (struct.isSetIsfabu()) {
        optionals.set(6);
      }
      if (struct.isSetTucename()) {
        optionals.set(7);
      }
      if (struct.isSetDescription()) {
        optionals.set(8);
      }
      if (struct.isSetCreatedate()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetTuce_picid()) {
        oprot.writeString(struct.tuce_picid);
      }
      if (struct.isSetTuceid()) {
        oprot.writeString(struct.tuceid);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetUserid()) {
        oprot.writeString(struct.userid);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetIsfabu()) {
        oprot.writeString(struct.isfabu);
      }
      if (struct.isSetTucename()) {
        oprot.writeString(struct.tucename);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetCreatedate()) {
        oprot.writeString(struct.createdate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dm_App_Tuce_Pic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.tuce_picid = iprot.readString();
        struct.setTuce_picidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tuceid = iprot.readString();
        struct.setTuceidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userid = iprot.readString();
        struct.setUseridIsSet(true);
      }
      if (incoming.get(4)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isfabu = iprot.readString();
        struct.setIsfabuIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tucename = iprot.readString();
        struct.setTucenameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createdate = iprot.readString();
        struct.setCreatedateIsSet(true);
      }
    }
  }

}

