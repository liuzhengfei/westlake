/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Dm_Scenery implements org.apache.thrift.TBase<Dm_Scenery, Dm_Scenery._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dm_Scenery");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SYNOPSIS_FIELD_DESC = new org.apache.thrift.protocol.TField("synopsis", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SMALL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("smallType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BIG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bigType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PICTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("picture", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PANORAMA_FIELD_DESC = new org.apache.thrift.protocol.TField("panorama", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ATTACH_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("attachList", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField OPENING_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("openingTime", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TICKET_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketPrice", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Dm_SceneryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Dm_SceneryTupleSchemeFactory());
  }

  public String id; // required
  public String sid; // required
  public String name; // required
  public String synopsis; // required
  public String address; // required
  public String smallType; // required
  public String bigType; // required
  public String picture; // required
  public String panorama; // required
  public double lng; // required
  public double lat; // required
  public String date; // required
  public List<Dm_PictureAttach> attachList; // required
  public String openingTime; // required
  public String ticketPrice; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    SID((short)2, "sid"),
    NAME((short)3, "name"),
    SYNOPSIS((short)4, "synopsis"),
    ADDRESS((short)5, "address"),
    SMALL_TYPE((short)6, "smallType"),
    BIG_TYPE((short)7, "bigType"),
    PICTURE((short)8, "picture"),
    PANORAMA((short)9, "panorama"),
    LNG((short)10, "lng"),
    LAT((short)11, "lat"),
    DATE((short)12, "date"),
    ATTACH_LIST((short)13, "attachList"),
    OPENING_TIME((short)14, "openingTime"),
    TICKET_PRICE((short)15, "ticketPrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // SID
          return SID;
        case 3: // NAME
          return NAME;
        case 4: // SYNOPSIS
          return SYNOPSIS;
        case 5: // ADDRESS
          return ADDRESS;
        case 6: // SMALL_TYPE
          return SMALL_TYPE;
        case 7: // BIG_TYPE
          return BIG_TYPE;
        case 8: // PICTURE
          return PICTURE;
        case 9: // PANORAMA
          return PANORAMA;
        case 10: // LNG
          return LNG;
        case 11: // LAT
          return LAT;
        case 12: // DATE
          return DATE;
        case 13: // ATTACH_LIST
          return ATTACH_LIST;
        case 14: // OPENING_TIME
          return OPENING_TIME;
        case 15: // TICKET_PRICE
          return TICKET_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LNG_ISSET_ID = 0;
  private static final int __LAT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYNOPSIS, new org.apache.thrift.meta_data.FieldMetaData("synopsis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SMALL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("smallType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bigType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE, new org.apache.thrift.meta_data.FieldMetaData("picture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PANORAMA, new org.apache.thrift.meta_data.FieldMetaData("panorama", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACH_LIST, new org.apache.thrift.meta_data.FieldMetaData("attachList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_PictureAttach.class))));
    tmpMap.put(_Fields.OPENING_TIME, new org.apache.thrift.meta_data.FieldMetaData("openingTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_PRICE, new org.apache.thrift.meta_data.FieldMetaData("ticketPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dm_Scenery.class, metaDataMap);
  }

  public Dm_Scenery() {
  }

  public Dm_Scenery(
    String id,
    String sid,
    String name,
    String synopsis,
    String address,
    String smallType,
    String bigType,
    String picture,
    String panorama,
    double lng,
    double lat,
    String date,
    List<Dm_PictureAttach> attachList,
    String openingTime,
    String ticketPrice)
  {
    this();
    this.id = id;
    this.sid = sid;
    this.name = name;
    this.synopsis = synopsis;
    this.address = address;
    this.smallType = smallType;
    this.bigType = bigType;
    this.picture = picture;
    this.panorama = panorama;
    this.lng = lng;
    setLngIsSet(true);
    this.lat = lat;
    setLatIsSet(true);
    this.date = date;
    this.attachList = attachList;
    this.openingTime = openingTime;
    this.ticketPrice = ticketPrice;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dm_Scenery(Dm_Scenery other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetSid()) {
      this.sid = other.sid;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSynopsis()) {
      this.synopsis = other.synopsis;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetSmallType()) {
      this.smallType = other.smallType;
    }
    if (other.isSetBigType()) {
      this.bigType = other.bigType;
    }
    if (other.isSetPicture()) {
      this.picture = other.picture;
    }
    if (other.isSetPanorama()) {
      this.panorama = other.panorama;
    }
    this.lng = other.lng;
    this.lat = other.lat;
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetAttachList()) {
      List<Dm_PictureAttach> __this__attachList = new ArrayList<Dm_PictureAttach>();
      for (Dm_PictureAttach other_element : other.attachList) {
        __this__attachList.add(new Dm_PictureAttach(other_element));
      }
      this.attachList = __this__attachList;
    }
    if (other.isSetOpeningTime()) {
      this.openingTime = other.openingTime;
    }
    if (other.isSetTicketPrice()) {
      this.ticketPrice = other.ticketPrice;
    }
  }

  public Dm_Scenery deepCopy() {
    return new Dm_Scenery(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.sid = null;
    this.name = null;
    this.synopsis = null;
    this.address = null;
    this.smallType = null;
    this.bigType = null;
    this.picture = null;
    this.panorama = null;
    setLngIsSet(false);
    this.lng = 0.0;
    setLatIsSet(false);
    this.lat = 0.0;
    this.date = null;
    this.attachList = null;
    this.openingTime = null;
    this.ticketPrice = null;
  }

  public String getId() {
    return this.id;
  }

  public Dm_Scenery setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getSid() {
    return this.sid;
  }

  public Dm_Scenery setSid(String sid) {
    this.sid = sid;
    return this;
  }

  public void unsetSid() {
    this.sid = null;
  }

  /** Returns true if field sid is set (has been assigned a value) and false otherwise */
  public boolean isSetSid() {
    return this.sid != null;
  }

  public void setSidIsSet(boolean value) {
    if (!value) {
      this.sid = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Dm_Scenery setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSynopsis() {
    return this.synopsis;
  }

  public Dm_Scenery setSynopsis(String synopsis) {
    this.synopsis = synopsis;
    return this;
  }

  public void unsetSynopsis() {
    this.synopsis = null;
  }

  /** Returns true if field synopsis is set (has been assigned a value) and false otherwise */
  public boolean isSetSynopsis() {
    return this.synopsis != null;
  }

  public void setSynopsisIsSet(boolean value) {
    if (!value) {
      this.synopsis = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public Dm_Scenery setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getSmallType() {
    return this.smallType;
  }

  public Dm_Scenery setSmallType(String smallType) {
    this.smallType = smallType;
    return this;
  }

  public void unsetSmallType() {
    this.smallType = null;
  }

  /** Returns true if field smallType is set (has been assigned a value) and false otherwise */
  public boolean isSetSmallType() {
    return this.smallType != null;
  }

  public void setSmallTypeIsSet(boolean value) {
    if (!value) {
      this.smallType = null;
    }
  }

  public String getBigType() {
    return this.bigType;
  }

  public Dm_Scenery setBigType(String bigType) {
    this.bigType = bigType;
    return this;
  }

  public void unsetBigType() {
    this.bigType = null;
  }

  /** Returns true if field bigType is set (has been assigned a value) and false otherwise */
  public boolean isSetBigType() {
    return this.bigType != null;
  }

  public void setBigTypeIsSet(boolean value) {
    if (!value) {
      this.bigType = null;
    }
  }

  public String getPicture() {
    return this.picture;
  }

  public Dm_Scenery setPicture(String picture) {
    this.picture = picture;
    return this;
  }

  public void unsetPicture() {
    this.picture = null;
  }

  /** Returns true if field picture is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture() {
    return this.picture != null;
  }

  public void setPictureIsSet(boolean value) {
    if (!value) {
      this.picture = null;
    }
  }

  public String getPanorama() {
    return this.panorama;
  }

  public Dm_Scenery setPanorama(String panorama) {
    this.panorama = panorama;
    return this;
  }

  public void unsetPanorama() {
    this.panorama = null;
  }

  /** Returns true if field panorama is set (has been assigned a value) and false otherwise */
  public boolean isSetPanorama() {
    return this.panorama != null;
  }

  public void setPanoramaIsSet(boolean value) {
    if (!value) {
      this.panorama = null;
    }
  }

  public double getLng() {
    return this.lng;
  }

  public Dm_Scenery setLng(double lng) {
    this.lng = lng;
    setLngIsSet(true);
    return this;
  }

  public void unsetLng() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LNG_ISSET_ID);
  }

  /** Returns true if field lng is set (has been assigned a value) and false otherwise */
  public boolean isSetLng() {
    return EncodingUtils.testBit(__isset_bitfield, __LNG_ISSET_ID);
  }

  public void setLngIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LNG_ISSET_ID, value);
  }

  public double getLat() {
    return this.lat;
  }

  public Dm_Scenery setLat(double lat) {
    this.lat = lat;
    setLatIsSet(true);
    return this;
  }

  public void unsetLat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAT_ISSET_ID);
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return EncodingUtils.testBit(__isset_bitfield, __LAT_ISSET_ID);
  }

  public void setLatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAT_ISSET_ID, value);
  }

  public String getDate() {
    return this.date;
  }

  public Dm_Scenery setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getAttachListSize() {
    return (this.attachList == null) ? 0 : this.attachList.size();
  }

  public java.util.Iterator<Dm_PictureAttach> getAttachListIterator() {
    return (this.attachList == null) ? null : this.attachList.iterator();
  }

  public void addToAttachList(Dm_PictureAttach elem) {
    if (this.attachList == null) {
      this.attachList = new ArrayList<Dm_PictureAttach>();
    }
    this.attachList.add(elem);
  }

  public List<Dm_PictureAttach> getAttachList() {
    return this.attachList;
  }

  public Dm_Scenery setAttachList(List<Dm_PictureAttach> attachList) {
    this.attachList = attachList;
    return this;
  }

  public void unsetAttachList() {
    this.attachList = null;
  }

  /** Returns true if field attachList is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachList() {
    return this.attachList != null;
  }

  public void setAttachListIsSet(boolean value) {
    if (!value) {
      this.attachList = null;
    }
  }

  public String getOpeningTime() {
    return this.openingTime;
  }

  public Dm_Scenery setOpeningTime(String openingTime) {
    this.openingTime = openingTime;
    return this;
  }

  public void unsetOpeningTime() {
    this.openingTime = null;
  }

  /** Returns true if field openingTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeningTime() {
    return this.openingTime != null;
  }

  public void setOpeningTimeIsSet(boolean value) {
    if (!value) {
      this.openingTime = null;
    }
  }

  public String getTicketPrice() {
    return this.ticketPrice;
  }

  public Dm_Scenery setTicketPrice(String ticketPrice) {
    this.ticketPrice = ticketPrice;
    return this;
  }

  public void unsetTicketPrice() {
    this.ticketPrice = null;
  }

  /** Returns true if field ticketPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketPrice() {
    return this.ticketPrice != null;
  }

  public void setTicketPriceIsSet(boolean value) {
    if (!value) {
      this.ticketPrice = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case SID:
      if (value == null) {
        unsetSid();
      } else {
        setSid((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SYNOPSIS:
      if (value == null) {
        unsetSynopsis();
      } else {
        setSynopsis((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case SMALL_TYPE:
      if (value == null) {
        unsetSmallType();
      } else {
        setSmallType((String)value);
      }
      break;

    case BIG_TYPE:
      if (value == null) {
        unsetBigType();
      } else {
        setBigType((String)value);
      }
      break;

    case PICTURE:
      if (value == null) {
        unsetPicture();
      } else {
        setPicture((String)value);
      }
      break;

    case PANORAMA:
      if (value == null) {
        unsetPanorama();
      } else {
        setPanorama((String)value);
      }
      break;

    case LNG:
      if (value == null) {
        unsetLng();
      } else {
        setLng((Double)value);
      }
      break;

    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((Double)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case ATTACH_LIST:
      if (value == null) {
        unsetAttachList();
      } else {
        setAttachList((List<Dm_PictureAttach>)value);
      }
      break;

    case OPENING_TIME:
      if (value == null) {
        unsetOpeningTime();
      } else {
        setOpeningTime((String)value);
      }
      break;

    case TICKET_PRICE:
      if (value == null) {
        unsetTicketPrice();
      } else {
        setTicketPrice((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SID:
      return getSid();

    case NAME:
      return getName();

    case SYNOPSIS:
      return getSynopsis();

    case ADDRESS:
      return getAddress();

    case SMALL_TYPE:
      return getSmallType();

    case BIG_TYPE:
      return getBigType();

    case PICTURE:
      return getPicture();

    case PANORAMA:
      return getPanorama();

    case LNG:
      return Double.valueOf(getLng());

    case LAT:
      return Double.valueOf(getLat());

    case DATE:
      return getDate();

    case ATTACH_LIST:
      return getAttachList();

    case OPENING_TIME:
      return getOpeningTime();

    case TICKET_PRICE:
      return getTicketPrice();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SID:
      return isSetSid();
    case NAME:
      return isSetName();
    case SYNOPSIS:
      return isSetSynopsis();
    case ADDRESS:
      return isSetAddress();
    case SMALL_TYPE:
      return isSetSmallType();
    case BIG_TYPE:
      return isSetBigType();
    case PICTURE:
      return isSetPicture();
    case PANORAMA:
      return isSetPanorama();
    case LNG:
      return isSetLng();
    case LAT:
      return isSetLat();
    case DATE:
      return isSetDate();
    case ATTACH_LIST:
      return isSetAttachList();
    case OPENING_TIME:
      return isSetOpeningTime();
    case TICKET_PRICE:
      return isSetTicketPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dm_Scenery)
      return this.equals((Dm_Scenery)that);
    return false;
  }

  public boolean equals(Dm_Scenery that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_sid = true && this.isSetSid();
    boolean that_present_sid = true && that.isSetSid();
    if (this_present_sid || that_present_sid) {
      if (!(this_present_sid && that_present_sid))
        return false;
      if (!this.sid.equals(that.sid))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_synopsis = true && this.isSetSynopsis();
    boolean that_present_synopsis = true && that.isSetSynopsis();
    if (this_present_synopsis || that_present_synopsis) {
      if (!(this_present_synopsis && that_present_synopsis))
        return false;
      if (!this.synopsis.equals(that.synopsis))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_smallType = true && this.isSetSmallType();
    boolean that_present_smallType = true && that.isSetSmallType();
    if (this_present_smallType || that_present_smallType) {
      if (!(this_present_smallType && that_present_smallType))
        return false;
      if (!this.smallType.equals(that.smallType))
        return false;
    }

    boolean this_present_bigType = true && this.isSetBigType();
    boolean that_present_bigType = true && that.isSetBigType();
    if (this_present_bigType || that_present_bigType) {
      if (!(this_present_bigType && that_present_bigType))
        return false;
      if (!this.bigType.equals(that.bigType))
        return false;
    }

    boolean this_present_picture = true && this.isSetPicture();
    boolean that_present_picture = true && that.isSetPicture();
    if (this_present_picture || that_present_picture) {
      if (!(this_present_picture && that_present_picture))
        return false;
      if (!this.picture.equals(that.picture))
        return false;
    }

    boolean this_present_panorama = true && this.isSetPanorama();
    boolean that_present_panorama = true && that.isSetPanorama();
    if (this_present_panorama || that_present_panorama) {
      if (!(this_present_panorama && that_present_panorama))
        return false;
      if (!this.panorama.equals(that.panorama))
        return false;
    }

    boolean this_present_lng = true;
    boolean that_present_lng = true;
    if (this_present_lng || that_present_lng) {
      if (!(this_present_lng && that_present_lng))
        return false;
      if (this.lng != that.lng)
        return false;
    }

    boolean this_present_lat = true;
    boolean that_present_lat = true;
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (this.lat != that.lat)
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_attachList = true && this.isSetAttachList();
    boolean that_present_attachList = true && that.isSetAttachList();
    if (this_present_attachList || that_present_attachList) {
      if (!(this_present_attachList && that_present_attachList))
        return false;
      if (!this.attachList.equals(that.attachList))
        return false;
    }

    boolean this_present_openingTime = true && this.isSetOpeningTime();
    boolean that_present_openingTime = true && that.isSetOpeningTime();
    if (this_present_openingTime || that_present_openingTime) {
      if (!(this_present_openingTime && that_present_openingTime))
        return false;
      if (!this.openingTime.equals(that.openingTime))
        return false;
    }

    boolean this_present_ticketPrice = true && this.isSetTicketPrice();
    boolean that_present_ticketPrice = true && that.isSetTicketPrice();
    if (this_present_ticketPrice || that_present_ticketPrice) {
      if (!(this_present_ticketPrice && that_present_ticketPrice))
        return false;
      if (!this.ticketPrice.equals(that.ticketPrice))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Dm_Scenery other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Dm_Scenery typedOther = (Dm_Scenery)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSid()).compareTo(typedOther.isSetSid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, typedOther.sid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSynopsis()).compareTo(typedOther.isSetSynopsis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSynopsis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.synopsis, typedOther.synopsis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmallType()).compareTo(typedOther.isSetSmallType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmallType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smallType, typedOther.smallType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBigType()).compareTo(typedOther.isSetBigType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigType, typedOther.bigType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture()).compareTo(typedOther.isSetPicture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture, typedOther.picture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPanorama()).compareTo(typedOther.isSetPanorama());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPanorama()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.panorama, typedOther.panorama);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLng()).compareTo(typedOther.isSetLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, typedOther.lng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLat()).compareTo(typedOther.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, typedOther.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(typedOther.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, typedOther.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachList()).compareTo(typedOther.isSetAttachList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachList, typedOther.attachList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpeningTime()).compareTo(typedOther.isSetOpeningTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeningTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openingTime, typedOther.openingTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketPrice()).compareTo(typedOther.isSetTicketPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketPrice, typedOther.ticketPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dm_Scenery(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sid:");
    if (this.sid == null) {
      sb.append("null");
    } else {
      sb.append(this.sid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("synopsis:");
    if (this.synopsis == null) {
      sb.append("null");
    } else {
      sb.append(this.synopsis);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("smallType:");
    if (this.smallType == null) {
      sb.append("null");
    } else {
      sb.append(this.smallType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bigType:");
    if (this.bigType == null) {
      sb.append("null");
    } else {
      sb.append(this.bigType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture:");
    if (this.picture == null) {
      sb.append("null");
    } else {
      sb.append(this.picture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("panorama:");
    if (this.panorama == null) {
      sb.append("null");
    } else {
      sb.append(this.panorama);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lng:");
    sb.append(this.lng);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lat:");
    sb.append(this.lat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachList:");
    if (this.attachList == null) {
      sb.append("null");
    } else {
      sb.append(this.attachList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openingTime:");
    if (this.openingTime == null) {
      sb.append("null");
    } else {
      sb.append(this.openingTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketPrice:");
    if (this.ticketPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketPrice);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Dm_SceneryStandardSchemeFactory implements SchemeFactory {
    public Dm_SceneryStandardScheme getScheme() {
      return new Dm_SceneryStandardScheme();
    }
  }

  private static class Dm_SceneryStandardScheme extends StandardScheme<Dm_Scenery> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dm_Scenery struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sid = iprot.readString();
              struct.setSidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SYNOPSIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.synopsis = iprot.readString();
              struct.setSynopsisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SMALL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.smallType = iprot.readString();
              struct.setSmallTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BIG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bigType = iprot.readString();
              struct.setBigTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PICTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picture = iprot.readString();
              struct.setPictureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PANORAMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.panorama = iprot.readString();
              struct.setPanoramaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lng = iprot.readDouble();
              struct.setLngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lat = iprot.readDouble();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ATTACH_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.attachList = new ArrayList<Dm_PictureAttach>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Dm_PictureAttach _elem2; // required
                  _elem2 = new Dm_PictureAttach();
                  _elem2.read(iprot);
                  struct.attachList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAttachListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OPENING_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openingTime = iprot.readString();
              struct.setOpeningTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TICKET_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketPrice = iprot.readString();
              struct.setTicketPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dm_Scenery struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.sid != null) {
        oprot.writeFieldBegin(SID_FIELD_DESC);
        oprot.writeString(struct.sid);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.synopsis != null) {
        oprot.writeFieldBegin(SYNOPSIS_FIELD_DESC);
        oprot.writeString(struct.synopsis);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.smallType != null) {
        oprot.writeFieldBegin(SMALL_TYPE_FIELD_DESC);
        oprot.writeString(struct.smallType);
        oprot.writeFieldEnd();
      }
      if (struct.bigType != null) {
        oprot.writeFieldBegin(BIG_TYPE_FIELD_DESC);
        oprot.writeString(struct.bigType);
        oprot.writeFieldEnd();
      }
      if (struct.picture != null) {
        oprot.writeFieldBegin(PICTURE_FIELD_DESC);
        oprot.writeString(struct.picture);
        oprot.writeFieldEnd();
      }
      if (struct.panorama != null) {
        oprot.writeFieldBegin(PANORAMA_FIELD_DESC);
        oprot.writeString(struct.panorama);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LNG_FIELD_DESC);
      oprot.writeDouble(struct.lng);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAT_FIELD_DESC);
      oprot.writeDouble(struct.lat);
      oprot.writeFieldEnd();
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      if (struct.attachList != null) {
        oprot.writeFieldBegin(ATTACH_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.attachList.size()));
          for (Dm_PictureAttach _iter3 : struct.attachList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.openingTime != null) {
        oprot.writeFieldBegin(OPENING_TIME_FIELD_DESC);
        oprot.writeString(struct.openingTime);
        oprot.writeFieldEnd();
      }
      if (struct.ticketPrice != null) {
        oprot.writeFieldBegin(TICKET_PRICE_FIELD_DESC);
        oprot.writeString(struct.ticketPrice);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Dm_SceneryTupleSchemeFactory implements SchemeFactory {
    public Dm_SceneryTupleScheme getScheme() {
      return new Dm_SceneryTupleScheme();
    }
  }

  private static class Dm_SceneryTupleScheme extends TupleScheme<Dm_Scenery> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dm_Scenery struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSid()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetSynopsis()) {
        optionals.set(3);
      }
      if (struct.isSetAddress()) {
        optionals.set(4);
      }
      if (struct.isSetSmallType()) {
        optionals.set(5);
      }
      if (struct.isSetBigType()) {
        optionals.set(6);
      }
      if (struct.isSetPicture()) {
        optionals.set(7);
      }
      if (struct.isSetPanorama()) {
        optionals.set(8);
      }
      if (struct.isSetLng()) {
        optionals.set(9);
      }
      if (struct.isSetLat()) {
        optionals.set(10);
      }
      if (struct.isSetDate()) {
        optionals.set(11);
      }
      if (struct.isSetAttachList()) {
        optionals.set(12);
      }
      if (struct.isSetOpeningTime()) {
        optionals.set(13);
      }
      if (struct.isSetTicketPrice()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetSid()) {
        oprot.writeString(struct.sid);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSynopsis()) {
        oprot.writeString(struct.synopsis);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetSmallType()) {
        oprot.writeString(struct.smallType);
      }
      if (struct.isSetBigType()) {
        oprot.writeString(struct.bigType);
      }
      if (struct.isSetPicture()) {
        oprot.writeString(struct.picture);
      }
      if (struct.isSetPanorama()) {
        oprot.writeString(struct.panorama);
      }
      if (struct.isSetLng()) {
        oprot.writeDouble(struct.lng);
      }
      if (struct.isSetLat()) {
        oprot.writeDouble(struct.lat);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetAttachList()) {
        {
          oprot.writeI32(struct.attachList.size());
          for (Dm_PictureAttach _iter4 : struct.attachList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetOpeningTime()) {
        oprot.writeString(struct.openingTime);
      }
      if (struct.isSetTicketPrice()) {
        oprot.writeString(struct.ticketPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dm_Scenery struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sid = iprot.readString();
        struct.setSidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.synopsis = iprot.readString();
        struct.setSynopsisIsSet(true);
      }
      if (incoming.get(4)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(5)) {
        struct.smallType = iprot.readString();
        struct.setSmallTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bigType = iprot.readString();
        struct.setBigTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.picture = iprot.readString();
        struct.setPictureIsSet(true);
      }
      if (incoming.get(8)) {
        struct.panorama = iprot.readString();
        struct.setPanoramaIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lng = iprot.readDouble();
        struct.setLngIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lat = iprot.readDouble();
        struct.setLatIsSet(true);
      }
      if (incoming.get(11)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.attachList = new ArrayList<Dm_PictureAttach>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            Dm_PictureAttach _elem7; // required
            _elem7 = new Dm_PictureAttach();
            _elem7.read(iprot);
            struct.attachList.add(_elem7);
          }
        }
        struct.setAttachListIsSet(true);
      }
      if (incoming.get(13)) {
        struct.openingTime = iprot.readString();
        struct.setOpeningTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.ticketPrice = iprot.readString();
        struct.setTicketPriceIsSet(true);
      }
    }
  }

}

