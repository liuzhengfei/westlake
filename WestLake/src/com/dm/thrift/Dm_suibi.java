/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Dm_suibi implements org.apache.thrift.TBase<Dm_suibi, Dm_suibi._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dm_suibi");

  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ISPRIVATE_FIELD_DESC = new org.apache.thrift.protocol.TField("isprivate", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREATEUSER_FIELD_DESC = new org.apache.thrift.protocol.TField("createuser", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NR_FIELD_DESC = new org.apache.thrift.protocol.TField("nr", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("img", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ZFNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("zfnum", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField HFNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("hfnum", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Dm_suibiStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Dm_suibiTupleSchemeFactory());
  }

  public String url; // required
  public String isprivate; // required
  public String createdate; // required
  public String userid; // required
  public String createuser; // required
  public String nr; // required
  public String img; // required
  public String tag; // required
  public String sid; // required
  public String zfnum; // required
  public String hfnum; // required
  public String id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    URL((short)1, "url"),
    ISPRIVATE((short)2, "isprivate"),
    CREATEDATE((short)3, "createdate"),
    USERID((short)4, "userid"),
    CREATEUSER((short)5, "createuser"),
    NR((short)6, "nr"),
    IMG((short)7, "img"),
    TAG((short)8, "tag"),
    SID((short)9, "sid"),
    ZFNUM((short)10, "zfnum"),
    HFNUM((short)11, "hfnum"),
    ID((short)12, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URL
          return URL;
        case 2: // ISPRIVATE
          return ISPRIVATE;
        case 3: // CREATEDATE
          return CREATEDATE;
        case 4: // USERID
          return USERID;
        case 5: // CREATEUSER
          return CREATEUSER;
        case 6: // NR
          return NR;
        case 7: // IMG
          return IMG;
        case 8: // TAG
          return TAG;
        case 9: // SID
          return SID;
        case 10: // ZFNUM
          return ZFNUM;
        case 11: // HFNUM
          return HFNUM;
        case 12: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISPRIVATE, new org.apache.thrift.meta_data.FieldMetaData("isprivate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATEDATE, new org.apache.thrift.meta_data.FieldMetaData("createdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATEUSER, new org.apache.thrift.meta_data.FieldMetaData("createuser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NR, new org.apache.thrift.meta_data.FieldMetaData("nr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG, new org.apache.thrift.meta_data.FieldMetaData("img", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZFNUM, new org.apache.thrift.meta_data.FieldMetaData("zfnum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HFNUM, new org.apache.thrift.meta_data.FieldMetaData("hfnum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dm_suibi.class, metaDataMap);
  }

  public Dm_suibi() {
  }

  public Dm_suibi(
    String url,
    String isprivate,
    String createdate,
    String userid,
    String createuser,
    String nr,
    String img,
    String tag,
    String sid,
    String zfnum,
    String hfnum,
    String id)
  {
    this();
    this.url = url;
    this.isprivate = isprivate;
    this.createdate = createdate;
    this.userid = userid;
    this.createuser = createuser;
    this.nr = nr;
    this.img = img;
    this.tag = tag;
    this.sid = sid;
    this.zfnum = zfnum;
    this.hfnum = hfnum;
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dm_suibi(Dm_suibi other) {
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetIsprivate()) {
      this.isprivate = other.isprivate;
    }
    if (other.isSetCreatedate()) {
      this.createdate = other.createdate;
    }
    if (other.isSetUserid()) {
      this.userid = other.userid;
    }
    if (other.isSetCreateuser()) {
      this.createuser = other.createuser;
    }
    if (other.isSetNr()) {
      this.nr = other.nr;
    }
    if (other.isSetImg()) {
      this.img = other.img;
    }
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    if (other.isSetSid()) {
      this.sid = other.sid;
    }
    if (other.isSetZfnum()) {
      this.zfnum = other.zfnum;
    }
    if (other.isSetHfnum()) {
      this.hfnum = other.hfnum;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
  }

  public Dm_suibi deepCopy() {
    return new Dm_suibi(this);
  }

  @Override
  public void clear() {
    this.url = null;
    this.isprivate = null;
    this.createdate = null;
    this.userid = null;
    this.createuser = null;
    this.nr = null;
    this.img = null;
    this.tag = null;
    this.sid = null;
    this.zfnum = null;
    this.hfnum = null;
    this.id = null;
  }

  public String getUrl() {
    return this.url;
  }

  public Dm_suibi setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getIsprivate() {
    return this.isprivate;
  }

  public Dm_suibi setIsprivate(String isprivate) {
    this.isprivate = isprivate;
    return this;
  }

  public void unsetIsprivate() {
    this.isprivate = null;
  }

  /** Returns true if field isprivate is set (has been assigned a value) and false otherwise */
  public boolean isSetIsprivate() {
    return this.isprivate != null;
  }

  public void setIsprivateIsSet(boolean value) {
    if (!value) {
      this.isprivate = null;
    }
  }

  public String getCreatedate() {
    return this.createdate;
  }

  public Dm_suibi setCreatedate(String createdate) {
    this.createdate = createdate;
    return this;
  }

  public void unsetCreatedate() {
    this.createdate = null;
  }

  /** Returns true if field createdate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedate() {
    return this.createdate != null;
  }

  public void setCreatedateIsSet(boolean value) {
    if (!value) {
      this.createdate = null;
    }
  }

  public String getUserid() {
    return this.userid;
  }

  public Dm_suibi setUserid(String userid) {
    this.userid = userid;
    return this;
  }

  public void unsetUserid() {
    this.userid = null;
  }

  /** Returns true if field userid is set (has been assigned a value) and false otherwise */
  public boolean isSetUserid() {
    return this.userid != null;
  }

  public void setUseridIsSet(boolean value) {
    if (!value) {
      this.userid = null;
    }
  }

  public String getCreateuser() {
    return this.createuser;
  }

  public Dm_suibi setCreateuser(String createuser) {
    this.createuser = createuser;
    return this;
  }

  public void unsetCreateuser() {
    this.createuser = null;
  }

  /** Returns true if field createuser is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateuser() {
    return this.createuser != null;
  }

  public void setCreateuserIsSet(boolean value) {
    if (!value) {
      this.createuser = null;
    }
  }

  public String getNr() {
    return this.nr;
  }

  public Dm_suibi setNr(String nr) {
    this.nr = nr;
    return this;
  }

  public void unsetNr() {
    this.nr = null;
  }

  /** Returns true if field nr is set (has been assigned a value) and false otherwise */
  public boolean isSetNr() {
    return this.nr != null;
  }

  public void setNrIsSet(boolean value) {
    if (!value) {
      this.nr = null;
    }
  }

  public String getImg() {
    return this.img;
  }

  public Dm_suibi setImg(String img) {
    this.img = img;
    return this;
  }

  public void unsetImg() {
    this.img = null;
  }

  /** Returns true if field img is set (has been assigned a value) and false otherwise */
  public boolean isSetImg() {
    return this.img != null;
  }

  public void setImgIsSet(boolean value) {
    if (!value) {
      this.img = null;
    }
  }

  public String getTag() {
    return this.tag;
  }

  public Dm_suibi setTag(String tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public String getSid() {
    return this.sid;
  }

  public Dm_suibi setSid(String sid) {
    this.sid = sid;
    return this;
  }

  public void unsetSid() {
    this.sid = null;
  }

  /** Returns true if field sid is set (has been assigned a value) and false otherwise */
  public boolean isSetSid() {
    return this.sid != null;
  }

  public void setSidIsSet(boolean value) {
    if (!value) {
      this.sid = null;
    }
  }

  public String getZfnum() {
    return this.zfnum;
  }

  public Dm_suibi setZfnum(String zfnum) {
    this.zfnum = zfnum;
    return this;
  }

  public void unsetZfnum() {
    this.zfnum = null;
  }

  /** Returns true if field zfnum is set (has been assigned a value) and false otherwise */
  public boolean isSetZfnum() {
    return this.zfnum != null;
  }

  public void setZfnumIsSet(boolean value) {
    if (!value) {
      this.zfnum = null;
    }
  }

  public String getHfnum() {
    return this.hfnum;
  }

  public Dm_suibi setHfnum(String hfnum) {
    this.hfnum = hfnum;
    return this;
  }

  public void unsetHfnum() {
    this.hfnum = null;
  }

  /** Returns true if field hfnum is set (has been assigned a value) and false otherwise */
  public boolean isSetHfnum() {
    return this.hfnum != null;
  }

  public void setHfnumIsSet(boolean value) {
    if (!value) {
      this.hfnum = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public Dm_suibi setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case ISPRIVATE:
      if (value == null) {
        unsetIsprivate();
      } else {
        setIsprivate((String)value);
      }
      break;

    case CREATEDATE:
      if (value == null) {
        unsetCreatedate();
      } else {
        setCreatedate((String)value);
      }
      break;

    case USERID:
      if (value == null) {
        unsetUserid();
      } else {
        setUserid((String)value);
      }
      break;

    case CREATEUSER:
      if (value == null) {
        unsetCreateuser();
      } else {
        setCreateuser((String)value);
      }
      break;

    case NR:
      if (value == null) {
        unsetNr();
      } else {
        setNr((String)value);
      }
      break;

    case IMG:
      if (value == null) {
        unsetImg();
      } else {
        setImg((String)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((String)value);
      }
      break;

    case SID:
      if (value == null) {
        unsetSid();
      } else {
        setSid((String)value);
      }
      break;

    case ZFNUM:
      if (value == null) {
        unsetZfnum();
      } else {
        setZfnum((String)value);
      }
      break;

    case HFNUM:
      if (value == null) {
        unsetHfnum();
      } else {
        setHfnum((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case URL:
      return getUrl();

    case ISPRIVATE:
      return getIsprivate();

    case CREATEDATE:
      return getCreatedate();

    case USERID:
      return getUserid();

    case CREATEUSER:
      return getCreateuser();

    case NR:
      return getNr();

    case IMG:
      return getImg();

    case TAG:
      return getTag();

    case SID:
      return getSid();

    case ZFNUM:
      return getZfnum();

    case HFNUM:
      return getHfnum();

    case ID:
      return getId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case URL:
      return isSetUrl();
    case ISPRIVATE:
      return isSetIsprivate();
    case CREATEDATE:
      return isSetCreatedate();
    case USERID:
      return isSetUserid();
    case CREATEUSER:
      return isSetCreateuser();
    case NR:
      return isSetNr();
    case IMG:
      return isSetImg();
    case TAG:
      return isSetTag();
    case SID:
      return isSetSid();
    case ZFNUM:
      return isSetZfnum();
    case HFNUM:
      return isSetHfnum();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dm_suibi)
      return this.equals((Dm_suibi)that);
    return false;
  }

  public boolean equals(Dm_suibi that) {
    if (that == null)
      return false;

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_isprivate = true && this.isSetIsprivate();
    boolean that_present_isprivate = true && that.isSetIsprivate();
    if (this_present_isprivate || that_present_isprivate) {
      if (!(this_present_isprivate && that_present_isprivate))
        return false;
      if (!this.isprivate.equals(that.isprivate))
        return false;
    }

    boolean this_present_createdate = true && this.isSetCreatedate();
    boolean that_present_createdate = true && that.isSetCreatedate();
    if (this_present_createdate || that_present_createdate) {
      if (!(this_present_createdate && that_present_createdate))
        return false;
      if (!this.createdate.equals(that.createdate))
        return false;
    }

    boolean this_present_userid = true && this.isSetUserid();
    boolean that_present_userid = true && that.isSetUserid();
    if (this_present_userid || that_present_userid) {
      if (!(this_present_userid && that_present_userid))
        return false;
      if (!this.userid.equals(that.userid))
        return false;
    }

    boolean this_present_createuser = true && this.isSetCreateuser();
    boolean that_present_createuser = true && that.isSetCreateuser();
    if (this_present_createuser || that_present_createuser) {
      if (!(this_present_createuser && that_present_createuser))
        return false;
      if (!this.createuser.equals(that.createuser))
        return false;
    }

    boolean this_present_nr = true && this.isSetNr();
    boolean that_present_nr = true && that.isSetNr();
    if (this_present_nr || that_present_nr) {
      if (!(this_present_nr && that_present_nr))
        return false;
      if (!this.nr.equals(that.nr))
        return false;
    }

    boolean this_present_img = true && this.isSetImg();
    boolean that_present_img = true && that.isSetImg();
    if (this_present_img || that_present_img) {
      if (!(this_present_img && that_present_img))
        return false;
      if (!this.img.equals(that.img))
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_sid = true && this.isSetSid();
    boolean that_present_sid = true && that.isSetSid();
    if (this_present_sid || that_present_sid) {
      if (!(this_present_sid && that_present_sid))
        return false;
      if (!this.sid.equals(that.sid))
        return false;
    }

    boolean this_present_zfnum = true && this.isSetZfnum();
    boolean that_present_zfnum = true && that.isSetZfnum();
    if (this_present_zfnum || that_present_zfnum) {
      if (!(this_present_zfnum && that_present_zfnum))
        return false;
      if (!this.zfnum.equals(that.zfnum))
        return false;
    }

    boolean this_present_hfnum = true && this.isSetHfnum();
    boolean that_present_hfnum = true && that.isSetHfnum();
    if (this_present_hfnum || that_present_hfnum) {
      if (!(this_present_hfnum && that_present_hfnum))
        return false;
      if (!this.hfnum.equals(that.hfnum))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Dm_suibi other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Dm_suibi typedOther = (Dm_suibi)other;

    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsprivate()).compareTo(typedOther.isSetIsprivate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsprivate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isprivate, typedOther.isprivate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedate()).compareTo(typedOther.isSetCreatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdate, typedOther.createdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateuser()).compareTo(typedOther.isSetCreateuser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateuser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createuser, typedOther.createuser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNr()).compareTo(typedOther.isSetNr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nr, typedOther.nr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImg()).compareTo(typedOther.isSetImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img, typedOther.img);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(typedOther.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, typedOther.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSid()).compareTo(typedOther.isSetSid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, typedOther.sid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZfnum()).compareTo(typedOther.isSetZfnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZfnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zfnum, typedOther.zfnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHfnum()).compareTo(typedOther.isSetHfnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHfnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hfnum, typedOther.hfnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dm_suibi(");
    boolean first = true;

    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isprivate:");
    if (this.isprivate == null) {
      sb.append("null");
    } else {
      sb.append(this.isprivate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdate:");
    if (this.createdate == null) {
      sb.append("null");
    } else {
      sb.append(this.createdate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userid:");
    if (this.userid == null) {
      sb.append("null");
    } else {
      sb.append(this.userid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createuser:");
    if (this.createuser == null) {
      sb.append("null");
    } else {
      sb.append(this.createuser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nr:");
    if (this.nr == null) {
      sb.append("null");
    } else {
      sb.append(this.nr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("img:");
    if (this.img == null) {
      sb.append("null");
    } else {
      sb.append(this.img);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tag:");
    if (this.tag == null) {
      sb.append("null");
    } else {
      sb.append(this.tag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sid:");
    if (this.sid == null) {
      sb.append("null");
    } else {
      sb.append(this.sid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zfnum:");
    if (this.zfnum == null) {
      sb.append("null");
    } else {
      sb.append(this.zfnum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hfnum:");
    if (this.hfnum == null) {
      sb.append("null");
    } else {
      sb.append(this.hfnum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Dm_suibiStandardSchemeFactory implements SchemeFactory {
    public Dm_suibiStandardScheme getScheme() {
      return new Dm_suibiStandardScheme();
    }
  }

  private static class Dm_suibiStandardScheme extends StandardScheme<Dm_suibi> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dm_suibi struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ISPRIVATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isprivate = iprot.readString();
              struct.setIsprivateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdate = iprot.readString();
              struct.setCreatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USERID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userid = iprot.readString();
              struct.setUseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATEUSER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createuser = iprot.readString();
              struct.setCreateuserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nr = iprot.readString();
              struct.setNrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.img = iprot.readString();
              struct.setImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tag = iprot.readString();
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sid = iprot.readString();
              struct.setSidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ZFNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zfnum = iprot.readString();
              struct.setZfnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HFNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hfnum = iprot.readString();
              struct.setHfnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dm_suibi struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      if (struct.isprivate != null) {
        oprot.writeFieldBegin(ISPRIVATE_FIELD_DESC);
        oprot.writeString(struct.isprivate);
        oprot.writeFieldEnd();
      }
      if (struct.createdate != null) {
        oprot.writeFieldBegin(CREATEDATE_FIELD_DESC);
        oprot.writeString(struct.createdate);
        oprot.writeFieldEnd();
      }
      if (struct.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(struct.userid);
        oprot.writeFieldEnd();
      }
      if (struct.createuser != null) {
        oprot.writeFieldBegin(CREATEUSER_FIELD_DESC);
        oprot.writeString(struct.createuser);
        oprot.writeFieldEnd();
      }
      if (struct.nr != null) {
        oprot.writeFieldBegin(NR_FIELD_DESC);
        oprot.writeString(struct.nr);
        oprot.writeFieldEnd();
      }
      if (struct.img != null) {
        oprot.writeFieldBegin(IMG_FIELD_DESC);
        oprot.writeString(struct.img);
        oprot.writeFieldEnd();
      }
      if (struct.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        oprot.writeString(struct.tag);
        oprot.writeFieldEnd();
      }
      if (struct.sid != null) {
        oprot.writeFieldBegin(SID_FIELD_DESC);
        oprot.writeString(struct.sid);
        oprot.writeFieldEnd();
      }
      if (struct.zfnum != null) {
        oprot.writeFieldBegin(ZFNUM_FIELD_DESC);
        oprot.writeString(struct.zfnum);
        oprot.writeFieldEnd();
      }
      if (struct.hfnum != null) {
        oprot.writeFieldBegin(HFNUM_FIELD_DESC);
        oprot.writeString(struct.hfnum);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Dm_suibiTupleSchemeFactory implements SchemeFactory {
    public Dm_suibiTupleScheme getScheme() {
      return new Dm_suibiTupleScheme();
    }
  }

  private static class Dm_suibiTupleScheme extends TupleScheme<Dm_suibi> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dm_suibi struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUrl()) {
        optionals.set(0);
      }
      if (struct.isSetIsprivate()) {
        optionals.set(1);
      }
      if (struct.isSetCreatedate()) {
        optionals.set(2);
      }
      if (struct.isSetUserid()) {
        optionals.set(3);
      }
      if (struct.isSetCreateuser()) {
        optionals.set(4);
      }
      if (struct.isSetNr()) {
        optionals.set(5);
      }
      if (struct.isSetImg()) {
        optionals.set(6);
      }
      if (struct.isSetTag()) {
        optionals.set(7);
      }
      if (struct.isSetSid()) {
        optionals.set(8);
      }
      if (struct.isSetZfnum()) {
        optionals.set(9);
      }
      if (struct.isSetHfnum()) {
        optionals.set(10);
      }
      if (struct.isSetId()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetIsprivate()) {
        oprot.writeString(struct.isprivate);
      }
      if (struct.isSetCreatedate()) {
        oprot.writeString(struct.createdate);
      }
      if (struct.isSetUserid()) {
        oprot.writeString(struct.userid);
      }
      if (struct.isSetCreateuser()) {
        oprot.writeString(struct.createuser);
      }
      if (struct.isSetNr()) {
        oprot.writeString(struct.nr);
      }
      if (struct.isSetImg()) {
        oprot.writeString(struct.img);
      }
      if (struct.isSetTag()) {
        oprot.writeString(struct.tag);
      }
      if (struct.isSetSid()) {
        oprot.writeString(struct.sid);
      }
      if (struct.isSetZfnum()) {
        oprot.writeString(struct.zfnum);
      }
      if (struct.isSetHfnum()) {
        oprot.writeString(struct.hfnum);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dm_suibi struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isprivate = iprot.readString();
        struct.setIsprivateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createdate = iprot.readString();
        struct.setCreatedateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userid = iprot.readString();
        struct.setUseridIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createuser = iprot.readString();
        struct.setCreateuserIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nr = iprot.readString();
        struct.setNrIsSet(true);
      }
      if (incoming.get(6)) {
        struct.img = iprot.readString();
        struct.setImgIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tag = iprot.readString();
        struct.setTagIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sid = iprot.readString();
        struct.setSidIsSet(true);
      }
      if (incoming.get(9)) {
        struct.zfnum = iprot.readString();
        struct.setZfnumIsSet(true);
      }
      if (incoming.get(10)) {
        struct.hfnum = iprot.readString();
        struct.setHfnumIsSet(true);
      }
      if (incoming.get(11)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
    }
  }

}

