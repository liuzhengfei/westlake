/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Dm_App_Tuce implements org.apache.thrift.TBase<Dm_App_Tuce, Dm_App_Tuce._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dm_App_Tuce");

  private static final org.apache.thrift.protocol.TField TUCEID_FIELD_DESC = new org.apache.thrift.protocol.TField("tuceid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FENGMIAN_FIELD_DESC = new org.apache.thrift.protocol.TField("fengmian", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ISFABU_FIELD_DESC = new org.apache.thrift.protocol.TField("isfabu", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ISHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("ishot", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ISTUIJIAN_FIELD_DESC = new org.apache.thrift.protocol.TField("istuijian", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ISNEW_FIELD_DESC = new org.apache.thrift.protocol.TField("isnew", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATEDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TUCE_PICLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("tuce_piclist", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Dm_App_TuceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Dm_App_TuceTupleSchemeFactory());
  }

  public String tuceid; // required
  public String title; // required
  public String userid; // required
  public String username; // required
  public String fengmian; // required
  public String isfabu; // required
  public String ishot; // required
  public String istuijian; // required
  public String isnew; // required
  public String description; // required
  public String createdate; // required
  public List<Dm_App_Tuce_Pic> tuce_piclist; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUCEID((short)1, "tuceid"),
    TITLE((short)2, "title"),
    USERID((short)3, "userid"),
    USERNAME((short)4, "username"),
    FENGMIAN((short)5, "fengmian"),
    ISFABU((short)6, "isfabu"),
    ISHOT((short)7, "ishot"),
    ISTUIJIAN((short)8, "istuijian"),
    ISNEW((short)9, "isnew"),
    DESCRIPTION((short)10, "description"),
    CREATEDATE((short)11, "createdate"),
    TUCE_PICLIST((short)12, "tuce_piclist");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUCEID
          return TUCEID;
        case 2: // TITLE
          return TITLE;
        case 3: // USERID
          return USERID;
        case 4: // USERNAME
          return USERNAME;
        case 5: // FENGMIAN
          return FENGMIAN;
        case 6: // ISFABU
          return ISFABU;
        case 7: // ISHOT
          return ISHOT;
        case 8: // ISTUIJIAN
          return ISTUIJIAN;
        case 9: // ISNEW
          return ISNEW;
        case 10: // DESCRIPTION
          return DESCRIPTION;
        case 11: // CREATEDATE
          return CREATEDATE;
        case 12: // TUCE_PICLIST
          return TUCE_PICLIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUCEID, new org.apache.thrift.meta_data.FieldMetaData("tuceid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FENGMIAN, new org.apache.thrift.meta_data.FieldMetaData("fengmian", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISFABU, new org.apache.thrift.meta_data.FieldMetaData("isfabu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISHOT, new org.apache.thrift.meta_data.FieldMetaData("ishot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISTUIJIAN, new org.apache.thrift.meta_data.FieldMetaData("istuijian", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISNEW, new org.apache.thrift.meta_data.FieldMetaData("isnew", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATEDATE, new org.apache.thrift.meta_data.FieldMetaData("createdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TUCE_PICLIST, new org.apache.thrift.meta_data.FieldMetaData("tuce_piclist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_App_Tuce_Pic.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dm_App_Tuce.class, metaDataMap);
  }

  public Dm_App_Tuce() {
  }

  public Dm_App_Tuce(
    String tuceid,
    String title,
    String userid,
    String username,
    String fengmian,
    String isfabu,
    String ishot,
    String istuijian,
    String isnew,
    String description,
    String createdate,
    List<Dm_App_Tuce_Pic> tuce_piclist)
  {
    this();
    this.tuceid = tuceid;
    this.title = title;
    this.userid = userid;
    this.username = username;
    this.fengmian = fengmian;
    this.isfabu = isfabu;
    this.ishot = ishot;
    this.istuijian = istuijian;
    this.isnew = isnew;
    this.description = description;
    this.createdate = createdate;
    this.tuce_piclist = tuce_piclist;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dm_App_Tuce(Dm_App_Tuce other) {
    if (other.isSetTuceid()) {
      this.tuceid = other.tuceid;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetUserid()) {
      this.userid = other.userid;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetFengmian()) {
      this.fengmian = other.fengmian;
    }
    if (other.isSetIsfabu()) {
      this.isfabu = other.isfabu;
    }
    if (other.isSetIshot()) {
      this.ishot = other.ishot;
    }
    if (other.isSetIstuijian()) {
      this.istuijian = other.istuijian;
    }
    if (other.isSetIsnew()) {
      this.isnew = other.isnew;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetCreatedate()) {
      this.createdate = other.createdate;
    }
    if (other.isSetTuce_piclist()) {
      List<Dm_App_Tuce_Pic> __this__tuce_piclist = new ArrayList<Dm_App_Tuce_Pic>();
      for (Dm_App_Tuce_Pic other_element : other.tuce_piclist) {
        __this__tuce_piclist.add(new Dm_App_Tuce_Pic(other_element));
      }
      this.tuce_piclist = __this__tuce_piclist;
    }
  }

  public Dm_App_Tuce deepCopy() {
    return new Dm_App_Tuce(this);
  }

  @Override
  public void clear() {
    this.tuceid = null;
    this.title = null;
    this.userid = null;
    this.username = null;
    this.fengmian = null;
    this.isfabu = null;
    this.ishot = null;
    this.istuijian = null;
    this.isnew = null;
    this.description = null;
    this.createdate = null;
    this.tuce_piclist = null;
  }

  public String getTuceid() {
    return this.tuceid;
  }

  public Dm_App_Tuce setTuceid(String tuceid) {
    this.tuceid = tuceid;
    return this;
  }

  public void unsetTuceid() {
    this.tuceid = null;
  }

  /** Returns true if field tuceid is set (has been assigned a value) and false otherwise */
  public boolean isSetTuceid() {
    return this.tuceid != null;
  }

  public void setTuceidIsSet(boolean value) {
    if (!value) {
      this.tuceid = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public Dm_App_Tuce setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getUserid() {
    return this.userid;
  }

  public Dm_App_Tuce setUserid(String userid) {
    this.userid = userid;
    return this;
  }

  public void unsetUserid() {
    this.userid = null;
  }

  /** Returns true if field userid is set (has been assigned a value) and false otherwise */
  public boolean isSetUserid() {
    return this.userid != null;
  }

  public void setUseridIsSet(boolean value) {
    if (!value) {
      this.userid = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public Dm_App_Tuce setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getFengmian() {
    return this.fengmian;
  }

  public Dm_App_Tuce setFengmian(String fengmian) {
    this.fengmian = fengmian;
    return this;
  }

  public void unsetFengmian() {
    this.fengmian = null;
  }

  /** Returns true if field fengmian is set (has been assigned a value) and false otherwise */
  public boolean isSetFengmian() {
    return this.fengmian != null;
  }

  public void setFengmianIsSet(boolean value) {
    if (!value) {
      this.fengmian = null;
    }
  }

  public String getIsfabu() {
    return this.isfabu;
  }

  public Dm_App_Tuce setIsfabu(String isfabu) {
    this.isfabu = isfabu;
    return this;
  }

  public void unsetIsfabu() {
    this.isfabu = null;
  }

  /** Returns true if field isfabu is set (has been assigned a value) and false otherwise */
  public boolean isSetIsfabu() {
    return this.isfabu != null;
  }

  public void setIsfabuIsSet(boolean value) {
    if (!value) {
      this.isfabu = null;
    }
  }

  public String getIshot() {
    return this.ishot;
  }

  public Dm_App_Tuce setIshot(String ishot) {
    this.ishot = ishot;
    return this;
  }

  public void unsetIshot() {
    this.ishot = null;
  }

  /** Returns true if field ishot is set (has been assigned a value) and false otherwise */
  public boolean isSetIshot() {
    return this.ishot != null;
  }

  public void setIshotIsSet(boolean value) {
    if (!value) {
      this.ishot = null;
    }
  }

  public String getIstuijian() {
    return this.istuijian;
  }

  public Dm_App_Tuce setIstuijian(String istuijian) {
    this.istuijian = istuijian;
    return this;
  }

  public void unsetIstuijian() {
    this.istuijian = null;
  }

  /** Returns true if field istuijian is set (has been assigned a value) and false otherwise */
  public boolean isSetIstuijian() {
    return this.istuijian != null;
  }

  public void setIstuijianIsSet(boolean value) {
    if (!value) {
      this.istuijian = null;
    }
  }

  public String getIsnew() {
    return this.isnew;
  }

  public Dm_App_Tuce setIsnew(String isnew) {
    this.isnew = isnew;
    return this;
  }

  public void unsetIsnew() {
    this.isnew = null;
  }

  /** Returns true if field isnew is set (has been assigned a value) and false otherwise */
  public boolean isSetIsnew() {
    return this.isnew != null;
  }

  public void setIsnewIsSet(boolean value) {
    if (!value) {
      this.isnew = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public Dm_App_Tuce setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getCreatedate() {
    return this.createdate;
  }

  public Dm_App_Tuce setCreatedate(String createdate) {
    this.createdate = createdate;
    return this;
  }

  public void unsetCreatedate() {
    this.createdate = null;
  }

  /** Returns true if field createdate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedate() {
    return this.createdate != null;
  }

  public void setCreatedateIsSet(boolean value) {
    if (!value) {
      this.createdate = null;
    }
  }

  public int getTuce_piclistSize() {
    return (this.tuce_piclist == null) ? 0 : this.tuce_piclist.size();
  }

  public java.util.Iterator<Dm_App_Tuce_Pic> getTuce_piclistIterator() {
    return (this.tuce_piclist == null) ? null : this.tuce_piclist.iterator();
  }

  public void addToTuce_piclist(Dm_App_Tuce_Pic elem) {
    if (this.tuce_piclist == null) {
      this.tuce_piclist = new ArrayList<Dm_App_Tuce_Pic>();
    }
    this.tuce_piclist.add(elem);
  }

  public List<Dm_App_Tuce_Pic> getTuce_piclist() {
    return this.tuce_piclist;
  }

  public Dm_App_Tuce setTuce_piclist(List<Dm_App_Tuce_Pic> tuce_piclist) {
    this.tuce_piclist = tuce_piclist;
    return this;
  }

  public void unsetTuce_piclist() {
    this.tuce_piclist = null;
  }

  /** Returns true if field tuce_piclist is set (has been assigned a value) and false otherwise */
  public boolean isSetTuce_piclist() {
    return this.tuce_piclist != null;
  }

  public void setTuce_piclistIsSet(boolean value) {
    if (!value) {
      this.tuce_piclist = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TUCEID:
      if (value == null) {
        unsetTuceid();
      } else {
        setTuceid((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case USERID:
      if (value == null) {
        unsetUserid();
      } else {
        setUserid((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case FENGMIAN:
      if (value == null) {
        unsetFengmian();
      } else {
        setFengmian((String)value);
      }
      break;

    case ISFABU:
      if (value == null) {
        unsetIsfabu();
      } else {
        setIsfabu((String)value);
      }
      break;

    case ISHOT:
      if (value == null) {
        unsetIshot();
      } else {
        setIshot((String)value);
      }
      break;

    case ISTUIJIAN:
      if (value == null) {
        unsetIstuijian();
      } else {
        setIstuijian((String)value);
      }
      break;

    case ISNEW:
      if (value == null) {
        unsetIsnew();
      } else {
        setIsnew((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case CREATEDATE:
      if (value == null) {
        unsetCreatedate();
      } else {
        setCreatedate((String)value);
      }
      break;

    case TUCE_PICLIST:
      if (value == null) {
        unsetTuce_piclist();
      } else {
        setTuce_piclist((List<Dm_App_Tuce_Pic>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TUCEID:
      return getTuceid();

    case TITLE:
      return getTitle();

    case USERID:
      return getUserid();

    case USERNAME:
      return getUsername();

    case FENGMIAN:
      return getFengmian();

    case ISFABU:
      return getIsfabu();

    case ISHOT:
      return getIshot();

    case ISTUIJIAN:
      return getIstuijian();

    case ISNEW:
      return getIsnew();

    case DESCRIPTION:
      return getDescription();

    case CREATEDATE:
      return getCreatedate();

    case TUCE_PICLIST:
      return getTuce_piclist();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TUCEID:
      return isSetTuceid();
    case TITLE:
      return isSetTitle();
    case USERID:
      return isSetUserid();
    case USERNAME:
      return isSetUsername();
    case FENGMIAN:
      return isSetFengmian();
    case ISFABU:
      return isSetIsfabu();
    case ISHOT:
      return isSetIshot();
    case ISTUIJIAN:
      return isSetIstuijian();
    case ISNEW:
      return isSetIsnew();
    case DESCRIPTION:
      return isSetDescription();
    case CREATEDATE:
      return isSetCreatedate();
    case TUCE_PICLIST:
      return isSetTuce_piclist();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dm_App_Tuce)
      return this.equals((Dm_App_Tuce)that);
    return false;
  }

  public boolean equals(Dm_App_Tuce that) {
    if (that == null)
      return false;

    boolean this_present_tuceid = true && this.isSetTuceid();
    boolean that_present_tuceid = true && that.isSetTuceid();
    if (this_present_tuceid || that_present_tuceid) {
      if (!(this_present_tuceid && that_present_tuceid))
        return false;
      if (!this.tuceid.equals(that.tuceid))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_userid = true && this.isSetUserid();
    boolean that_present_userid = true && that.isSetUserid();
    if (this_present_userid || that_present_userid) {
      if (!(this_present_userid && that_present_userid))
        return false;
      if (!this.userid.equals(that.userid))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_fengmian = true && this.isSetFengmian();
    boolean that_present_fengmian = true && that.isSetFengmian();
    if (this_present_fengmian || that_present_fengmian) {
      if (!(this_present_fengmian && that_present_fengmian))
        return false;
      if (!this.fengmian.equals(that.fengmian))
        return false;
    }

    boolean this_present_isfabu = true && this.isSetIsfabu();
    boolean that_present_isfabu = true && that.isSetIsfabu();
    if (this_present_isfabu || that_present_isfabu) {
      if (!(this_present_isfabu && that_present_isfabu))
        return false;
      if (!this.isfabu.equals(that.isfabu))
        return false;
    }

    boolean this_present_ishot = true && this.isSetIshot();
    boolean that_present_ishot = true && that.isSetIshot();
    if (this_present_ishot || that_present_ishot) {
      if (!(this_present_ishot && that_present_ishot))
        return false;
      if (!this.ishot.equals(that.ishot))
        return false;
    }

    boolean this_present_istuijian = true && this.isSetIstuijian();
    boolean that_present_istuijian = true && that.isSetIstuijian();
    if (this_present_istuijian || that_present_istuijian) {
      if (!(this_present_istuijian && that_present_istuijian))
        return false;
      if (!this.istuijian.equals(that.istuijian))
        return false;
    }

    boolean this_present_isnew = true && this.isSetIsnew();
    boolean that_present_isnew = true && that.isSetIsnew();
    if (this_present_isnew || that_present_isnew) {
      if (!(this_present_isnew && that_present_isnew))
        return false;
      if (!this.isnew.equals(that.isnew))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_createdate = true && this.isSetCreatedate();
    boolean that_present_createdate = true && that.isSetCreatedate();
    if (this_present_createdate || that_present_createdate) {
      if (!(this_present_createdate && that_present_createdate))
        return false;
      if (!this.createdate.equals(that.createdate))
        return false;
    }

    boolean this_present_tuce_piclist = true && this.isSetTuce_piclist();
    boolean that_present_tuce_piclist = true && that.isSetTuce_piclist();
    if (this_present_tuce_piclist || that_present_tuce_piclist) {
      if (!(this_present_tuce_piclist && that_present_tuce_piclist))
        return false;
      if (!this.tuce_piclist.equals(that.tuce_piclist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Dm_App_Tuce other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Dm_App_Tuce typedOther = (Dm_App_Tuce)other;

    lastComparison = Boolean.valueOf(isSetTuceid()).compareTo(typedOther.isSetTuceid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuceid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuceid, typedOther.tuceid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(typedOther.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, typedOther.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFengmian()).compareTo(typedOther.isSetFengmian());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFengmian()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fengmian, typedOther.fengmian);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsfabu()).compareTo(typedOther.isSetIsfabu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsfabu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isfabu, typedOther.isfabu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIshot()).compareTo(typedOther.isSetIshot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIshot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ishot, typedOther.ishot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIstuijian()).compareTo(typedOther.isSetIstuijian());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIstuijian()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.istuijian, typedOther.istuijian);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsnew()).compareTo(typedOther.isSetIsnew());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsnew()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isnew, typedOther.isnew);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedate()).compareTo(typedOther.isSetCreatedate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdate, typedOther.createdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTuce_piclist()).compareTo(typedOther.isSetTuce_piclist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuce_piclist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuce_piclist, typedOther.tuce_piclist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dm_App_Tuce(");
    boolean first = true;

    sb.append("tuceid:");
    if (this.tuceid == null) {
      sb.append("null");
    } else {
      sb.append(this.tuceid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userid:");
    if (this.userid == null) {
      sb.append("null");
    } else {
      sb.append(this.userid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fengmian:");
    if (this.fengmian == null) {
      sb.append("null");
    } else {
      sb.append(this.fengmian);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isfabu:");
    if (this.isfabu == null) {
      sb.append("null");
    } else {
      sb.append(this.isfabu);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ishot:");
    if (this.ishot == null) {
      sb.append("null");
    } else {
      sb.append(this.ishot);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("istuijian:");
    if (this.istuijian == null) {
      sb.append("null");
    } else {
      sb.append(this.istuijian);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isnew:");
    if (this.isnew == null) {
      sb.append("null");
    } else {
      sb.append(this.isnew);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdate:");
    if (this.createdate == null) {
      sb.append("null");
    } else {
      sb.append(this.createdate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tuce_piclist:");
    if (this.tuce_piclist == null) {
      sb.append("null");
    } else {
      sb.append(this.tuce_piclist);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Dm_App_TuceStandardSchemeFactory implements SchemeFactory {
    public Dm_App_TuceStandardScheme getScheme() {
      return new Dm_App_TuceStandardScheme();
    }
  }

  private static class Dm_App_TuceStandardScheme extends StandardScheme<Dm_App_Tuce> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dm_App_Tuce struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUCEID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tuceid = iprot.readString();
              struct.setTuceidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USERID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userid = iprot.readString();
              struct.setUseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FENGMIAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fengmian = iprot.readString();
              struct.setFengmianIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ISFABU
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isfabu = iprot.readString();
              struct.setIsfabuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ISHOT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ishot = iprot.readString();
              struct.setIshotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ISTUIJIAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.istuijian = iprot.readString();
              struct.setIstuijianIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ISNEW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isnew = iprot.readString();
              struct.setIsnewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATEDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdate = iprot.readString();
              struct.setCreatedateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TUCE_PICLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                struct.tuce_piclist = new ArrayList<Dm_App_Tuce_Pic>(_list200.size);
                for (int _i201 = 0; _i201 < _list200.size; ++_i201)
                {
                  Dm_App_Tuce_Pic _elem202; // required
                  _elem202 = new Dm_App_Tuce_Pic();
                  _elem202.read(iprot);
                  struct.tuce_piclist.add(_elem202);
                }
                iprot.readListEnd();
              }
              struct.setTuce_piclistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dm_App_Tuce struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tuceid != null) {
        oprot.writeFieldBegin(TUCEID_FIELD_DESC);
        oprot.writeString(struct.tuceid);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(struct.userid);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.fengmian != null) {
        oprot.writeFieldBegin(FENGMIAN_FIELD_DESC);
        oprot.writeString(struct.fengmian);
        oprot.writeFieldEnd();
      }
      if (struct.isfabu != null) {
        oprot.writeFieldBegin(ISFABU_FIELD_DESC);
        oprot.writeString(struct.isfabu);
        oprot.writeFieldEnd();
      }
      if (struct.ishot != null) {
        oprot.writeFieldBegin(ISHOT_FIELD_DESC);
        oprot.writeString(struct.ishot);
        oprot.writeFieldEnd();
      }
      if (struct.istuijian != null) {
        oprot.writeFieldBegin(ISTUIJIAN_FIELD_DESC);
        oprot.writeString(struct.istuijian);
        oprot.writeFieldEnd();
      }
      if (struct.isnew != null) {
        oprot.writeFieldBegin(ISNEW_FIELD_DESC);
        oprot.writeString(struct.isnew);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.createdate != null) {
        oprot.writeFieldBegin(CREATEDATE_FIELD_DESC);
        oprot.writeString(struct.createdate);
        oprot.writeFieldEnd();
      }
      if (struct.tuce_piclist != null) {
        oprot.writeFieldBegin(TUCE_PICLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tuce_piclist.size()));
          for (Dm_App_Tuce_Pic _iter203 : struct.tuce_piclist)
          {
            _iter203.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Dm_App_TuceTupleSchemeFactory implements SchemeFactory {
    public Dm_App_TuceTupleScheme getScheme() {
      return new Dm_App_TuceTupleScheme();
    }
  }

  private static class Dm_App_TuceTupleScheme extends TupleScheme<Dm_App_Tuce> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dm_App_Tuce struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTuceid()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetUserid()) {
        optionals.set(2);
      }
      if (struct.isSetUsername()) {
        optionals.set(3);
      }
      if (struct.isSetFengmian()) {
        optionals.set(4);
      }
      if (struct.isSetIsfabu()) {
        optionals.set(5);
      }
      if (struct.isSetIshot()) {
        optionals.set(6);
      }
      if (struct.isSetIstuijian()) {
        optionals.set(7);
      }
      if (struct.isSetIsnew()) {
        optionals.set(8);
      }
      if (struct.isSetDescription()) {
        optionals.set(9);
      }
      if (struct.isSetCreatedate()) {
        optionals.set(10);
      }
      if (struct.isSetTuce_piclist()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTuceid()) {
        oprot.writeString(struct.tuceid);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetUserid()) {
        oprot.writeString(struct.userid);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetFengmian()) {
        oprot.writeString(struct.fengmian);
      }
      if (struct.isSetIsfabu()) {
        oprot.writeString(struct.isfabu);
      }
      if (struct.isSetIshot()) {
        oprot.writeString(struct.ishot);
      }
      if (struct.isSetIstuijian()) {
        oprot.writeString(struct.istuijian);
      }
      if (struct.isSetIsnew()) {
        oprot.writeString(struct.isnew);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetCreatedate()) {
        oprot.writeString(struct.createdate);
      }
      if (struct.isSetTuce_piclist()) {
        {
          oprot.writeI32(struct.tuce_piclist.size());
          for (Dm_App_Tuce_Pic _iter204 : struct.tuce_piclist)
          {
            _iter204.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dm_App_Tuce struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.tuceid = iprot.readString();
        struct.setTuceidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userid = iprot.readString();
        struct.setUseridIsSet(true);
      }
      if (incoming.get(3)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fengmian = iprot.readString();
        struct.setFengmianIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isfabu = iprot.readString();
        struct.setIsfabuIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ishot = iprot.readString();
        struct.setIshotIsSet(true);
      }
      if (incoming.get(7)) {
        struct.istuijian = iprot.readString();
        struct.setIstuijianIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isnew = iprot.readString();
        struct.setIsnewIsSet(true);
      }
      if (incoming.get(9)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createdate = iprot.readString();
        struct.setCreatedateIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tuce_piclist = new ArrayList<Dm_App_Tuce_Pic>(_list205.size);
          for (int _i206 = 0; _i206 < _list205.size; ++_i206)
          {
            Dm_App_Tuce_Pic _elem207; // required
            _elem207 = new Dm_App_Tuce_Pic();
            _elem207.read(iprot);
            struct.tuce_piclist.add(_elem207);
          }
        }
        struct.setTuce_piclistIsSet(true);
      }
    }
  }

}

