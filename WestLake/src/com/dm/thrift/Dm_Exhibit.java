/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Dm_Exhibit implements org.apache.thrift.TBase<Dm_Exhibit, Dm_Exhibit._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dm_Exhibit");

  private static final org.apache.thrift.protocol.TField IS_SUCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("isSucess", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXHIBIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_id", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField EXHIBIT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXHIBIT_THUMBNAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_thumbnail", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXHIBIT_FIRST_VIDEO_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_first_video", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField EXHIBIT_FIRST_AUDIO_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_first_audio", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField EXHIBIT_FIRST_PICTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_first_picture", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField EXHIBIT_FIRST_BIG_PICTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_first_big_picture", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField EXHIBIT_FIRST_THREEDIMENSIONAL_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_first_threedimensional", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField EXHIBIT_FIRST_PANORAMA_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_first_panorama", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField EXHIBIT_X_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_x", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField EXHIBIT_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_y", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField EXHIBIT_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("exhibit_description", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PICLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("piclist", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField BIGPICLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("bigpiclist", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField VIDEOLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("videolist", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField AUDIOLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("audiolist", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField THREEDIMENSIONALLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("threedimensionallist", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField PANORAMALIST_FIELD_DESC = new org.apache.thrift.protocol.TField("panoramalist", org.apache.thrift.protocol.TType.LIST, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Dm_ExhibitStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Dm_ExhibitTupleSchemeFactory());
  }

  public boolean isSucess; // required
  public String message; // required
  public String exhibit_id; // required
  public String exhibit_name; // required
  public String exhibit_thumbnail; // required
  public Dm_Exhibit_video exhibit_first_video; // required
  public Dm_Exhibit_audio exhibit_first_audio; // required
  public Dm_Exhibit_pic exhibit_first_picture; // required
  public Dm_Exhibit_bigpic exhibit_first_big_picture; // required
  public Dm_Exhibit_threedimensional exhibit_first_threedimensional; // required
  public Dm_Exhibit_panorama exhibit_first_panorama; // required
  public double exhibit_x; // required
  public double exhibit_y; // required
  public String exhibit_description; // required
  public List<Dm_Exhibit_pic> piclist; // required
  public List<Dm_Exhibit_bigpic> bigpiclist; // required
  public List<Dm_Exhibit_video> videolist; // required
  public List<Dm_Exhibit_audio> audiolist; // required
  public List<Dm_Exhibit_threedimensional> threedimensionallist; // required
  public List<Dm_Exhibit_panorama> panoramalist; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_SUCESS((short)1, "isSucess"),
    MESSAGE((short)2, "message"),
    EXHIBIT_ID((short)3, "exhibit_id"),
    EXHIBIT_NAME((short)4, "exhibit_name"),
    EXHIBIT_THUMBNAIL((short)5, "exhibit_thumbnail"),
    EXHIBIT_FIRST_VIDEO((short)6, "exhibit_first_video"),
    EXHIBIT_FIRST_AUDIO((short)7, "exhibit_first_audio"),
    EXHIBIT_FIRST_PICTURE((short)8, "exhibit_first_picture"),
    EXHIBIT_FIRST_BIG_PICTURE((short)9, "exhibit_first_big_picture"),
    EXHIBIT_FIRST_THREEDIMENSIONAL((short)10, "exhibit_first_threedimensional"),
    EXHIBIT_FIRST_PANORAMA((short)11, "exhibit_first_panorama"),
    EXHIBIT_X((short)12, "exhibit_x"),
    EXHIBIT_Y((short)13, "exhibit_y"),
    EXHIBIT_DESCRIPTION((short)14, "exhibit_description"),
    PICLIST((short)15, "piclist"),
    BIGPICLIST((short)16, "bigpiclist"),
    VIDEOLIST((short)17, "videolist"),
    AUDIOLIST((short)18, "audiolist"),
    THREEDIMENSIONALLIST((short)19, "threedimensionallist"),
    PANORAMALIST((short)20, "panoramalist");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_SUCESS
          return IS_SUCESS;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // EXHIBIT_ID
          return EXHIBIT_ID;
        case 4: // EXHIBIT_NAME
          return EXHIBIT_NAME;
        case 5: // EXHIBIT_THUMBNAIL
          return EXHIBIT_THUMBNAIL;
        case 6: // EXHIBIT_FIRST_VIDEO
          return EXHIBIT_FIRST_VIDEO;
        case 7: // EXHIBIT_FIRST_AUDIO
          return EXHIBIT_FIRST_AUDIO;
        case 8: // EXHIBIT_FIRST_PICTURE
          return EXHIBIT_FIRST_PICTURE;
        case 9: // EXHIBIT_FIRST_BIG_PICTURE
          return EXHIBIT_FIRST_BIG_PICTURE;
        case 10: // EXHIBIT_FIRST_THREEDIMENSIONAL
          return EXHIBIT_FIRST_THREEDIMENSIONAL;
        case 11: // EXHIBIT_FIRST_PANORAMA
          return EXHIBIT_FIRST_PANORAMA;
        case 12: // EXHIBIT_X
          return EXHIBIT_X;
        case 13: // EXHIBIT_Y
          return EXHIBIT_Y;
        case 14: // EXHIBIT_DESCRIPTION
          return EXHIBIT_DESCRIPTION;
        case 15: // PICLIST
          return PICLIST;
        case 16: // BIGPICLIST
          return BIGPICLIST;
        case 17: // VIDEOLIST
          return VIDEOLIST;
        case 18: // AUDIOLIST
          return AUDIOLIST;
        case 19: // THREEDIMENSIONALLIST
          return THREEDIMENSIONALLIST;
        case 20: // PANORAMALIST
          return PANORAMALIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISSUCESS_ISSET_ID = 0;
  private static final int __EXHIBIT_X_ISSET_ID = 1;
  private static final int __EXHIBIT_Y_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_SUCESS, new org.apache.thrift.meta_data.FieldMetaData("isSucess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXHIBIT_ID, new org.apache.thrift.meta_data.FieldMetaData("exhibit_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXHIBIT_NAME, new org.apache.thrift.meta_data.FieldMetaData("exhibit_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXHIBIT_THUMBNAIL, new org.apache.thrift.meta_data.FieldMetaData("exhibit_thumbnail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXHIBIT_FIRST_VIDEO, new org.apache.thrift.meta_data.FieldMetaData("exhibit_first_video", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_video.class)));
    tmpMap.put(_Fields.EXHIBIT_FIRST_AUDIO, new org.apache.thrift.meta_data.FieldMetaData("exhibit_first_audio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_audio.class)));
    tmpMap.put(_Fields.EXHIBIT_FIRST_PICTURE, new org.apache.thrift.meta_data.FieldMetaData("exhibit_first_picture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_pic.class)));
    tmpMap.put(_Fields.EXHIBIT_FIRST_BIG_PICTURE, new org.apache.thrift.meta_data.FieldMetaData("exhibit_first_big_picture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_bigpic.class)));
    tmpMap.put(_Fields.EXHIBIT_FIRST_THREEDIMENSIONAL, new org.apache.thrift.meta_data.FieldMetaData("exhibit_first_threedimensional", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_threedimensional.class)));
    tmpMap.put(_Fields.EXHIBIT_FIRST_PANORAMA, new org.apache.thrift.meta_data.FieldMetaData("exhibit_first_panorama", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_panorama.class)));
    tmpMap.put(_Fields.EXHIBIT_X, new org.apache.thrift.meta_data.FieldMetaData("exhibit_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXHIBIT_Y, new org.apache.thrift.meta_data.FieldMetaData("exhibit_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXHIBIT_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("exhibit_description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICLIST, new org.apache.thrift.meta_data.FieldMetaData("piclist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_pic.class))));
    tmpMap.put(_Fields.BIGPICLIST, new org.apache.thrift.meta_data.FieldMetaData("bigpiclist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_bigpic.class))));
    tmpMap.put(_Fields.VIDEOLIST, new org.apache.thrift.meta_data.FieldMetaData("videolist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_video.class))));
    tmpMap.put(_Fields.AUDIOLIST, new org.apache.thrift.meta_data.FieldMetaData("audiolist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_audio.class))));
    tmpMap.put(_Fields.THREEDIMENSIONALLIST, new org.apache.thrift.meta_data.FieldMetaData("threedimensionallist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_threedimensional.class))));
    tmpMap.put(_Fields.PANORAMALIST, new org.apache.thrift.meta_data.FieldMetaData("panoramalist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit_panorama.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dm_Exhibit.class, metaDataMap);
  }

  public Dm_Exhibit() {
  }

  public Dm_Exhibit(
    boolean isSucess,
    String message,
    String exhibit_id,
    String exhibit_name,
    String exhibit_thumbnail,
    Dm_Exhibit_video exhibit_first_video,
    Dm_Exhibit_audio exhibit_first_audio,
    Dm_Exhibit_pic exhibit_first_picture,
    Dm_Exhibit_bigpic exhibit_first_big_picture,
    Dm_Exhibit_threedimensional exhibit_first_threedimensional,
    Dm_Exhibit_panorama exhibit_first_panorama,
    double exhibit_x,
    double exhibit_y,
    String exhibit_description,
    List<Dm_Exhibit_pic> piclist,
    List<Dm_Exhibit_bigpic> bigpiclist,
    List<Dm_Exhibit_video> videolist,
    List<Dm_Exhibit_audio> audiolist,
    List<Dm_Exhibit_threedimensional> threedimensionallist,
    List<Dm_Exhibit_panorama> panoramalist)
  {
    this();
    this.isSucess = isSucess;
    setIsSucessIsSet(true);
    this.message = message;
    this.exhibit_id = exhibit_id;
    this.exhibit_name = exhibit_name;
    this.exhibit_thumbnail = exhibit_thumbnail;
    this.exhibit_first_video = exhibit_first_video;
    this.exhibit_first_audio = exhibit_first_audio;
    this.exhibit_first_picture = exhibit_first_picture;
    this.exhibit_first_big_picture = exhibit_first_big_picture;
    this.exhibit_first_threedimensional = exhibit_first_threedimensional;
    this.exhibit_first_panorama = exhibit_first_panorama;
    this.exhibit_x = exhibit_x;
    setExhibit_xIsSet(true);
    this.exhibit_y = exhibit_y;
    setExhibit_yIsSet(true);
    this.exhibit_description = exhibit_description;
    this.piclist = piclist;
    this.bigpiclist = bigpiclist;
    this.videolist = videolist;
    this.audiolist = audiolist;
    this.threedimensionallist = threedimensionallist;
    this.panoramalist = panoramalist;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dm_Exhibit(Dm_Exhibit other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isSucess = other.isSucess;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetExhibit_id()) {
      this.exhibit_id = other.exhibit_id;
    }
    if (other.isSetExhibit_name()) {
      this.exhibit_name = other.exhibit_name;
    }
    if (other.isSetExhibit_thumbnail()) {
      this.exhibit_thumbnail = other.exhibit_thumbnail;
    }
    if (other.isSetExhibit_first_video()) {
      this.exhibit_first_video = new Dm_Exhibit_video(other.exhibit_first_video);
    }
    if (other.isSetExhibit_first_audio()) {
      this.exhibit_first_audio = new Dm_Exhibit_audio(other.exhibit_first_audio);
    }
    if (other.isSetExhibit_first_picture()) {
      this.exhibit_first_picture = new Dm_Exhibit_pic(other.exhibit_first_picture);
    }
    if (other.isSetExhibit_first_big_picture()) {
      this.exhibit_first_big_picture = new Dm_Exhibit_bigpic(other.exhibit_first_big_picture);
    }
    if (other.isSetExhibit_first_threedimensional()) {
      this.exhibit_first_threedimensional = new Dm_Exhibit_threedimensional(other.exhibit_first_threedimensional);
    }
    if (other.isSetExhibit_first_panorama()) {
      this.exhibit_first_panorama = new Dm_Exhibit_panorama(other.exhibit_first_panorama);
    }
    this.exhibit_x = other.exhibit_x;
    this.exhibit_y = other.exhibit_y;
    if (other.isSetExhibit_description()) {
      this.exhibit_description = other.exhibit_description;
    }
    if (other.isSetPiclist()) {
      List<Dm_Exhibit_pic> __this__piclist = new ArrayList<Dm_Exhibit_pic>();
      for (Dm_Exhibit_pic other_element : other.piclist) {
        __this__piclist.add(new Dm_Exhibit_pic(other_element));
      }
      this.piclist = __this__piclist;
    }
    if (other.isSetBigpiclist()) {
      List<Dm_Exhibit_bigpic> __this__bigpiclist = new ArrayList<Dm_Exhibit_bigpic>();
      for (Dm_Exhibit_bigpic other_element : other.bigpiclist) {
        __this__bigpiclist.add(new Dm_Exhibit_bigpic(other_element));
      }
      this.bigpiclist = __this__bigpiclist;
    }
    if (other.isSetVideolist()) {
      List<Dm_Exhibit_video> __this__videolist = new ArrayList<Dm_Exhibit_video>();
      for (Dm_Exhibit_video other_element : other.videolist) {
        __this__videolist.add(new Dm_Exhibit_video(other_element));
      }
      this.videolist = __this__videolist;
    }
    if (other.isSetAudiolist()) {
      List<Dm_Exhibit_audio> __this__audiolist = new ArrayList<Dm_Exhibit_audio>();
      for (Dm_Exhibit_audio other_element : other.audiolist) {
        __this__audiolist.add(new Dm_Exhibit_audio(other_element));
      }
      this.audiolist = __this__audiolist;
    }
    if (other.isSetThreedimensionallist()) {
      List<Dm_Exhibit_threedimensional> __this__threedimensionallist = new ArrayList<Dm_Exhibit_threedimensional>();
      for (Dm_Exhibit_threedimensional other_element : other.threedimensionallist) {
        __this__threedimensionallist.add(new Dm_Exhibit_threedimensional(other_element));
      }
      this.threedimensionallist = __this__threedimensionallist;
    }
    if (other.isSetPanoramalist()) {
      List<Dm_Exhibit_panorama> __this__panoramalist = new ArrayList<Dm_Exhibit_panorama>();
      for (Dm_Exhibit_panorama other_element : other.panoramalist) {
        __this__panoramalist.add(new Dm_Exhibit_panorama(other_element));
      }
      this.panoramalist = __this__panoramalist;
    }
  }

  public Dm_Exhibit deepCopy() {
    return new Dm_Exhibit(this);
  }

  @Override
  public void clear() {
    setIsSucessIsSet(false);
    this.isSucess = false;
    this.message = null;
    this.exhibit_id = null;
    this.exhibit_name = null;
    this.exhibit_thumbnail = null;
    this.exhibit_first_video = null;
    this.exhibit_first_audio = null;
    this.exhibit_first_picture = null;
    this.exhibit_first_big_picture = null;
    this.exhibit_first_threedimensional = null;
    this.exhibit_first_panorama = null;
    setExhibit_xIsSet(false);
    this.exhibit_x = 0.0;
    setExhibit_yIsSet(false);
    this.exhibit_y = 0.0;
    this.exhibit_description = null;
    this.piclist = null;
    this.bigpiclist = null;
    this.videolist = null;
    this.audiolist = null;
    this.threedimensionallist = null;
    this.panoramalist = null;
  }

  public boolean isIsSucess() {
    return this.isSucess;
  }

  public Dm_Exhibit setIsSucess(boolean isSucess) {
    this.isSucess = isSucess;
    setIsSucessIsSet(true);
    return this;
  }

  public void unsetIsSucess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSUCESS_ISSET_ID);
  }

  /** Returns true if field isSucess is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSucess() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSUCESS_ISSET_ID);
  }

  public void setIsSucessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSUCESS_ISSET_ID, value);
  }

  public String getMessage() {
    return this.message;
  }

  public Dm_Exhibit setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public String getExhibit_id() {
    return this.exhibit_id;
  }

  public Dm_Exhibit setExhibit_id(String exhibit_id) {
    this.exhibit_id = exhibit_id;
    return this;
  }

  public void unsetExhibit_id() {
    this.exhibit_id = null;
  }

  /** Returns true if field exhibit_id is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_id() {
    return this.exhibit_id != null;
  }

  public void setExhibit_idIsSet(boolean value) {
    if (!value) {
      this.exhibit_id = null;
    }
  }

  public String getExhibit_name() {
    return this.exhibit_name;
  }

  public Dm_Exhibit setExhibit_name(String exhibit_name) {
    this.exhibit_name = exhibit_name;
    return this;
  }

  public void unsetExhibit_name() {
    this.exhibit_name = null;
  }

  /** Returns true if field exhibit_name is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_name() {
    return this.exhibit_name != null;
  }

  public void setExhibit_nameIsSet(boolean value) {
    if (!value) {
      this.exhibit_name = null;
    }
  }

  public String getExhibit_thumbnail() {
    return this.exhibit_thumbnail;
  }

  public Dm_Exhibit setExhibit_thumbnail(String exhibit_thumbnail) {
    this.exhibit_thumbnail = exhibit_thumbnail;
    return this;
  }

  public void unsetExhibit_thumbnail() {
    this.exhibit_thumbnail = null;
  }

  /** Returns true if field exhibit_thumbnail is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_thumbnail() {
    return this.exhibit_thumbnail != null;
  }

  public void setExhibit_thumbnailIsSet(boolean value) {
    if (!value) {
      this.exhibit_thumbnail = null;
    }
  }

  public Dm_Exhibit_video getExhibit_first_video() {
    return this.exhibit_first_video;
  }

  public Dm_Exhibit setExhibit_first_video(Dm_Exhibit_video exhibit_first_video) {
    this.exhibit_first_video = exhibit_first_video;
    return this;
  }

  public void unsetExhibit_first_video() {
    this.exhibit_first_video = null;
  }

  /** Returns true if field exhibit_first_video is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_first_video() {
    return this.exhibit_first_video != null;
  }

  public void setExhibit_first_videoIsSet(boolean value) {
    if (!value) {
      this.exhibit_first_video = null;
    }
  }

  public Dm_Exhibit_audio getExhibit_first_audio() {
    return this.exhibit_first_audio;
  }

  public Dm_Exhibit setExhibit_first_audio(Dm_Exhibit_audio exhibit_first_audio) {
    this.exhibit_first_audio = exhibit_first_audio;
    return this;
  }

  public void unsetExhibit_first_audio() {
    this.exhibit_first_audio = null;
  }

  /** Returns true if field exhibit_first_audio is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_first_audio() {
    return this.exhibit_first_audio != null;
  }

  public void setExhibit_first_audioIsSet(boolean value) {
    if (!value) {
      this.exhibit_first_audio = null;
    }
  }

  public Dm_Exhibit_pic getExhibit_first_picture() {
    return this.exhibit_first_picture;
  }

  public Dm_Exhibit setExhibit_first_picture(Dm_Exhibit_pic exhibit_first_picture) {
    this.exhibit_first_picture = exhibit_first_picture;
    return this;
  }

  public void unsetExhibit_first_picture() {
    this.exhibit_first_picture = null;
  }

  /** Returns true if field exhibit_first_picture is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_first_picture() {
    return this.exhibit_first_picture != null;
  }

  public void setExhibit_first_pictureIsSet(boolean value) {
    if (!value) {
      this.exhibit_first_picture = null;
    }
  }

  public Dm_Exhibit_bigpic getExhibit_first_big_picture() {
    return this.exhibit_first_big_picture;
  }

  public Dm_Exhibit setExhibit_first_big_picture(Dm_Exhibit_bigpic exhibit_first_big_picture) {
    this.exhibit_first_big_picture = exhibit_first_big_picture;
    return this;
  }

  public void unsetExhibit_first_big_picture() {
    this.exhibit_first_big_picture = null;
  }

  /** Returns true if field exhibit_first_big_picture is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_first_big_picture() {
    return this.exhibit_first_big_picture != null;
  }

  public void setExhibit_first_big_pictureIsSet(boolean value) {
    if (!value) {
      this.exhibit_first_big_picture = null;
    }
  }

  public Dm_Exhibit_threedimensional getExhibit_first_threedimensional() {
    return this.exhibit_first_threedimensional;
  }

  public Dm_Exhibit setExhibit_first_threedimensional(Dm_Exhibit_threedimensional exhibit_first_threedimensional) {
    this.exhibit_first_threedimensional = exhibit_first_threedimensional;
    return this;
  }

  public void unsetExhibit_first_threedimensional() {
    this.exhibit_first_threedimensional = null;
  }

  /** Returns true if field exhibit_first_threedimensional is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_first_threedimensional() {
    return this.exhibit_first_threedimensional != null;
  }

  public void setExhibit_first_threedimensionalIsSet(boolean value) {
    if (!value) {
      this.exhibit_first_threedimensional = null;
    }
  }

  public Dm_Exhibit_panorama getExhibit_first_panorama() {
    return this.exhibit_first_panorama;
  }

  public Dm_Exhibit setExhibit_first_panorama(Dm_Exhibit_panorama exhibit_first_panorama) {
    this.exhibit_first_panorama = exhibit_first_panorama;
    return this;
  }

  public void unsetExhibit_first_panorama() {
    this.exhibit_first_panorama = null;
  }

  /** Returns true if field exhibit_first_panorama is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_first_panorama() {
    return this.exhibit_first_panorama != null;
  }

  public void setExhibit_first_panoramaIsSet(boolean value) {
    if (!value) {
      this.exhibit_first_panorama = null;
    }
  }

  public double getExhibit_x() {
    return this.exhibit_x;
  }

  public Dm_Exhibit setExhibit_x(double exhibit_x) {
    this.exhibit_x = exhibit_x;
    setExhibit_xIsSet(true);
    return this;
  }

  public void unsetExhibit_x() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXHIBIT_X_ISSET_ID);
  }

  /** Returns true if field exhibit_x is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_x() {
    return EncodingUtils.testBit(__isset_bitfield, __EXHIBIT_X_ISSET_ID);
  }

  public void setExhibit_xIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXHIBIT_X_ISSET_ID, value);
  }

  public double getExhibit_y() {
    return this.exhibit_y;
  }

  public Dm_Exhibit setExhibit_y(double exhibit_y) {
    this.exhibit_y = exhibit_y;
    setExhibit_yIsSet(true);
    return this;
  }

  public void unsetExhibit_y() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXHIBIT_Y_ISSET_ID);
  }

  /** Returns true if field exhibit_y is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_y() {
    return EncodingUtils.testBit(__isset_bitfield, __EXHIBIT_Y_ISSET_ID);
  }

  public void setExhibit_yIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXHIBIT_Y_ISSET_ID, value);
  }

  public String getExhibit_description() {
    return this.exhibit_description;
  }

  public Dm_Exhibit setExhibit_description(String exhibit_description) {
    this.exhibit_description = exhibit_description;
    return this;
  }

  public void unsetExhibit_description() {
    this.exhibit_description = null;
  }

  /** Returns true if field exhibit_description is set (has been assigned a value) and false otherwise */
  public boolean isSetExhibit_description() {
    return this.exhibit_description != null;
  }

  public void setExhibit_descriptionIsSet(boolean value) {
    if (!value) {
      this.exhibit_description = null;
    }
  }

  public int getPiclistSize() {
    return (this.piclist == null) ? 0 : this.piclist.size();
  }

  public java.util.Iterator<Dm_Exhibit_pic> getPiclistIterator() {
    return (this.piclist == null) ? null : this.piclist.iterator();
  }

  public void addToPiclist(Dm_Exhibit_pic elem) {
    if (this.piclist == null) {
      this.piclist = new ArrayList<Dm_Exhibit_pic>();
    }
    this.piclist.add(elem);
  }

  public List<Dm_Exhibit_pic> getPiclist() {
    return this.piclist;
  }

  public Dm_Exhibit setPiclist(List<Dm_Exhibit_pic> piclist) {
    this.piclist = piclist;
    return this;
  }

  public void unsetPiclist() {
    this.piclist = null;
  }

  /** Returns true if field piclist is set (has been assigned a value) and false otherwise */
  public boolean isSetPiclist() {
    return this.piclist != null;
  }

  public void setPiclistIsSet(boolean value) {
    if (!value) {
      this.piclist = null;
    }
  }

  public int getBigpiclistSize() {
    return (this.bigpiclist == null) ? 0 : this.bigpiclist.size();
  }

  public java.util.Iterator<Dm_Exhibit_bigpic> getBigpiclistIterator() {
    return (this.bigpiclist == null) ? null : this.bigpiclist.iterator();
  }

  public void addToBigpiclist(Dm_Exhibit_bigpic elem) {
    if (this.bigpiclist == null) {
      this.bigpiclist = new ArrayList<Dm_Exhibit_bigpic>();
    }
    this.bigpiclist.add(elem);
  }

  public List<Dm_Exhibit_bigpic> getBigpiclist() {
    return this.bigpiclist;
  }

  public Dm_Exhibit setBigpiclist(List<Dm_Exhibit_bigpic> bigpiclist) {
    this.bigpiclist = bigpiclist;
    return this;
  }

  public void unsetBigpiclist() {
    this.bigpiclist = null;
  }

  /** Returns true if field bigpiclist is set (has been assigned a value) and false otherwise */
  public boolean isSetBigpiclist() {
    return this.bigpiclist != null;
  }

  public void setBigpiclistIsSet(boolean value) {
    if (!value) {
      this.bigpiclist = null;
    }
  }

  public int getVideolistSize() {
    return (this.videolist == null) ? 0 : this.videolist.size();
  }

  public java.util.Iterator<Dm_Exhibit_video> getVideolistIterator() {
    return (this.videolist == null) ? null : this.videolist.iterator();
  }

  public void addToVideolist(Dm_Exhibit_video elem) {
    if (this.videolist == null) {
      this.videolist = new ArrayList<Dm_Exhibit_video>();
    }
    this.videolist.add(elem);
  }

  public List<Dm_Exhibit_video> getVideolist() {
    return this.videolist;
  }

  public Dm_Exhibit setVideolist(List<Dm_Exhibit_video> videolist) {
    this.videolist = videolist;
    return this;
  }

  public void unsetVideolist() {
    this.videolist = null;
  }

  /** Returns true if field videolist is set (has been assigned a value) and false otherwise */
  public boolean isSetVideolist() {
    return this.videolist != null;
  }

  public void setVideolistIsSet(boolean value) {
    if (!value) {
      this.videolist = null;
    }
  }

  public int getAudiolistSize() {
    return (this.audiolist == null) ? 0 : this.audiolist.size();
  }

  public java.util.Iterator<Dm_Exhibit_audio> getAudiolistIterator() {
    return (this.audiolist == null) ? null : this.audiolist.iterator();
  }

  public void addToAudiolist(Dm_Exhibit_audio elem) {
    if (this.audiolist == null) {
      this.audiolist = new ArrayList<Dm_Exhibit_audio>();
    }
    this.audiolist.add(elem);
  }

  public List<Dm_Exhibit_audio> getAudiolist() {
    return this.audiolist;
  }

  public Dm_Exhibit setAudiolist(List<Dm_Exhibit_audio> audiolist) {
    this.audiolist = audiolist;
    return this;
  }

  public void unsetAudiolist() {
    this.audiolist = null;
  }

  /** Returns true if field audiolist is set (has been assigned a value) and false otherwise */
  public boolean isSetAudiolist() {
    return this.audiolist != null;
  }

  public void setAudiolistIsSet(boolean value) {
    if (!value) {
      this.audiolist = null;
    }
  }

  public int getThreedimensionallistSize() {
    return (this.threedimensionallist == null) ? 0 : this.threedimensionallist.size();
  }

  public java.util.Iterator<Dm_Exhibit_threedimensional> getThreedimensionallistIterator() {
    return (this.threedimensionallist == null) ? null : this.threedimensionallist.iterator();
  }

  public void addToThreedimensionallist(Dm_Exhibit_threedimensional elem) {
    if (this.threedimensionallist == null) {
      this.threedimensionallist = new ArrayList<Dm_Exhibit_threedimensional>();
    }
    this.threedimensionallist.add(elem);
  }

  public List<Dm_Exhibit_threedimensional> getThreedimensionallist() {
    return this.threedimensionallist;
  }

  public Dm_Exhibit setThreedimensionallist(List<Dm_Exhibit_threedimensional> threedimensionallist) {
    this.threedimensionallist = threedimensionallist;
    return this;
  }

  public void unsetThreedimensionallist() {
    this.threedimensionallist = null;
  }

  /** Returns true if field threedimensionallist is set (has been assigned a value) and false otherwise */
  public boolean isSetThreedimensionallist() {
    return this.threedimensionallist != null;
  }

  public void setThreedimensionallistIsSet(boolean value) {
    if (!value) {
      this.threedimensionallist = null;
    }
  }

  public int getPanoramalistSize() {
    return (this.panoramalist == null) ? 0 : this.panoramalist.size();
  }

  public java.util.Iterator<Dm_Exhibit_panorama> getPanoramalistIterator() {
    return (this.panoramalist == null) ? null : this.panoramalist.iterator();
  }

  public void addToPanoramalist(Dm_Exhibit_panorama elem) {
    if (this.panoramalist == null) {
      this.panoramalist = new ArrayList<Dm_Exhibit_panorama>();
    }
    this.panoramalist.add(elem);
  }

  public List<Dm_Exhibit_panorama> getPanoramalist() {
    return this.panoramalist;
  }

  public Dm_Exhibit setPanoramalist(List<Dm_Exhibit_panorama> panoramalist) {
    this.panoramalist = panoramalist;
    return this;
  }

  public void unsetPanoramalist() {
    this.panoramalist = null;
  }

  /** Returns true if field panoramalist is set (has been assigned a value) and false otherwise */
  public boolean isSetPanoramalist() {
    return this.panoramalist != null;
  }

  public void setPanoramalistIsSet(boolean value) {
    if (!value) {
      this.panoramalist = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_SUCESS:
      if (value == null) {
        unsetIsSucess();
      } else {
        setIsSucess((Boolean)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case EXHIBIT_ID:
      if (value == null) {
        unsetExhibit_id();
      } else {
        setExhibit_id((String)value);
      }
      break;

    case EXHIBIT_NAME:
      if (value == null) {
        unsetExhibit_name();
      } else {
        setExhibit_name((String)value);
      }
      break;

    case EXHIBIT_THUMBNAIL:
      if (value == null) {
        unsetExhibit_thumbnail();
      } else {
        setExhibit_thumbnail((String)value);
      }
      break;

    case EXHIBIT_FIRST_VIDEO:
      if (value == null) {
        unsetExhibit_first_video();
      } else {
        setExhibit_first_video((Dm_Exhibit_video)value);
      }
      break;

    case EXHIBIT_FIRST_AUDIO:
      if (value == null) {
        unsetExhibit_first_audio();
      } else {
        setExhibit_first_audio((Dm_Exhibit_audio)value);
      }
      break;

    case EXHIBIT_FIRST_PICTURE:
      if (value == null) {
        unsetExhibit_first_picture();
      } else {
        setExhibit_first_picture((Dm_Exhibit_pic)value);
      }
      break;

    case EXHIBIT_FIRST_BIG_PICTURE:
      if (value == null) {
        unsetExhibit_first_big_picture();
      } else {
        setExhibit_first_big_picture((Dm_Exhibit_bigpic)value);
      }
      break;

    case EXHIBIT_FIRST_THREEDIMENSIONAL:
      if (value == null) {
        unsetExhibit_first_threedimensional();
      } else {
        setExhibit_first_threedimensional((Dm_Exhibit_threedimensional)value);
      }
      break;

    case EXHIBIT_FIRST_PANORAMA:
      if (value == null) {
        unsetExhibit_first_panorama();
      } else {
        setExhibit_first_panorama((Dm_Exhibit_panorama)value);
      }
      break;

    case EXHIBIT_X:
      if (value == null) {
        unsetExhibit_x();
      } else {
        setExhibit_x((Double)value);
      }
      break;

    case EXHIBIT_Y:
      if (value == null) {
        unsetExhibit_y();
      } else {
        setExhibit_y((Double)value);
      }
      break;

    case EXHIBIT_DESCRIPTION:
      if (value == null) {
        unsetExhibit_description();
      } else {
        setExhibit_description((String)value);
      }
      break;

    case PICLIST:
      if (value == null) {
        unsetPiclist();
      } else {
        setPiclist((List<Dm_Exhibit_pic>)value);
      }
      break;

    case BIGPICLIST:
      if (value == null) {
        unsetBigpiclist();
      } else {
        setBigpiclist((List<Dm_Exhibit_bigpic>)value);
      }
      break;

    case VIDEOLIST:
      if (value == null) {
        unsetVideolist();
      } else {
        setVideolist((List<Dm_Exhibit_video>)value);
      }
      break;

    case AUDIOLIST:
      if (value == null) {
        unsetAudiolist();
      } else {
        setAudiolist((List<Dm_Exhibit_audio>)value);
      }
      break;

    case THREEDIMENSIONALLIST:
      if (value == null) {
        unsetThreedimensionallist();
      } else {
        setThreedimensionallist((List<Dm_Exhibit_threedimensional>)value);
      }
      break;

    case PANORAMALIST:
      if (value == null) {
        unsetPanoramalist();
      } else {
        setPanoramalist((List<Dm_Exhibit_panorama>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_SUCESS:
      return Boolean.valueOf(isIsSucess());

    case MESSAGE:
      return getMessage();

    case EXHIBIT_ID:
      return getExhibit_id();

    case EXHIBIT_NAME:
      return getExhibit_name();

    case EXHIBIT_THUMBNAIL:
      return getExhibit_thumbnail();

    case EXHIBIT_FIRST_VIDEO:
      return getExhibit_first_video();

    case EXHIBIT_FIRST_AUDIO:
      return getExhibit_first_audio();

    case EXHIBIT_FIRST_PICTURE:
      return getExhibit_first_picture();

    case EXHIBIT_FIRST_BIG_PICTURE:
      return getExhibit_first_big_picture();

    case EXHIBIT_FIRST_THREEDIMENSIONAL:
      return getExhibit_first_threedimensional();

    case EXHIBIT_FIRST_PANORAMA:
      return getExhibit_first_panorama();

    case EXHIBIT_X:
      return Double.valueOf(getExhibit_x());

    case EXHIBIT_Y:
      return Double.valueOf(getExhibit_y());

    case EXHIBIT_DESCRIPTION:
      return getExhibit_description();

    case PICLIST:
      return getPiclist();

    case BIGPICLIST:
      return getBigpiclist();

    case VIDEOLIST:
      return getVideolist();

    case AUDIOLIST:
      return getAudiolist();

    case THREEDIMENSIONALLIST:
      return getThreedimensionallist();

    case PANORAMALIST:
      return getPanoramalist();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_SUCESS:
      return isSetIsSucess();
    case MESSAGE:
      return isSetMessage();
    case EXHIBIT_ID:
      return isSetExhibit_id();
    case EXHIBIT_NAME:
      return isSetExhibit_name();
    case EXHIBIT_THUMBNAIL:
      return isSetExhibit_thumbnail();
    case EXHIBIT_FIRST_VIDEO:
      return isSetExhibit_first_video();
    case EXHIBIT_FIRST_AUDIO:
      return isSetExhibit_first_audio();
    case EXHIBIT_FIRST_PICTURE:
      return isSetExhibit_first_picture();
    case EXHIBIT_FIRST_BIG_PICTURE:
      return isSetExhibit_first_big_picture();
    case EXHIBIT_FIRST_THREEDIMENSIONAL:
      return isSetExhibit_first_threedimensional();
    case EXHIBIT_FIRST_PANORAMA:
      return isSetExhibit_first_panorama();
    case EXHIBIT_X:
      return isSetExhibit_x();
    case EXHIBIT_Y:
      return isSetExhibit_y();
    case EXHIBIT_DESCRIPTION:
      return isSetExhibit_description();
    case PICLIST:
      return isSetPiclist();
    case BIGPICLIST:
      return isSetBigpiclist();
    case VIDEOLIST:
      return isSetVideolist();
    case AUDIOLIST:
      return isSetAudiolist();
    case THREEDIMENSIONALLIST:
      return isSetThreedimensionallist();
    case PANORAMALIST:
      return isSetPanoramalist();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dm_Exhibit)
      return this.equals((Dm_Exhibit)that);
    return false;
  }

  public boolean equals(Dm_Exhibit that) {
    if (that == null)
      return false;

    boolean this_present_isSucess = true;
    boolean that_present_isSucess = true;
    if (this_present_isSucess || that_present_isSucess) {
      if (!(this_present_isSucess && that_present_isSucess))
        return false;
      if (this.isSucess != that.isSucess)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_exhibit_id = true && this.isSetExhibit_id();
    boolean that_present_exhibit_id = true && that.isSetExhibit_id();
    if (this_present_exhibit_id || that_present_exhibit_id) {
      if (!(this_present_exhibit_id && that_present_exhibit_id))
        return false;
      if (!this.exhibit_id.equals(that.exhibit_id))
        return false;
    }

    boolean this_present_exhibit_name = true && this.isSetExhibit_name();
    boolean that_present_exhibit_name = true && that.isSetExhibit_name();
    if (this_present_exhibit_name || that_present_exhibit_name) {
      if (!(this_present_exhibit_name && that_present_exhibit_name))
        return false;
      if (!this.exhibit_name.equals(that.exhibit_name))
        return false;
    }

    boolean this_present_exhibit_thumbnail = true && this.isSetExhibit_thumbnail();
    boolean that_present_exhibit_thumbnail = true && that.isSetExhibit_thumbnail();
    if (this_present_exhibit_thumbnail || that_present_exhibit_thumbnail) {
      if (!(this_present_exhibit_thumbnail && that_present_exhibit_thumbnail))
        return false;
      if (!this.exhibit_thumbnail.equals(that.exhibit_thumbnail))
        return false;
    }

    boolean this_present_exhibit_first_video = true && this.isSetExhibit_first_video();
    boolean that_present_exhibit_first_video = true && that.isSetExhibit_first_video();
    if (this_present_exhibit_first_video || that_present_exhibit_first_video) {
      if (!(this_present_exhibit_first_video && that_present_exhibit_first_video))
        return false;
      if (!this.exhibit_first_video.equals(that.exhibit_first_video))
        return false;
    }

    boolean this_present_exhibit_first_audio = true && this.isSetExhibit_first_audio();
    boolean that_present_exhibit_first_audio = true && that.isSetExhibit_first_audio();
    if (this_present_exhibit_first_audio || that_present_exhibit_first_audio) {
      if (!(this_present_exhibit_first_audio && that_present_exhibit_first_audio))
        return false;
      if (!this.exhibit_first_audio.equals(that.exhibit_first_audio))
        return false;
    }

    boolean this_present_exhibit_first_picture = true && this.isSetExhibit_first_picture();
    boolean that_present_exhibit_first_picture = true && that.isSetExhibit_first_picture();
    if (this_present_exhibit_first_picture || that_present_exhibit_first_picture) {
      if (!(this_present_exhibit_first_picture && that_present_exhibit_first_picture))
        return false;
      if (!this.exhibit_first_picture.equals(that.exhibit_first_picture))
        return false;
    }

    boolean this_present_exhibit_first_big_picture = true && this.isSetExhibit_first_big_picture();
    boolean that_present_exhibit_first_big_picture = true && that.isSetExhibit_first_big_picture();
    if (this_present_exhibit_first_big_picture || that_present_exhibit_first_big_picture) {
      if (!(this_present_exhibit_first_big_picture && that_present_exhibit_first_big_picture))
        return false;
      if (!this.exhibit_first_big_picture.equals(that.exhibit_first_big_picture))
        return false;
    }

    boolean this_present_exhibit_first_threedimensional = true && this.isSetExhibit_first_threedimensional();
    boolean that_present_exhibit_first_threedimensional = true && that.isSetExhibit_first_threedimensional();
    if (this_present_exhibit_first_threedimensional || that_present_exhibit_first_threedimensional) {
      if (!(this_present_exhibit_first_threedimensional && that_present_exhibit_first_threedimensional))
        return false;
      if (!this.exhibit_first_threedimensional.equals(that.exhibit_first_threedimensional))
        return false;
    }

    boolean this_present_exhibit_first_panorama = true && this.isSetExhibit_first_panorama();
    boolean that_present_exhibit_first_panorama = true && that.isSetExhibit_first_panorama();
    if (this_present_exhibit_first_panorama || that_present_exhibit_first_panorama) {
      if (!(this_present_exhibit_first_panorama && that_present_exhibit_first_panorama))
        return false;
      if (!this.exhibit_first_panorama.equals(that.exhibit_first_panorama))
        return false;
    }

    boolean this_present_exhibit_x = true;
    boolean that_present_exhibit_x = true;
    if (this_present_exhibit_x || that_present_exhibit_x) {
      if (!(this_present_exhibit_x && that_present_exhibit_x))
        return false;
      if (this.exhibit_x != that.exhibit_x)
        return false;
    }

    boolean this_present_exhibit_y = true;
    boolean that_present_exhibit_y = true;
    if (this_present_exhibit_y || that_present_exhibit_y) {
      if (!(this_present_exhibit_y && that_present_exhibit_y))
        return false;
      if (this.exhibit_y != that.exhibit_y)
        return false;
    }

    boolean this_present_exhibit_description = true && this.isSetExhibit_description();
    boolean that_present_exhibit_description = true && that.isSetExhibit_description();
    if (this_present_exhibit_description || that_present_exhibit_description) {
      if (!(this_present_exhibit_description && that_present_exhibit_description))
        return false;
      if (!this.exhibit_description.equals(that.exhibit_description))
        return false;
    }

    boolean this_present_piclist = true && this.isSetPiclist();
    boolean that_present_piclist = true && that.isSetPiclist();
    if (this_present_piclist || that_present_piclist) {
      if (!(this_present_piclist && that_present_piclist))
        return false;
      if (!this.piclist.equals(that.piclist))
        return false;
    }

    boolean this_present_bigpiclist = true && this.isSetBigpiclist();
    boolean that_present_bigpiclist = true && that.isSetBigpiclist();
    if (this_present_bigpiclist || that_present_bigpiclist) {
      if (!(this_present_bigpiclist && that_present_bigpiclist))
        return false;
      if (!this.bigpiclist.equals(that.bigpiclist))
        return false;
    }

    boolean this_present_videolist = true && this.isSetVideolist();
    boolean that_present_videolist = true && that.isSetVideolist();
    if (this_present_videolist || that_present_videolist) {
      if (!(this_present_videolist && that_present_videolist))
        return false;
      if (!this.videolist.equals(that.videolist))
        return false;
    }

    boolean this_present_audiolist = true && this.isSetAudiolist();
    boolean that_present_audiolist = true && that.isSetAudiolist();
    if (this_present_audiolist || that_present_audiolist) {
      if (!(this_present_audiolist && that_present_audiolist))
        return false;
      if (!this.audiolist.equals(that.audiolist))
        return false;
    }

    boolean this_present_threedimensionallist = true && this.isSetThreedimensionallist();
    boolean that_present_threedimensionallist = true && that.isSetThreedimensionallist();
    if (this_present_threedimensionallist || that_present_threedimensionallist) {
      if (!(this_present_threedimensionallist && that_present_threedimensionallist))
        return false;
      if (!this.threedimensionallist.equals(that.threedimensionallist))
        return false;
    }

    boolean this_present_panoramalist = true && this.isSetPanoramalist();
    boolean that_present_panoramalist = true && that.isSetPanoramalist();
    if (this_present_panoramalist || that_present_panoramalist) {
      if (!(this_present_panoramalist && that_present_panoramalist))
        return false;
      if (!this.panoramalist.equals(that.panoramalist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Dm_Exhibit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Dm_Exhibit typedOther = (Dm_Exhibit)other;

    lastComparison = Boolean.valueOf(isSetIsSucess()).compareTo(typedOther.isSetIsSucess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSucess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSucess, typedOther.isSucess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_id()).compareTo(typedOther.isSetExhibit_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_id, typedOther.exhibit_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_name()).compareTo(typedOther.isSetExhibit_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_name, typedOther.exhibit_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_thumbnail()).compareTo(typedOther.isSetExhibit_thumbnail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_thumbnail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_thumbnail, typedOther.exhibit_thumbnail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_first_video()).compareTo(typedOther.isSetExhibit_first_video());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_first_video()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_first_video, typedOther.exhibit_first_video);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_first_audio()).compareTo(typedOther.isSetExhibit_first_audio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_first_audio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_first_audio, typedOther.exhibit_first_audio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_first_picture()).compareTo(typedOther.isSetExhibit_first_picture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_first_picture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_first_picture, typedOther.exhibit_first_picture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_first_big_picture()).compareTo(typedOther.isSetExhibit_first_big_picture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_first_big_picture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_first_big_picture, typedOther.exhibit_first_big_picture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_first_threedimensional()).compareTo(typedOther.isSetExhibit_first_threedimensional());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_first_threedimensional()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_first_threedimensional, typedOther.exhibit_first_threedimensional);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_first_panorama()).compareTo(typedOther.isSetExhibit_first_panorama());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_first_panorama()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_first_panorama, typedOther.exhibit_first_panorama);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_x()).compareTo(typedOther.isSetExhibit_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_x, typedOther.exhibit_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_y()).compareTo(typedOther.isSetExhibit_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_y, typedOther.exhibit_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhibit_description()).compareTo(typedOther.isSetExhibit_description());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhibit_description()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhibit_description, typedOther.exhibit_description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPiclist()).compareTo(typedOther.isSetPiclist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPiclist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.piclist, typedOther.piclist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBigpiclist()).compareTo(typedOther.isSetBigpiclist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigpiclist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigpiclist, typedOther.bigpiclist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideolist()).compareTo(typedOther.isSetVideolist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideolist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videolist, typedOther.videolist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudiolist()).compareTo(typedOther.isSetAudiolist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudiolist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audiolist, typedOther.audiolist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThreedimensionallist()).compareTo(typedOther.isSetThreedimensionallist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThreedimensionallist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threedimensionallist, typedOther.threedimensionallist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPanoramalist()).compareTo(typedOther.isSetPanoramalist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPanoramalist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.panoramalist, typedOther.panoramalist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dm_Exhibit(");
    boolean first = true;

    sb.append("isSucess:");
    sb.append(this.isSucess);
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_id:");
    if (this.exhibit_id == null) {
      sb.append("null");
    } else {
      sb.append(this.exhibit_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_name:");
    if (this.exhibit_name == null) {
      sb.append("null");
    } else {
      sb.append(this.exhibit_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_thumbnail:");
    if (this.exhibit_thumbnail == null) {
      sb.append("null");
    } else {
      sb.append(this.exhibit_thumbnail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_first_video:");
    if (this.exhibit_first_video == null) {
      sb.append("null");
    } else {
      sb.append(this.exhibit_first_video);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_first_audio:");
    if (this.exhibit_first_audio == null) {
      sb.append("null");
    } else {
      sb.append(this.exhibit_first_audio);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_first_picture:");
    if (this.exhibit_first_picture == null) {
      sb.append("null");
    } else {
      sb.append(this.exhibit_first_picture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_first_big_picture:");
    if (this.exhibit_first_big_picture == null) {
      sb.append("null");
    } else {
      sb.append(this.exhibit_first_big_picture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_first_threedimensional:");
    if (this.exhibit_first_threedimensional == null) {
      sb.append("null");
    } else {
      sb.append(this.exhibit_first_threedimensional);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_first_panorama:");
    if (this.exhibit_first_panorama == null) {
      sb.append("null");
    } else {
      sb.append(this.exhibit_first_panorama);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_x:");
    sb.append(this.exhibit_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_y:");
    sb.append(this.exhibit_y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhibit_description:");
    if (this.exhibit_description == null) {
      sb.append("null");
    } else {
      sb.append(this.exhibit_description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("piclist:");
    if (this.piclist == null) {
      sb.append("null");
    } else {
      sb.append(this.piclist);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bigpiclist:");
    if (this.bigpiclist == null) {
      sb.append("null");
    } else {
      sb.append(this.bigpiclist);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("videolist:");
    if (this.videolist == null) {
      sb.append("null");
    } else {
      sb.append(this.videolist);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("audiolist:");
    if (this.audiolist == null) {
      sb.append("null");
    } else {
      sb.append(this.audiolist);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("threedimensionallist:");
    if (this.threedimensionallist == null) {
      sb.append("null");
    } else {
      sb.append(this.threedimensionallist);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("panoramalist:");
    if (this.panoramalist == null) {
      sb.append("null");
    } else {
      sb.append(this.panoramalist);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (exhibit_first_video != null) {
      exhibit_first_video.validate();
    }
    if (exhibit_first_audio != null) {
      exhibit_first_audio.validate();
    }
    if (exhibit_first_picture != null) {
      exhibit_first_picture.validate();
    }
    if (exhibit_first_big_picture != null) {
      exhibit_first_big_picture.validate();
    }
    if (exhibit_first_threedimensional != null) {
      exhibit_first_threedimensional.validate();
    }
    if (exhibit_first_panorama != null) {
      exhibit_first_panorama.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Dm_ExhibitStandardSchemeFactory implements SchemeFactory {
    public Dm_ExhibitStandardScheme getScheme() {
      return new Dm_ExhibitStandardScheme();
    }
  }

  private static class Dm_ExhibitStandardScheme extends StandardScheme<Dm_Exhibit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dm_Exhibit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_SUCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSucess = iprot.readBool();
              struct.setIsSucessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXHIBIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exhibit_id = iprot.readString();
              struct.setExhibit_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXHIBIT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exhibit_name = iprot.readString();
              struct.setExhibit_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXHIBIT_THUMBNAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exhibit_thumbnail = iprot.readString();
              struct.setExhibit_thumbnailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXHIBIT_FIRST_VIDEO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exhibit_first_video = new Dm_Exhibit_video();
              struct.exhibit_first_video.read(iprot);
              struct.setExhibit_first_videoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXHIBIT_FIRST_AUDIO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exhibit_first_audio = new Dm_Exhibit_audio();
              struct.exhibit_first_audio.read(iprot);
              struct.setExhibit_first_audioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXHIBIT_FIRST_PICTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exhibit_first_picture = new Dm_Exhibit_pic();
              struct.exhibit_first_picture.read(iprot);
              struct.setExhibit_first_pictureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXHIBIT_FIRST_BIG_PICTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exhibit_first_big_picture = new Dm_Exhibit_bigpic();
              struct.exhibit_first_big_picture.read(iprot);
              struct.setExhibit_first_big_pictureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXHIBIT_FIRST_THREEDIMENSIONAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exhibit_first_threedimensional = new Dm_Exhibit_threedimensional();
              struct.exhibit_first_threedimensional.read(iprot);
              struct.setExhibit_first_threedimensionalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXHIBIT_FIRST_PANORAMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exhibit_first_panorama = new Dm_Exhibit_panorama();
              struct.exhibit_first_panorama.read(iprot);
              struct.setExhibit_first_panoramaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXHIBIT_X
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exhibit_x = iprot.readDouble();
              struct.setExhibit_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EXHIBIT_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exhibit_y = iprot.readDouble();
              struct.setExhibit_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXHIBIT_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exhibit_description = iprot.readString();
              struct.setExhibit_descriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PICLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                struct.piclist = new ArrayList<Dm_Exhibit_pic>(_list128.size);
                for (int _i129 = 0; _i129 < _list128.size; ++_i129)
                {
                  Dm_Exhibit_pic _elem130; // required
                  _elem130 = new Dm_Exhibit_pic();
                  _elem130.read(iprot);
                  struct.piclist.add(_elem130);
                }
                iprot.readListEnd();
              }
              struct.setPiclistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BIGPICLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                struct.bigpiclist = new ArrayList<Dm_Exhibit_bigpic>(_list131.size);
                for (int _i132 = 0; _i132 < _list131.size; ++_i132)
                {
                  Dm_Exhibit_bigpic _elem133; // required
                  _elem133 = new Dm_Exhibit_bigpic();
                  _elem133.read(iprot);
                  struct.bigpiclist.add(_elem133);
                }
                iprot.readListEnd();
              }
              struct.setBigpiclistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VIDEOLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list134 = iprot.readListBegin();
                struct.videolist = new ArrayList<Dm_Exhibit_video>(_list134.size);
                for (int _i135 = 0; _i135 < _list134.size; ++_i135)
                {
                  Dm_Exhibit_video _elem136; // required
                  _elem136 = new Dm_Exhibit_video();
                  _elem136.read(iprot);
                  struct.videolist.add(_elem136);
                }
                iprot.readListEnd();
              }
              struct.setVideolistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // AUDIOLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list137 = iprot.readListBegin();
                struct.audiolist = new ArrayList<Dm_Exhibit_audio>(_list137.size);
                for (int _i138 = 0; _i138 < _list137.size; ++_i138)
                {
                  Dm_Exhibit_audio _elem139; // required
                  _elem139 = new Dm_Exhibit_audio();
                  _elem139.read(iprot);
                  struct.audiolist.add(_elem139);
                }
                iprot.readListEnd();
              }
              struct.setAudiolistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // THREEDIMENSIONALLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list140 = iprot.readListBegin();
                struct.threedimensionallist = new ArrayList<Dm_Exhibit_threedimensional>(_list140.size);
                for (int _i141 = 0; _i141 < _list140.size; ++_i141)
                {
                  Dm_Exhibit_threedimensional _elem142; // required
                  _elem142 = new Dm_Exhibit_threedimensional();
                  _elem142.read(iprot);
                  struct.threedimensionallist.add(_elem142);
                }
                iprot.readListEnd();
              }
              struct.setThreedimensionallistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PANORAMALIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list143 = iprot.readListBegin();
                struct.panoramalist = new ArrayList<Dm_Exhibit_panorama>(_list143.size);
                for (int _i144 = 0; _i144 < _list143.size; ++_i144)
                {
                  Dm_Exhibit_panorama _elem145; // required
                  _elem145 = new Dm_Exhibit_panorama();
                  _elem145.read(iprot);
                  struct.panoramalist.add(_elem145);
                }
                iprot.readListEnd();
              }
              struct.setPanoramalistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dm_Exhibit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_SUCESS_FIELD_DESC);
      oprot.writeBool(struct.isSucess);
      oprot.writeFieldEnd();
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.exhibit_id != null) {
        oprot.writeFieldBegin(EXHIBIT_ID_FIELD_DESC);
        oprot.writeString(struct.exhibit_id);
        oprot.writeFieldEnd();
      }
      if (struct.exhibit_name != null) {
        oprot.writeFieldBegin(EXHIBIT_NAME_FIELD_DESC);
        oprot.writeString(struct.exhibit_name);
        oprot.writeFieldEnd();
      }
      if (struct.exhibit_thumbnail != null) {
        oprot.writeFieldBegin(EXHIBIT_THUMBNAIL_FIELD_DESC);
        oprot.writeString(struct.exhibit_thumbnail);
        oprot.writeFieldEnd();
      }
      if (struct.exhibit_first_video != null) {
        oprot.writeFieldBegin(EXHIBIT_FIRST_VIDEO_FIELD_DESC);
        struct.exhibit_first_video.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.exhibit_first_audio != null) {
        oprot.writeFieldBegin(EXHIBIT_FIRST_AUDIO_FIELD_DESC);
        struct.exhibit_first_audio.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.exhibit_first_picture != null) {
        oprot.writeFieldBegin(EXHIBIT_FIRST_PICTURE_FIELD_DESC);
        struct.exhibit_first_picture.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.exhibit_first_big_picture != null) {
        oprot.writeFieldBegin(EXHIBIT_FIRST_BIG_PICTURE_FIELD_DESC);
        struct.exhibit_first_big_picture.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.exhibit_first_threedimensional != null) {
        oprot.writeFieldBegin(EXHIBIT_FIRST_THREEDIMENSIONAL_FIELD_DESC);
        struct.exhibit_first_threedimensional.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.exhibit_first_panorama != null) {
        oprot.writeFieldBegin(EXHIBIT_FIRST_PANORAMA_FIELD_DESC);
        struct.exhibit_first_panorama.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXHIBIT_X_FIELD_DESC);
      oprot.writeDouble(struct.exhibit_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXHIBIT_Y_FIELD_DESC);
      oprot.writeDouble(struct.exhibit_y);
      oprot.writeFieldEnd();
      if (struct.exhibit_description != null) {
        oprot.writeFieldBegin(EXHIBIT_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.exhibit_description);
        oprot.writeFieldEnd();
      }
      if (struct.piclist != null) {
        oprot.writeFieldBegin(PICLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.piclist.size()));
          for (Dm_Exhibit_pic _iter146 : struct.piclist)
          {
            _iter146.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bigpiclist != null) {
        oprot.writeFieldBegin(BIGPICLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.bigpiclist.size()));
          for (Dm_Exhibit_bigpic _iter147 : struct.bigpiclist)
          {
            _iter147.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.videolist != null) {
        oprot.writeFieldBegin(VIDEOLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.videolist.size()));
          for (Dm_Exhibit_video _iter148 : struct.videolist)
          {
            _iter148.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.audiolist != null) {
        oprot.writeFieldBegin(AUDIOLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.audiolist.size()));
          for (Dm_Exhibit_audio _iter149 : struct.audiolist)
          {
            _iter149.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.threedimensionallist != null) {
        oprot.writeFieldBegin(THREEDIMENSIONALLIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.threedimensionallist.size()));
          for (Dm_Exhibit_threedimensional _iter150 : struct.threedimensionallist)
          {
            _iter150.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.panoramalist != null) {
        oprot.writeFieldBegin(PANORAMALIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.panoramalist.size()));
          for (Dm_Exhibit_panorama _iter151 : struct.panoramalist)
          {
            _iter151.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Dm_ExhibitTupleSchemeFactory implements SchemeFactory {
    public Dm_ExhibitTupleScheme getScheme() {
      return new Dm_ExhibitTupleScheme();
    }
  }

  private static class Dm_ExhibitTupleScheme extends TupleScheme<Dm_Exhibit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dm_Exhibit struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsSucess()) {
        optionals.set(0);
      }
      if (struct.isSetMessage()) {
        optionals.set(1);
      }
      if (struct.isSetExhibit_id()) {
        optionals.set(2);
      }
      if (struct.isSetExhibit_name()) {
        optionals.set(3);
      }
      if (struct.isSetExhibit_thumbnail()) {
        optionals.set(4);
      }
      if (struct.isSetExhibit_first_video()) {
        optionals.set(5);
      }
      if (struct.isSetExhibit_first_audio()) {
        optionals.set(6);
      }
      if (struct.isSetExhibit_first_picture()) {
        optionals.set(7);
      }
      if (struct.isSetExhibit_first_big_picture()) {
        optionals.set(8);
      }
      if (struct.isSetExhibit_first_threedimensional()) {
        optionals.set(9);
      }
      if (struct.isSetExhibit_first_panorama()) {
        optionals.set(10);
      }
      if (struct.isSetExhibit_x()) {
        optionals.set(11);
      }
      if (struct.isSetExhibit_y()) {
        optionals.set(12);
      }
      if (struct.isSetExhibit_description()) {
        optionals.set(13);
      }
      if (struct.isSetPiclist()) {
        optionals.set(14);
      }
      if (struct.isSetBigpiclist()) {
        optionals.set(15);
      }
      if (struct.isSetVideolist()) {
        optionals.set(16);
      }
      if (struct.isSetAudiolist()) {
        optionals.set(17);
      }
      if (struct.isSetThreedimensionallist()) {
        optionals.set(18);
      }
      if (struct.isSetPanoramalist()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetIsSucess()) {
        oprot.writeBool(struct.isSucess);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetExhibit_id()) {
        oprot.writeString(struct.exhibit_id);
      }
      if (struct.isSetExhibit_name()) {
        oprot.writeString(struct.exhibit_name);
      }
      if (struct.isSetExhibit_thumbnail()) {
        oprot.writeString(struct.exhibit_thumbnail);
      }
      if (struct.isSetExhibit_first_video()) {
        struct.exhibit_first_video.write(oprot);
      }
      if (struct.isSetExhibit_first_audio()) {
        struct.exhibit_first_audio.write(oprot);
      }
      if (struct.isSetExhibit_first_picture()) {
        struct.exhibit_first_picture.write(oprot);
      }
      if (struct.isSetExhibit_first_big_picture()) {
        struct.exhibit_first_big_picture.write(oprot);
      }
      if (struct.isSetExhibit_first_threedimensional()) {
        struct.exhibit_first_threedimensional.write(oprot);
      }
      if (struct.isSetExhibit_first_panorama()) {
        struct.exhibit_first_panorama.write(oprot);
      }
      if (struct.isSetExhibit_x()) {
        oprot.writeDouble(struct.exhibit_x);
      }
      if (struct.isSetExhibit_y()) {
        oprot.writeDouble(struct.exhibit_y);
      }
      if (struct.isSetExhibit_description()) {
        oprot.writeString(struct.exhibit_description);
      }
      if (struct.isSetPiclist()) {
        {
          oprot.writeI32(struct.piclist.size());
          for (Dm_Exhibit_pic _iter152 : struct.piclist)
          {
            _iter152.write(oprot);
          }
        }
      }
      if (struct.isSetBigpiclist()) {
        {
          oprot.writeI32(struct.bigpiclist.size());
          for (Dm_Exhibit_bigpic _iter153 : struct.bigpiclist)
          {
            _iter153.write(oprot);
          }
        }
      }
      if (struct.isSetVideolist()) {
        {
          oprot.writeI32(struct.videolist.size());
          for (Dm_Exhibit_video _iter154 : struct.videolist)
          {
            _iter154.write(oprot);
          }
        }
      }
      if (struct.isSetAudiolist()) {
        {
          oprot.writeI32(struct.audiolist.size());
          for (Dm_Exhibit_audio _iter155 : struct.audiolist)
          {
            _iter155.write(oprot);
          }
        }
      }
      if (struct.isSetThreedimensionallist()) {
        {
          oprot.writeI32(struct.threedimensionallist.size());
          for (Dm_Exhibit_threedimensional _iter156 : struct.threedimensionallist)
          {
            _iter156.write(oprot);
          }
        }
      }
      if (struct.isSetPanoramalist()) {
        {
          oprot.writeI32(struct.panoramalist.size());
          for (Dm_Exhibit_panorama _iter157 : struct.panoramalist)
          {
            _iter157.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dm_Exhibit struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.isSucess = iprot.readBool();
        struct.setIsSucessIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exhibit_id = iprot.readString();
        struct.setExhibit_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exhibit_name = iprot.readString();
        struct.setExhibit_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.exhibit_thumbnail = iprot.readString();
        struct.setExhibit_thumbnailIsSet(true);
      }
      if (incoming.get(5)) {
        struct.exhibit_first_video = new Dm_Exhibit_video();
        struct.exhibit_first_video.read(iprot);
        struct.setExhibit_first_videoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.exhibit_first_audio = new Dm_Exhibit_audio();
        struct.exhibit_first_audio.read(iprot);
        struct.setExhibit_first_audioIsSet(true);
      }
      if (incoming.get(7)) {
        struct.exhibit_first_picture = new Dm_Exhibit_pic();
        struct.exhibit_first_picture.read(iprot);
        struct.setExhibit_first_pictureIsSet(true);
      }
      if (incoming.get(8)) {
        struct.exhibit_first_big_picture = new Dm_Exhibit_bigpic();
        struct.exhibit_first_big_picture.read(iprot);
        struct.setExhibit_first_big_pictureIsSet(true);
      }
      if (incoming.get(9)) {
        struct.exhibit_first_threedimensional = new Dm_Exhibit_threedimensional();
        struct.exhibit_first_threedimensional.read(iprot);
        struct.setExhibit_first_threedimensionalIsSet(true);
      }
      if (incoming.get(10)) {
        struct.exhibit_first_panorama = new Dm_Exhibit_panorama();
        struct.exhibit_first_panorama.read(iprot);
        struct.setExhibit_first_panoramaIsSet(true);
      }
      if (incoming.get(11)) {
        struct.exhibit_x = iprot.readDouble();
        struct.setExhibit_xIsSet(true);
      }
      if (incoming.get(12)) {
        struct.exhibit_y = iprot.readDouble();
        struct.setExhibit_yIsSet(true);
      }
      if (incoming.get(13)) {
        struct.exhibit_description = iprot.readString();
        struct.setExhibit_descriptionIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list158 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.piclist = new ArrayList<Dm_Exhibit_pic>(_list158.size);
          for (int _i159 = 0; _i159 < _list158.size; ++_i159)
          {
            Dm_Exhibit_pic _elem160; // required
            _elem160 = new Dm_Exhibit_pic();
            _elem160.read(iprot);
            struct.piclist.add(_elem160);
          }
        }
        struct.setPiclistIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list161 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.bigpiclist = new ArrayList<Dm_Exhibit_bigpic>(_list161.size);
          for (int _i162 = 0; _i162 < _list161.size; ++_i162)
          {
            Dm_Exhibit_bigpic _elem163; // required
            _elem163 = new Dm_Exhibit_bigpic();
            _elem163.read(iprot);
            struct.bigpiclist.add(_elem163);
          }
        }
        struct.setBigpiclistIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list164 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.videolist = new ArrayList<Dm_Exhibit_video>(_list164.size);
          for (int _i165 = 0; _i165 < _list164.size; ++_i165)
          {
            Dm_Exhibit_video _elem166; // required
            _elem166 = new Dm_Exhibit_video();
            _elem166.read(iprot);
            struct.videolist.add(_elem166);
          }
        }
        struct.setVideolistIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list167 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.audiolist = new ArrayList<Dm_Exhibit_audio>(_list167.size);
          for (int _i168 = 0; _i168 < _list167.size; ++_i168)
          {
            Dm_Exhibit_audio _elem169; // required
            _elem169 = new Dm_Exhibit_audio();
            _elem169.read(iprot);
            struct.audiolist.add(_elem169);
          }
        }
        struct.setAudiolistIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list170 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.threedimensionallist = new ArrayList<Dm_Exhibit_threedimensional>(_list170.size);
          for (int _i171 = 0; _i171 < _list170.size; ++_i171)
          {
            Dm_Exhibit_threedimensional _elem172; // required
            _elem172 = new Dm_Exhibit_threedimensional();
            _elem172.read(iprot);
            struct.threedimensionallist.add(_elem172);
          }
        }
        struct.setThreedimensionallistIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.panoramalist = new ArrayList<Dm_Exhibit_panorama>(_list173.size);
          for (int _i174 = 0; _i174 < _list173.size; ++_i174)
          {
            Dm_Exhibit_panorama _elem175; // required
            _elem175 = new Dm_Exhibit_panorama();
            _elem175.read(iprot);
            struct.panoramalist.add(_elem175);
          }
        }
        struct.setPanoramalistIsSet(true);
      }
    }
  }

}

