/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Dm_PictureAttach implements org.apache.thrift.TBase<Dm_PictureAttach, Dm_PictureAttach._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dm_PictureAttach");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PICTURE_URL_A_FIELD_DESC = new org.apache.thrift.protocol.TField("picture_url_a", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PICTURE_URL_B_FIELD_DESC = new org.apache.thrift.protocol.TField("picture_url_b", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PICTURE_URL_C_FIELD_DESC = new org.apache.thrift.protocol.TField("picture_url_c", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PICTURE_URL_D_FIELD_DESC = new org.apache.thrift.protocol.TField("picture_url_d", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PICTURE_URL_E_FIELD_DESC = new org.apache.thrift.protocol.TField("picture_url_e", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PICTURE_URL_F_FIELD_DESC = new org.apache.thrift.protocol.TField("picture_url_f", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PICTURE_URL_G_FIELD_DESC = new org.apache.thrift.protocol.TField("picture_url_g", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PICTURE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("picture_url", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Dm_PictureAttachStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Dm_PictureAttachTupleSchemeFactory());
  }

  public String name; // required
  public String picture_url_a; // required
  public String picture_url_b; // required
  public String picture_url_c; // required
  public String picture_url_d; // required
  public String picture_url_e; // required
  public String picture_url_f; // required
  public String picture_url_g; // required
  public String picture_url; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    PICTURE_URL_A((short)2, "picture_url_a"),
    PICTURE_URL_B((short)3, "picture_url_b"),
    PICTURE_URL_C((short)4, "picture_url_c"),
    PICTURE_URL_D((short)5, "picture_url_d"),
    PICTURE_URL_E((short)6, "picture_url_e"),
    PICTURE_URL_F((short)7, "picture_url_f"),
    PICTURE_URL_G((short)8, "picture_url_g"),
    PICTURE_URL((short)9, "picture_url");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // PICTURE_URL_A
          return PICTURE_URL_A;
        case 3: // PICTURE_URL_B
          return PICTURE_URL_B;
        case 4: // PICTURE_URL_C
          return PICTURE_URL_C;
        case 5: // PICTURE_URL_D
          return PICTURE_URL_D;
        case 6: // PICTURE_URL_E
          return PICTURE_URL_E;
        case 7: // PICTURE_URL_F
          return PICTURE_URL_F;
        case 8: // PICTURE_URL_G
          return PICTURE_URL_G;
        case 9: // PICTURE_URL
          return PICTURE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE_URL_A, new org.apache.thrift.meta_data.FieldMetaData("picture_url_a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE_URL_B, new org.apache.thrift.meta_data.FieldMetaData("picture_url_b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE_URL_C, new org.apache.thrift.meta_data.FieldMetaData("picture_url_c", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE_URL_D, new org.apache.thrift.meta_data.FieldMetaData("picture_url_d", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE_URL_E, new org.apache.thrift.meta_data.FieldMetaData("picture_url_e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE_URL_F, new org.apache.thrift.meta_data.FieldMetaData("picture_url_f", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE_URL_G, new org.apache.thrift.meta_data.FieldMetaData("picture_url_g", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PICTURE_URL, new org.apache.thrift.meta_data.FieldMetaData("picture_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dm_PictureAttach.class, metaDataMap);
  }

  public Dm_PictureAttach() {
  }

  public Dm_PictureAttach(
    String name,
    String picture_url_a,
    String picture_url_b,
    String picture_url_c,
    String picture_url_d,
    String picture_url_e,
    String picture_url_f,
    String picture_url_g,
    String picture_url)
  {
    this();
    this.name = name;
    this.picture_url_a = picture_url_a;
    this.picture_url_b = picture_url_b;
    this.picture_url_c = picture_url_c;
    this.picture_url_d = picture_url_d;
    this.picture_url_e = picture_url_e;
    this.picture_url_f = picture_url_f;
    this.picture_url_g = picture_url_g;
    this.picture_url = picture_url;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dm_PictureAttach(Dm_PictureAttach other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPicture_url_a()) {
      this.picture_url_a = other.picture_url_a;
    }
    if (other.isSetPicture_url_b()) {
      this.picture_url_b = other.picture_url_b;
    }
    if (other.isSetPicture_url_c()) {
      this.picture_url_c = other.picture_url_c;
    }
    if (other.isSetPicture_url_d()) {
      this.picture_url_d = other.picture_url_d;
    }
    if (other.isSetPicture_url_e()) {
      this.picture_url_e = other.picture_url_e;
    }
    if (other.isSetPicture_url_f()) {
      this.picture_url_f = other.picture_url_f;
    }
    if (other.isSetPicture_url_g()) {
      this.picture_url_g = other.picture_url_g;
    }
    if (other.isSetPicture_url()) {
      this.picture_url = other.picture_url;
    }
  }

  public Dm_PictureAttach deepCopy() {
    return new Dm_PictureAttach(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.picture_url_a = null;
    this.picture_url_b = null;
    this.picture_url_c = null;
    this.picture_url_d = null;
    this.picture_url_e = null;
    this.picture_url_f = null;
    this.picture_url_g = null;
    this.picture_url = null;
  }

  public String getName() {
    return this.name;
  }

  public Dm_PictureAttach setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPicture_url_a() {
    return this.picture_url_a;
  }

  public Dm_PictureAttach setPicture_url_a(String picture_url_a) {
    this.picture_url_a = picture_url_a;
    return this;
  }

  public void unsetPicture_url_a() {
    this.picture_url_a = null;
  }

  /** Returns true if field picture_url_a is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture_url_a() {
    return this.picture_url_a != null;
  }

  public void setPicture_url_aIsSet(boolean value) {
    if (!value) {
      this.picture_url_a = null;
    }
  }

  public String getPicture_url_b() {
    return this.picture_url_b;
  }

  public Dm_PictureAttach setPicture_url_b(String picture_url_b) {
    this.picture_url_b = picture_url_b;
    return this;
  }

  public void unsetPicture_url_b() {
    this.picture_url_b = null;
  }

  /** Returns true if field picture_url_b is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture_url_b() {
    return this.picture_url_b != null;
  }

  public void setPicture_url_bIsSet(boolean value) {
    if (!value) {
      this.picture_url_b = null;
    }
  }

  public String getPicture_url_c() {
    return this.picture_url_c;
  }

  public Dm_PictureAttach setPicture_url_c(String picture_url_c) {
    this.picture_url_c = picture_url_c;
    return this;
  }

  public void unsetPicture_url_c() {
    this.picture_url_c = null;
  }

  /** Returns true if field picture_url_c is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture_url_c() {
    return this.picture_url_c != null;
  }

  public void setPicture_url_cIsSet(boolean value) {
    if (!value) {
      this.picture_url_c = null;
    }
  }

  public String getPicture_url_d() {
    return this.picture_url_d;
  }

  public Dm_PictureAttach setPicture_url_d(String picture_url_d) {
    this.picture_url_d = picture_url_d;
    return this;
  }

  public void unsetPicture_url_d() {
    this.picture_url_d = null;
  }

  /** Returns true if field picture_url_d is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture_url_d() {
    return this.picture_url_d != null;
  }

  public void setPicture_url_dIsSet(boolean value) {
    if (!value) {
      this.picture_url_d = null;
    }
  }

  public String getPicture_url_e() {
    return this.picture_url_e;
  }

  public Dm_PictureAttach setPicture_url_e(String picture_url_e) {
    this.picture_url_e = picture_url_e;
    return this;
  }

  public void unsetPicture_url_e() {
    this.picture_url_e = null;
  }

  /** Returns true if field picture_url_e is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture_url_e() {
    return this.picture_url_e != null;
  }

  public void setPicture_url_eIsSet(boolean value) {
    if (!value) {
      this.picture_url_e = null;
    }
  }

  public String getPicture_url_f() {
    return this.picture_url_f;
  }

  public Dm_PictureAttach setPicture_url_f(String picture_url_f) {
    this.picture_url_f = picture_url_f;
    return this;
  }

  public void unsetPicture_url_f() {
    this.picture_url_f = null;
  }

  /** Returns true if field picture_url_f is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture_url_f() {
    return this.picture_url_f != null;
  }

  public void setPicture_url_fIsSet(boolean value) {
    if (!value) {
      this.picture_url_f = null;
    }
  }

  public String getPicture_url_g() {
    return this.picture_url_g;
  }

  public Dm_PictureAttach setPicture_url_g(String picture_url_g) {
    this.picture_url_g = picture_url_g;
    return this;
  }

  public void unsetPicture_url_g() {
    this.picture_url_g = null;
  }

  /** Returns true if field picture_url_g is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture_url_g() {
    return this.picture_url_g != null;
  }

  public void setPicture_url_gIsSet(boolean value) {
    if (!value) {
      this.picture_url_g = null;
    }
  }

  public String getPicture_url() {
    return this.picture_url;
  }

  public Dm_PictureAttach setPicture_url(String picture_url) {
    this.picture_url = picture_url;
    return this;
  }

  public void unsetPicture_url() {
    this.picture_url = null;
  }

  /** Returns true if field picture_url is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture_url() {
    return this.picture_url != null;
  }

  public void setPicture_urlIsSet(boolean value) {
    if (!value) {
      this.picture_url = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case PICTURE_URL_A:
      if (value == null) {
        unsetPicture_url_a();
      } else {
        setPicture_url_a((String)value);
      }
      break;

    case PICTURE_URL_B:
      if (value == null) {
        unsetPicture_url_b();
      } else {
        setPicture_url_b((String)value);
      }
      break;

    case PICTURE_URL_C:
      if (value == null) {
        unsetPicture_url_c();
      } else {
        setPicture_url_c((String)value);
      }
      break;

    case PICTURE_URL_D:
      if (value == null) {
        unsetPicture_url_d();
      } else {
        setPicture_url_d((String)value);
      }
      break;

    case PICTURE_URL_E:
      if (value == null) {
        unsetPicture_url_e();
      } else {
        setPicture_url_e((String)value);
      }
      break;

    case PICTURE_URL_F:
      if (value == null) {
        unsetPicture_url_f();
      } else {
        setPicture_url_f((String)value);
      }
      break;

    case PICTURE_URL_G:
      if (value == null) {
        unsetPicture_url_g();
      } else {
        setPicture_url_g((String)value);
      }
      break;

    case PICTURE_URL:
      if (value == null) {
        unsetPicture_url();
      } else {
        setPicture_url((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case PICTURE_URL_A:
      return getPicture_url_a();

    case PICTURE_URL_B:
      return getPicture_url_b();

    case PICTURE_URL_C:
      return getPicture_url_c();

    case PICTURE_URL_D:
      return getPicture_url_d();

    case PICTURE_URL_E:
      return getPicture_url_e();

    case PICTURE_URL_F:
      return getPicture_url_f();

    case PICTURE_URL_G:
      return getPicture_url_g();

    case PICTURE_URL:
      return getPicture_url();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case PICTURE_URL_A:
      return isSetPicture_url_a();
    case PICTURE_URL_B:
      return isSetPicture_url_b();
    case PICTURE_URL_C:
      return isSetPicture_url_c();
    case PICTURE_URL_D:
      return isSetPicture_url_d();
    case PICTURE_URL_E:
      return isSetPicture_url_e();
    case PICTURE_URL_F:
      return isSetPicture_url_f();
    case PICTURE_URL_G:
      return isSetPicture_url_g();
    case PICTURE_URL:
      return isSetPicture_url();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dm_PictureAttach)
      return this.equals((Dm_PictureAttach)that);
    return false;
  }

  public boolean equals(Dm_PictureAttach that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_picture_url_a = true && this.isSetPicture_url_a();
    boolean that_present_picture_url_a = true && that.isSetPicture_url_a();
    if (this_present_picture_url_a || that_present_picture_url_a) {
      if (!(this_present_picture_url_a && that_present_picture_url_a))
        return false;
      if (!this.picture_url_a.equals(that.picture_url_a))
        return false;
    }

    boolean this_present_picture_url_b = true && this.isSetPicture_url_b();
    boolean that_present_picture_url_b = true && that.isSetPicture_url_b();
    if (this_present_picture_url_b || that_present_picture_url_b) {
      if (!(this_present_picture_url_b && that_present_picture_url_b))
        return false;
      if (!this.picture_url_b.equals(that.picture_url_b))
        return false;
    }

    boolean this_present_picture_url_c = true && this.isSetPicture_url_c();
    boolean that_present_picture_url_c = true && that.isSetPicture_url_c();
    if (this_present_picture_url_c || that_present_picture_url_c) {
      if (!(this_present_picture_url_c && that_present_picture_url_c))
        return false;
      if (!this.picture_url_c.equals(that.picture_url_c))
        return false;
    }

    boolean this_present_picture_url_d = true && this.isSetPicture_url_d();
    boolean that_present_picture_url_d = true && that.isSetPicture_url_d();
    if (this_present_picture_url_d || that_present_picture_url_d) {
      if (!(this_present_picture_url_d && that_present_picture_url_d))
        return false;
      if (!this.picture_url_d.equals(that.picture_url_d))
        return false;
    }

    boolean this_present_picture_url_e = true && this.isSetPicture_url_e();
    boolean that_present_picture_url_e = true && that.isSetPicture_url_e();
    if (this_present_picture_url_e || that_present_picture_url_e) {
      if (!(this_present_picture_url_e && that_present_picture_url_e))
        return false;
      if (!this.picture_url_e.equals(that.picture_url_e))
        return false;
    }

    boolean this_present_picture_url_f = true && this.isSetPicture_url_f();
    boolean that_present_picture_url_f = true && that.isSetPicture_url_f();
    if (this_present_picture_url_f || that_present_picture_url_f) {
      if (!(this_present_picture_url_f && that_present_picture_url_f))
        return false;
      if (!this.picture_url_f.equals(that.picture_url_f))
        return false;
    }

    boolean this_present_picture_url_g = true && this.isSetPicture_url_g();
    boolean that_present_picture_url_g = true && that.isSetPicture_url_g();
    if (this_present_picture_url_g || that_present_picture_url_g) {
      if (!(this_present_picture_url_g && that_present_picture_url_g))
        return false;
      if (!this.picture_url_g.equals(that.picture_url_g))
        return false;
    }

    boolean this_present_picture_url = true && this.isSetPicture_url();
    boolean that_present_picture_url = true && that.isSetPicture_url();
    if (this_present_picture_url || that_present_picture_url) {
      if (!(this_present_picture_url && that_present_picture_url))
        return false;
      if (!this.picture_url.equals(that.picture_url))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Dm_PictureAttach other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Dm_PictureAttach typedOther = (Dm_PictureAttach)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture_url_a()).compareTo(typedOther.isSetPicture_url_a());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture_url_a()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture_url_a, typedOther.picture_url_a);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture_url_b()).compareTo(typedOther.isSetPicture_url_b());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture_url_b()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture_url_b, typedOther.picture_url_b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture_url_c()).compareTo(typedOther.isSetPicture_url_c());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture_url_c()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture_url_c, typedOther.picture_url_c);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture_url_d()).compareTo(typedOther.isSetPicture_url_d());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture_url_d()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture_url_d, typedOther.picture_url_d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture_url_e()).compareTo(typedOther.isSetPicture_url_e());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture_url_e()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture_url_e, typedOther.picture_url_e);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture_url_f()).compareTo(typedOther.isSetPicture_url_f());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture_url_f()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture_url_f, typedOther.picture_url_f);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture_url_g()).compareTo(typedOther.isSetPicture_url_g());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture_url_g()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture_url_g, typedOther.picture_url_g);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture_url()).compareTo(typedOther.isSetPicture_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture_url, typedOther.picture_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dm_PictureAttach(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture_url_a:");
    if (this.picture_url_a == null) {
      sb.append("null");
    } else {
      sb.append(this.picture_url_a);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture_url_b:");
    if (this.picture_url_b == null) {
      sb.append("null");
    } else {
      sb.append(this.picture_url_b);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture_url_c:");
    if (this.picture_url_c == null) {
      sb.append("null");
    } else {
      sb.append(this.picture_url_c);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture_url_d:");
    if (this.picture_url_d == null) {
      sb.append("null");
    } else {
      sb.append(this.picture_url_d);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture_url_e:");
    if (this.picture_url_e == null) {
      sb.append("null");
    } else {
      sb.append(this.picture_url_e);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture_url_f:");
    if (this.picture_url_f == null) {
      sb.append("null");
    } else {
      sb.append(this.picture_url_f);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture_url_g:");
    if (this.picture_url_g == null) {
      sb.append("null");
    } else {
      sb.append(this.picture_url_g);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picture_url:");
    if (this.picture_url == null) {
      sb.append("null");
    } else {
      sb.append(this.picture_url);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Dm_PictureAttachStandardSchemeFactory implements SchemeFactory {
    public Dm_PictureAttachStandardScheme getScheme() {
      return new Dm_PictureAttachStandardScheme();
    }
  }

  private static class Dm_PictureAttachStandardScheme extends StandardScheme<Dm_PictureAttach> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dm_PictureAttach struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PICTURE_URL_A
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picture_url_a = iprot.readString();
              struct.setPicture_url_aIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PICTURE_URL_B
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picture_url_b = iprot.readString();
              struct.setPicture_url_bIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PICTURE_URL_C
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picture_url_c = iprot.readString();
              struct.setPicture_url_cIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PICTURE_URL_D
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picture_url_d = iprot.readString();
              struct.setPicture_url_dIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PICTURE_URL_E
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picture_url_e = iprot.readString();
              struct.setPicture_url_eIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PICTURE_URL_F
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picture_url_f = iprot.readString();
              struct.setPicture_url_fIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PICTURE_URL_G
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picture_url_g = iprot.readString();
              struct.setPicture_url_gIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PICTURE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picture_url = iprot.readString();
              struct.setPicture_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dm_PictureAttach struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.picture_url_a != null) {
        oprot.writeFieldBegin(PICTURE_URL_A_FIELD_DESC);
        oprot.writeString(struct.picture_url_a);
        oprot.writeFieldEnd();
      }
      if (struct.picture_url_b != null) {
        oprot.writeFieldBegin(PICTURE_URL_B_FIELD_DESC);
        oprot.writeString(struct.picture_url_b);
        oprot.writeFieldEnd();
      }
      if (struct.picture_url_c != null) {
        oprot.writeFieldBegin(PICTURE_URL_C_FIELD_DESC);
        oprot.writeString(struct.picture_url_c);
        oprot.writeFieldEnd();
      }
      if (struct.picture_url_d != null) {
        oprot.writeFieldBegin(PICTURE_URL_D_FIELD_DESC);
        oprot.writeString(struct.picture_url_d);
        oprot.writeFieldEnd();
      }
      if (struct.picture_url_e != null) {
        oprot.writeFieldBegin(PICTURE_URL_E_FIELD_DESC);
        oprot.writeString(struct.picture_url_e);
        oprot.writeFieldEnd();
      }
      if (struct.picture_url_f != null) {
        oprot.writeFieldBegin(PICTURE_URL_F_FIELD_DESC);
        oprot.writeString(struct.picture_url_f);
        oprot.writeFieldEnd();
      }
      if (struct.picture_url_g != null) {
        oprot.writeFieldBegin(PICTURE_URL_G_FIELD_DESC);
        oprot.writeString(struct.picture_url_g);
        oprot.writeFieldEnd();
      }
      if (struct.picture_url != null) {
        oprot.writeFieldBegin(PICTURE_URL_FIELD_DESC);
        oprot.writeString(struct.picture_url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Dm_PictureAttachTupleSchemeFactory implements SchemeFactory {
    public Dm_PictureAttachTupleScheme getScheme() {
      return new Dm_PictureAttachTupleScheme();
    }
  }

  private static class Dm_PictureAttachTupleScheme extends TupleScheme<Dm_PictureAttach> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dm_PictureAttach struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetPicture_url_a()) {
        optionals.set(1);
      }
      if (struct.isSetPicture_url_b()) {
        optionals.set(2);
      }
      if (struct.isSetPicture_url_c()) {
        optionals.set(3);
      }
      if (struct.isSetPicture_url_d()) {
        optionals.set(4);
      }
      if (struct.isSetPicture_url_e()) {
        optionals.set(5);
      }
      if (struct.isSetPicture_url_f()) {
        optionals.set(6);
      }
      if (struct.isSetPicture_url_g()) {
        optionals.set(7);
      }
      if (struct.isSetPicture_url()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPicture_url_a()) {
        oprot.writeString(struct.picture_url_a);
      }
      if (struct.isSetPicture_url_b()) {
        oprot.writeString(struct.picture_url_b);
      }
      if (struct.isSetPicture_url_c()) {
        oprot.writeString(struct.picture_url_c);
      }
      if (struct.isSetPicture_url_d()) {
        oprot.writeString(struct.picture_url_d);
      }
      if (struct.isSetPicture_url_e()) {
        oprot.writeString(struct.picture_url_e);
      }
      if (struct.isSetPicture_url_f()) {
        oprot.writeString(struct.picture_url_f);
      }
      if (struct.isSetPicture_url_g()) {
        oprot.writeString(struct.picture_url_g);
      }
      if (struct.isSetPicture_url()) {
        oprot.writeString(struct.picture_url);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dm_PictureAttach struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.picture_url_a = iprot.readString();
        struct.setPicture_url_aIsSet(true);
      }
      if (incoming.get(2)) {
        struct.picture_url_b = iprot.readString();
        struct.setPicture_url_bIsSet(true);
      }
      if (incoming.get(3)) {
        struct.picture_url_c = iprot.readString();
        struct.setPicture_url_cIsSet(true);
      }
      if (incoming.get(4)) {
        struct.picture_url_d = iprot.readString();
        struct.setPicture_url_dIsSet(true);
      }
      if (incoming.get(5)) {
        struct.picture_url_e = iprot.readString();
        struct.setPicture_url_eIsSet(true);
      }
      if (incoming.get(6)) {
        struct.picture_url_f = iprot.readString();
        struct.setPicture_url_fIsSet(true);
      }
      if (incoming.get(7)) {
        struct.picture_url_g = iprot.readString();
        struct.setPicture_url_gIsSet(true);
      }
      if (incoming.get(8)) {
        struct.picture_url = iprot.readString();
        struct.setPicture_urlIsSet(true);
      }
    }
  }

}

