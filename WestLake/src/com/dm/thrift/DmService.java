/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DmService {

  public interface Iface {

    public Dm_User_Result regesiter(Dm_User user) throws org.apache.thrift.TException;

    public Dm_User_Result login(String name, String md5) throws org.apache.thrift.TException;

    public Dm_Result feedback(String validString, String content) throws org.apache.thrift.TException;

    public Dm_Version requestVersion(String clientType) throws org.apache.thrift.TException;

    public Dm_SceneryList searchSceneryByName(String validstring, String name, int page, int pagesize) throws org.apache.thrift.TException;

    public Dm_SceneryList searchSceneryByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException;

    public Dm_ScenerySimplifyList searchScenerySimplifyByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException;

    public Dm_SceneryList searchHotSceneryByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException;

    public Dm_ScenerySimplifyList searchHotScenerySimplifyByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException;

    public Dm_SceneryList searchSceneryNearby(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp) throws org.apache.thrift.TException;

    public Dm_ScenerySimplifyList searchScenerySimplifyNearby(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp) throws org.apache.thrift.TException;

    public Dm_SceneryOne searchCultureScenery(String validstring, String id) throws org.apache.thrift.TException;

    public Dm_PreImageList getPreImageList(String validstring) throws org.apache.thrift.TException;

    public Dm_ActivityTypeList activityType(String validstring) throws org.apache.thrift.TException;

    public Dm_ActivityList searchActivityByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_ActivitySimplifyList searchActivitySimplifyByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_ActivityList searchActivity(String validstring, String activityName, String initiator, String company, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_ActivitySimplifyList searchActivitySimplify(String validstring, String activityName, String initiator, String company, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_ActivitySimplifyList searchHotActivitySimplify(String validstring, String hotType, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_ActivityOne viewActivity(String validString, String id) throws org.apache.thrift.TException;

    public Dm_BaikeTypeList baikeType(String validstring) throws org.apache.thrift.TException;

    public Dm_BaikeList searchBaikeByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_BaikeSimplifyList searchBaikeSimplifyByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_BaikeList searchBaikeByName(String validstring, String keyWord, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_BaikeSimplifyList searchBaikeSimplifyByName(String validstring, String keyWord, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_BaikeOne viewBaike(String validstring, String id) throws org.apache.thrift.TException;

    public Dm_MessageList getMessage(String validstring, double lng, double lat) throws org.apache.thrift.TException;

    public Dm_Result publishTalk(String validstring, Dm_Talk talk) throws org.apache.thrift.TException;

    public Dm_SeeTalkList searcheSeeTalkList(String validstring, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_SeeTalkOne lookSeeTalk(String validstring, String id) throws org.apache.thrift.TException;

    public Dm_WatermarkResult searchWatermark(String validstring, String id) throws org.apache.thrift.TException;

    public Dm_Result modifyWatermark(String validstring, String id, String watermark) throws org.apache.thrift.TException;

    public Dm_Exhibit exhibit_getInfo(String eid) throws org.apache.thrift.TException;

    public Dm_ExhibitList exhibit_getInfoByNum(String mid, int num) throws org.apache.thrift.TException;

    public Dm_suibi_pllist suibiplList(String id, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_suibi_list ge_AttentionList(String id, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_suibi_list ge_suibiList(String userid, int page, int pageSize) throws org.apache.thrift.TException;

    public Dm_Result selectSuibi(String tag, String nr, String isprivate, String img, String userid) throws org.apache.thrift.TException;

    public Dm_Result selectSuibi_zf(String sid, String tag, String userid) throws org.apache.thrift.TException;

    public Dm_Result selectSuibi_hfpl(String plnr, String father_id, String user_id, String suibi_id) throws org.apache.thrift.TException;

    public Dm_Result selectSuibi_hf(String suibi_id, String nr, String user_id) throws org.apache.thrift.TException;

    public Dm_Result deleteSuibi(String id) throws org.apache.thrift.TException;

    public Dm_App_TuceOne viewTuce(String validstring, String id) throws org.apache.thrift.TException;

    public Dm_App_TuceList searchTuceListByuid(String validstring, String uid, String title, String isfabu, int page, int pageSize) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void regesiter(Dm_User user, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.regesiter_call> resultHandler) throws org.apache.thrift.TException;

    public void login(String name, String md5, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.login_call> resultHandler) throws org.apache.thrift.TException;

    public void feedback(String validString, String content, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.feedback_call> resultHandler) throws org.apache.thrift.TException;

    public void requestVersion(String clientType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.requestVersion_call> resultHandler) throws org.apache.thrift.TException;

    public void searchSceneryByName(String validstring, String name, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchSceneryByName_call> resultHandler) throws org.apache.thrift.TException;

    public void searchSceneryByCity(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchSceneryByCity_call> resultHandler) throws org.apache.thrift.TException;

    public void searchScenerySimplifyByCity(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchScenerySimplifyByCity_call> resultHandler) throws org.apache.thrift.TException;

    public void searchHotSceneryByCity(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchHotSceneryByCity_call> resultHandler) throws org.apache.thrift.TException;

    public void searchHotScenerySimplifyByCity(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchHotScenerySimplifyByCity_call> resultHandler) throws org.apache.thrift.TException;

    public void searchSceneryNearby(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchSceneryNearby_call> resultHandler) throws org.apache.thrift.TException;

    public void searchScenerySimplifyNearby(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchScenerySimplifyNearby_call> resultHandler) throws org.apache.thrift.TException;

    public void searchCultureScenery(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchCultureScenery_call> resultHandler) throws org.apache.thrift.TException;

    public void getPreImageList(String validstring, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getPreImageList_call> resultHandler) throws org.apache.thrift.TException;

    public void activityType(String validstring, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.activityType_call> resultHandler) throws org.apache.thrift.TException;

    public void searchActivityByType(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchActivityByType_call> resultHandler) throws org.apache.thrift.TException;

    public void searchActivitySimplifyByType(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchActivitySimplifyByType_call> resultHandler) throws org.apache.thrift.TException;

    public void searchActivity(String validstring, String activityName, String initiator, String company, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchActivity_call> resultHandler) throws org.apache.thrift.TException;

    public void searchActivitySimplify(String validstring, String activityName, String initiator, String company, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchActivitySimplify_call> resultHandler) throws org.apache.thrift.TException;

    public void searchHotActivitySimplify(String validstring, String hotType, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchHotActivitySimplify_call> resultHandler) throws org.apache.thrift.TException;

    public void viewActivity(String validString, String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.viewActivity_call> resultHandler) throws org.apache.thrift.TException;

    public void baikeType(String validstring, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.baikeType_call> resultHandler) throws org.apache.thrift.TException;

    public void searchBaikeByType(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchBaikeByType_call> resultHandler) throws org.apache.thrift.TException;

    public void searchBaikeSimplifyByType(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchBaikeSimplifyByType_call> resultHandler) throws org.apache.thrift.TException;

    public void searchBaikeByName(String validstring, String keyWord, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchBaikeByName_call> resultHandler) throws org.apache.thrift.TException;

    public void searchBaikeSimplifyByName(String validstring, String keyWord, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchBaikeSimplifyByName_call> resultHandler) throws org.apache.thrift.TException;

    public void viewBaike(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.viewBaike_call> resultHandler) throws org.apache.thrift.TException;

    public void getMessage(String validstring, double lng, double lat, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMessage_call> resultHandler) throws org.apache.thrift.TException;

    public void publishTalk(String validstring, Dm_Talk talk, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.publishTalk_call> resultHandler) throws org.apache.thrift.TException;

    public void searcheSeeTalkList(String validstring, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searcheSeeTalkList_call> resultHandler) throws org.apache.thrift.TException;

    public void lookSeeTalk(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.lookSeeTalk_call> resultHandler) throws org.apache.thrift.TException;

    public void searchWatermark(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchWatermark_call> resultHandler) throws org.apache.thrift.TException;

    public void modifyWatermark(String validstring, String id, String watermark, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.modifyWatermark_call> resultHandler) throws org.apache.thrift.TException;

    public void exhibit_getInfo(String eid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exhibit_getInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void exhibit_getInfoByNum(String mid, int num, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exhibit_getInfoByNum_call> resultHandler) throws org.apache.thrift.TException;

    public void suibiplList(String id, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.suibiplList_call> resultHandler) throws org.apache.thrift.TException;

    public void ge_AttentionList(String id, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ge_AttentionList_call> resultHandler) throws org.apache.thrift.TException;

    public void ge_suibiList(String userid, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ge_suibiList_call> resultHandler) throws org.apache.thrift.TException;

    public void selectSuibi(String tag, String nr, String isprivate, String img, String userid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.selectSuibi_call> resultHandler) throws org.apache.thrift.TException;

    public void selectSuibi_zf(String sid, String tag, String userid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.selectSuibi_zf_call> resultHandler) throws org.apache.thrift.TException;

    public void selectSuibi_hfpl(String plnr, String father_id, String user_id, String suibi_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.selectSuibi_hfpl_call> resultHandler) throws org.apache.thrift.TException;

    public void selectSuibi_hf(String suibi_id, String nr, String user_id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.selectSuibi_hf_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteSuibi(String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteSuibi_call> resultHandler) throws org.apache.thrift.TException;

    public void viewTuce(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.viewTuce_call> resultHandler) throws org.apache.thrift.TException;

    public void searchTuceListByuid(String validstring, String uid, String title, String isfabu, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.searchTuceListByuid_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Dm_User_Result regesiter(Dm_User user) throws org.apache.thrift.TException
    {
      send_regesiter(user);
      return recv_regesiter();
    }

    public void send_regesiter(Dm_User user) throws org.apache.thrift.TException
    {
      regesiter_args args = new regesiter_args();
      args.setUser(user);
      sendBase("regesiter", args);
    }

    public Dm_User_Result recv_regesiter() throws org.apache.thrift.TException
    {
      regesiter_result result = new regesiter_result();
      receiveBase(result, "regesiter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "regesiter failed: unknown result");
    }

    public Dm_User_Result login(String name, String md5) throws org.apache.thrift.TException
    {
      send_login(name, md5);
      return recv_login();
    }

    public void send_login(String name, String md5) throws org.apache.thrift.TException
    {
      login_args args = new login_args();
      args.setName(name);
      args.setMd5(md5);
      sendBase("login", args);
    }

    public Dm_User_Result recv_login() throws org.apache.thrift.TException
    {
      login_result result = new login_result();
      receiveBase(result, "login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }

    public Dm_Result feedback(String validString, String content) throws org.apache.thrift.TException
    {
      send_feedback(validString, content);
      return recv_feedback();
    }

    public void send_feedback(String validString, String content) throws org.apache.thrift.TException
    {
      feedback_args args = new feedback_args();
      args.setValidString(validString);
      args.setContent(content);
      sendBase("feedback", args);
    }

    public Dm_Result recv_feedback() throws org.apache.thrift.TException
    {
      feedback_result result = new feedback_result();
      receiveBase(result, "feedback");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "feedback failed: unknown result");
    }

    public Dm_Version requestVersion(String clientType) throws org.apache.thrift.TException
    {
      send_requestVersion(clientType);
      return recv_requestVersion();
    }

    public void send_requestVersion(String clientType) throws org.apache.thrift.TException
    {
      requestVersion_args args = new requestVersion_args();
      args.setClientType(clientType);
      sendBase("requestVersion", args);
    }

    public Dm_Version recv_requestVersion() throws org.apache.thrift.TException
    {
      requestVersion_result result = new requestVersion_result();
      receiveBase(result, "requestVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestVersion failed: unknown result");
    }

    public Dm_SceneryList searchSceneryByName(String validstring, String name, int page, int pagesize) throws org.apache.thrift.TException
    {
      send_searchSceneryByName(validstring, name, page, pagesize);
      return recv_searchSceneryByName();
    }

    public void send_searchSceneryByName(String validstring, String name, int page, int pagesize) throws org.apache.thrift.TException
    {
      searchSceneryByName_args args = new searchSceneryByName_args();
      args.setValidstring(validstring);
      args.setName(name);
      args.setPage(page);
      args.setPagesize(pagesize);
      sendBase("searchSceneryByName", args);
    }

    public Dm_SceneryList recv_searchSceneryByName() throws org.apache.thrift.TException
    {
      searchSceneryByName_result result = new searchSceneryByName_result();
      receiveBase(result, "searchSceneryByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchSceneryByName failed: unknown result");
    }

    public Dm_SceneryList searchSceneryByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException
    {
      send_searchSceneryByCity(validstring, cityName, page, pagesize);
      return recv_searchSceneryByCity();
    }

    public void send_searchSceneryByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException
    {
      searchSceneryByCity_args args = new searchSceneryByCity_args();
      args.setValidstring(validstring);
      args.setCityName(cityName);
      args.setPage(page);
      args.setPagesize(pagesize);
      sendBase("searchSceneryByCity", args);
    }

    public Dm_SceneryList recv_searchSceneryByCity() throws org.apache.thrift.TException
    {
      searchSceneryByCity_result result = new searchSceneryByCity_result();
      receiveBase(result, "searchSceneryByCity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchSceneryByCity failed: unknown result");
    }

    public Dm_ScenerySimplifyList searchScenerySimplifyByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException
    {
      send_searchScenerySimplifyByCity(validstring, cityName, page, pagesize);
      return recv_searchScenerySimplifyByCity();
    }

    public void send_searchScenerySimplifyByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException
    {
      searchScenerySimplifyByCity_args args = new searchScenerySimplifyByCity_args();
      args.setValidstring(validstring);
      args.setCityName(cityName);
      args.setPage(page);
      args.setPagesize(pagesize);
      sendBase("searchScenerySimplifyByCity", args);
    }

    public Dm_ScenerySimplifyList recv_searchScenerySimplifyByCity() throws org.apache.thrift.TException
    {
      searchScenerySimplifyByCity_result result = new searchScenerySimplifyByCity_result();
      receiveBase(result, "searchScenerySimplifyByCity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchScenerySimplifyByCity failed: unknown result");
    }

    public Dm_SceneryList searchHotSceneryByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException
    {
      send_searchHotSceneryByCity(validstring, cityName, page, pagesize);
      return recv_searchHotSceneryByCity();
    }

    public void send_searchHotSceneryByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException
    {
      searchHotSceneryByCity_args args = new searchHotSceneryByCity_args();
      args.setValidstring(validstring);
      args.setCityName(cityName);
      args.setPage(page);
      args.setPagesize(pagesize);
      sendBase("searchHotSceneryByCity", args);
    }

    public Dm_SceneryList recv_searchHotSceneryByCity() throws org.apache.thrift.TException
    {
      searchHotSceneryByCity_result result = new searchHotSceneryByCity_result();
      receiveBase(result, "searchHotSceneryByCity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchHotSceneryByCity failed: unknown result");
    }

    public Dm_ScenerySimplifyList searchHotScenerySimplifyByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException
    {
      send_searchHotScenerySimplifyByCity(validstring, cityName, page, pagesize);
      return recv_searchHotScenerySimplifyByCity();
    }

    public void send_searchHotScenerySimplifyByCity(String validstring, String cityName, int page, int pagesize) throws org.apache.thrift.TException
    {
      searchHotScenerySimplifyByCity_args args = new searchHotScenerySimplifyByCity_args();
      args.setValidstring(validstring);
      args.setCityName(cityName);
      args.setPage(page);
      args.setPagesize(pagesize);
      sendBase("searchHotScenerySimplifyByCity", args);
    }

    public Dm_ScenerySimplifyList recv_searchHotScenerySimplifyByCity() throws org.apache.thrift.TException
    {
      searchHotScenerySimplifyByCity_result result = new searchHotScenerySimplifyByCity_result();
      receiveBase(result, "searchHotScenerySimplifyByCity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchHotScenerySimplifyByCity failed: unknown result");
    }

    public Dm_SceneryList searchSceneryNearby(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp) throws org.apache.thrift.TException
    {
      send_searchSceneryNearby(validstring, lng, lat, name, smallType, bigType, range, page, pagesize, isjp);
      return recv_searchSceneryNearby();
    }

    public void send_searchSceneryNearby(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp) throws org.apache.thrift.TException
    {
      searchSceneryNearby_args args = new searchSceneryNearby_args();
      args.setValidstring(validstring);
      args.setLng(lng);
      args.setLat(lat);
      args.setName(name);
      args.setSmallType(smallType);
      args.setBigType(bigType);
      args.setRange(range);
      args.setPage(page);
      args.setPagesize(pagesize);
      args.setIsjp(isjp);
      sendBase("searchSceneryNearby", args);
    }

    public Dm_SceneryList recv_searchSceneryNearby() throws org.apache.thrift.TException
    {
      searchSceneryNearby_result result = new searchSceneryNearby_result();
      receiveBase(result, "searchSceneryNearby");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchSceneryNearby failed: unknown result");
    }

    public Dm_ScenerySimplifyList searchScenerySimplifyNearby(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp) throws org.apache.thrift.TException
    {
      send_searchScenerySimplifyNearby(validstring, lng, lat, name, smallType, bigType, range, page, pagesize, isjp);
      return recv_searchScenerySimplifyNearby();
    }

    public void send_searchScenerySimplifyNearby(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp) throws org.apache.thrift.TException
    {
      searchScenerySimplifyNearby_args args = new searchScenerySimplifyNearby_args();
      args.setValidstring(validstring);
      args.setLng(lng);
      args.setLat(lat);
      args.setName(name);
      args.setSmallType(smallType);
      args.setBigType(bigType);
      args.setRange(range);
      args.setPage(page);
      args.setPagesize(pagesize);
      args.setIsjp(isjp);
      sendBase("searchScenerySimplifyNearby", args);
    }

    public Dm_ScenerySimplifyList recv_searchScenerySimplifyNearby() throws org.apache.thrift.TException
    {
      searchScenerySimplifyNearby_result result = new searchScenerySimplifyNearby_result();
      receiveBase(result, "searchScenerySimplifyNearby");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchScenerySimplifyNearby failed: unknown result");
    }

    public Dm_SceneryOne searchCultureScenery(String validstring, String id) throws org.apache.thrift.TException
    {
      send_searchCultureScenery(validstring, id);
      return recv_searchCultureScenery();
    }

    public void send_searchCultureScenery(String validstring, String id) throws org.apache.thrift.TException
    {
      searchCultureScenery_args args = new searchCultureScenery_args();
      args.setValidstring(validstring);
      args.setId(id);
      sendBase("searchCultureScenery", args);
    }

    public Dm_SceneryOne recv_searchCultureScenery() throws org.apache.thrift.TException
    {
      searchCultureScenery_result result = new searchCultureScenery_result();
      receiveBase(result, "searchCultureScenery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchCultureScenery failed: unknown result");
    }

    public Dm_PreImageList getPreImageList(String validstring) throws org.apache.thrift.TException
    {
      send_getPreImageList(validstring);
      return recv_getPreImageList();
    }

    public void send_getPreImageList(String validstring) throws org.apache.thrift.TException
    {
      getPreImageList_args args = new getPreImageList_args();
      args.setValidstring(validstring);
      sendBase("getPreImageList", args);
    }

    public Dm_PreImageList recv_getPreImageList() throws org.apache.thrift.TException
    {
      getPreImageList_result result = new getPreImageList_result();
      receiveBase(result, "getPreImageList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPreImageList failed: unknown result");
    }

    public Dm_ActivityTypeList activityType(String validstring) throws org.apache.thrift.TException
    {
      send_activityType(validstring);
      return recv_activityType();
    }

    public void send_activityType(String validstring) throws org.apache.thrift.TException
    {
      activityType_args args = new activityType_args();
      args.setValidstring(validstring);
      sendBase("activityType", args);
    }

    public Dm_ActivityTypeList recv_activityType() throws org.apache.thrift.TException
    {
      activityType_result result = new activityType_result();
      receiveBase(result, "activityType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activityType failed: unknown result");
    }

    public Dm_ActivityList searchActivityByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searchActivityByType(validstring, typeName, page, pageSize);
      return recv_searchActivityByType();
    }

    public void send_searchActivityByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException
    {
      searchActivityByType_args args = new searchActivityByType_args();
      args.setValidstring(validstring);
      args.setTypeName(typeName);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searchActivityByType", args);
    }

    public Dm_ActivityList recv_searchActivityByType() throws org.apache.thrift.TException
    {
      searchActivityByType_result result = new searchActivityByType_result();
      receiveBase(result, "searchActivityByType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchActivityByType failed: unknown result");
    }

    public Dm_ActivitySimplifyList searchActivitySimplifyByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searchActivitySimplifyByType(validstring, typeName, page, pageSize);
      return recv_searchActivitySimplifyByType();
    }

    public void send_searchActivitySimplifyByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException
    {
      searchActivitySimplifyByType_args args = new searchActivitySimplifyByType_args();
      args.setValidstring(validstring);
      args.setTypeName(typeName);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searchActivitySimplifyByType", args);
    }

    public Dm_ActivitySimplifyList recv_searchActivitySimplifyByType() throws org.apache.thrift.TException
    {
      searchActivitySimplifyByType_result result = new searchActivitySimplifyByType_result();
      receiveBase(result, "searchActivitySimplifyByType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchActivitySimplifyByType failed: unknown result");
    }

    public Dm_ActivityList searchActivity(String validstring, String activityName, String initiator, String company, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searchActivity(validstring, activityName, initiator, company, page, pageSize);
      return recv_searchActivity();
    }

    public void send_searchActivity(String validstring, String activityName, String initiator, String company, int page, int pageSize) throws org.apache.thrift.TException
    {
      searchActivity_args args = new searchActivity_args();
      args.setValidstring(validstring);
      args.setActivityName(activityName);
      args.setInitiator(initiator);
      args.setCompany(company);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searchActivity", args);
    }

    public Dm_ActivityList recv_searchActivity() throws org.apache.thrift.TException
    {
      searchActivity_result result = new searchActivity_result();
      receiveBase(result, "searchActivity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchActivity failed: unknown result");
    }

    public Dm_ActivitySimplifyList searchActivitySimplify(String validstring, String activityName, String initiator, String company, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searchActivitySimplify(validstring, activityName, initiator, company, page, pageSize);
      return recv_searchActivitySimplify();
    }

    public void send_searchActivitySimplify(String validstring, String activityName, String initiator, String company, int page, int pageSize) throws org.apache.thrift.TException
    {
      searchActivitySimplify_args args = new searchActivitySimplify_args();
      args.setValidstring(validstring);
      args.setActivityName(activityName);
      args.setInitiator(initiator);
      args.setCompany(company);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searchActivitySimplify", args);
    }

    public Dm_ActivitySimplifyList recv_searchActivitySimplify() throws org.apache.thrift.TException
    {
      searchActivitySimplify_result result = new searchActivitySimplify_result();
      receiveBase(result, "searchActivitySimplify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchActivitySimplify failed: unknown result");
    }

    public Dm_ActivitySimplifyList searchHotActivitySimplify(String validstring, String hotType, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searchHotActivitySimplify(validstring, hotType, page, pageSize);
      return recv_searchHotActivitySimplify();
    }

    public void send_searchHotActivitySimplify(String validstring, String hotType, int page, int pageSize) throws org.apache.thrift.TException
    {
      searchHotActivitySimplify_args args = new searchHotActivitySimplify_args();
      args.setValidstring(validstring);
      args.setHotType(hotType);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searchHotActivitySimplify", args);
    }

    public Dm_ActivitySimplifyList recv_searchHotActivitySimplify() throws org.apache.thrift.TException
    {
      searchHotActivitySimplify_result result = new searchHotActivitySimplify_result();
      receiveBase(result, "searchHotActivitySimplify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchHotActivitySimplify failed: unknown result");
    }

    public Dm_ActivityOne viewActivity(String validString, String id) throws org.apache.thrift.TException
    {
      send_viewActivity(validString, id);
      return recv_viewActivity();
    }

    public void send_viewActivity(String validString, String id) throws org.apache.thrift.TException
    {
      viewActivity_args args = new viewActivity_args();
      args.setValidString(validString);
      args.setId(id);
      sendBase("viewActivity", args);
    }

    public Dm_ActivityOne recv_viewActivity() throws org.apache.thrift.TException
    {
      viewActivity_result result = new viewActivity_result();
      receiveBase(result, "viewActivity");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "viewActivity failed: unknown result");
    }

    public Dm_BaikeTypeList baikeType(String validstring) throws org.apache.thrift.TException
    {
      send_baikeType(validstring);
      return recv_baikeType();
    }

    public void send_baikeType(String validstring) throws org.apache.thrift.TException
    {
      baikeType_args args = new baikeType_args();
      args.setValidstring(validstring);
      sendBase("baikeType", args);
    }

    public Dm_BaikeTypeList recv_baikeType() throws org.apache.thrift.TException
    {
      baikeType_result result = new baikeType_result();
      receiveBase(result, "baikeType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "baikeType failed: unknown result");
    }

    public Dm_BaikeList searchBaikeByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searchBaikeByType(validstring, typeName, page, pageSize);
      return recv_searchBaikeByType();
    }

    public void send_searchBaikeByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException
    {
      searchBaikeByType_args args = new searchBaikeByType_args();
      args.setValidstring(validstring);
      args.setTypeName(typeName);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searchBaikeByType", args);
    }

    public Dm_BaikeList recv_searchBaikeByType() throws org.apache.thrift.TException
    {
      searchBaikeByType_result result = new searchBaikeByType_result();
      receiveBase(result, "searchBaikeByType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchBaikeByType failed: unknown result");
    }

    public Dm_BaikeSimplifyList searchBaikeSimplifyByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searchBaikeSimplifyByType(validstring, typeName, page, pageSize);
      return recv_searchBaikeSimplifyByType();
    }

    public void send_searchBaikeSimplifyByType(String validstring, String typeName, int page, int pageSize) throws org.apache.thrift.TException
    {
      searchBaikeSimplifyByType_args args = new searchBaikeSimplifyByType_args();
      args.setValidstring(validstring);
      args.setTypeName(typeName);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searchBaikeSimplifyByType", args);
    }

    public Dm_BaikeSimplifyList recv_searchBaikeSimplifyByType() throws org.apache.thrift.TException
    {
      searchBaikeSimplifyByType_result result = new searchBaikeSimplifyByType_result();
      receiveBase(result, "searchBaikeSimplifyByType");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchBaikeSimplifyByType failed: unknown result");
    }

    public Dm_BaikeList searchBaikeByName(String validstring, String keyWord, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searchBaikeByName(validstring, keyWord, page, pageSize);
      return recv_searchBaikeByName();
    }

    public void send_searchBaikeByName(String validstring, String keyWord, int page, int pageSize) throws org.apache.thrift.TException
    {
      searchBaikeByName_args args = new searchBaikeByName_args();
      args.setValidstring(validstring);
      args.setKeyWord(keyWord);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searchBaikeByName", args);
    }

    public Dm_BaikeList recv_searchBaikeByName() throws org.apache.thrift.TException
    {
      searchBaikeByName_result result = new searchBaikeByName_result();
      receiveBase(result, "searchBaikeByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchBaikeByName failed: unknown result");
    }

    public Dm_BaikeSimplifyList searchBaikeSimplifyByName(String validstring, String keyWord, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searchBaikeSimplifyByName(validstring, keyWord, page, pageSize);
      return recv_searchBaikeSimplifyByName();
    }

    public void send_searchBaikeSimplifyByName(String validstring, String keyWord, int page, int pageSize) throws org.apache.thrift.TException
    {
      searchBaikeSimplifyByName_args args = new searchBaikeSimplifyByName_args();
      args.setValidstring(validstring);
      args.setKeyWord(keyWord);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searchBaikeSimplifyByName", args);
    }

    public Dm_BaikeSimplifyList recv_searchBaikeSimplifyByName() throws org.apache.thrift.TException
    {
      searchBaikeSimplifyByName_result result = new searchBaikeSimplifyByName_result();
      receiveBase(result, "searchBaikeSimplifyByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchBaikeSimplifyByName failed: unknown result");
    }

    public Dm_BaikeOne viewBaike(String validstring, String id) throws org.apache.thrift.TException
    {
      send_viewBaike(validstring, id);
      return recv_viewBaike();
    }

    public void send_viewBaike(String validstring, String id) throws org.apache.thrift.TException
    {
      viewBaike_args args = new viewBaike_args();
      args.setValidstring(validstring);
      args.setId(id);
      sendBase("viewBaike", args);
    }

    public Dm_BaikeOne recv_viewBaike() throws org.apache.thrift.TException
    {
      viewBaike_result result = new viewBaike_result();
      receiveBase(result, "viewBaike");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "viewBaike failed: unknown result");
    }

    public Dm_MessageList getMessage(String validstring, double lng, double lat) throws org.apache.thrift.TException
    {
      send_getMessage(validstring, lng, lat);
      return recv_getMessage();
    }

    public void send_getMessage(String validstring, double lng, double lat) throws org.apache.thrift.TException
    {
      getMessage_args args = new getMessage_args();
      args.setValidstring(validstring);
      args.setLng(lng);
      args.setLat(lat);
      sendBase("getMessage", args);
    }

    public Dm_MessageList recv_getMessage() throws org.apache.thrift.TException
    {
      getMessage_result result = new getMessage_result();
      receiveBase(result, "getMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMessage failed: unknown result");
    }

    public Dm_Result publishTalk(String validstring, Dm_Talk talk) throws org.apache.thrift.TException
    {
      send_publishTalk(validstring, talk);
      return recv_publishTalk();
    }

    public void send_publishTalk(String validstring, Dm_Talk talk) throws org.apache.thrift.TException
    {
      publishTalk_args args = new publishTalk_args();
      args.setValidstring(validstring);
      args.setTalk(talk);
      sendBase("publishTalk", args);
    }

    public Dm_Result recv_publishTalk() throws org.apache.thrift.TException
    {
      publishTalk_result result = new publishTalk_result();
      receiveBase(result, "publishTalk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "publishTalk failed: unknown result");
    }

    public Dm_SeeTalkList searcheSeeTalkList(String validstring, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searcheSeeTalkList(validstring, page, pageSize);
      return recv_searcheSeeTalkList();
    }

    public void send_searcheSeeTalkList(String validstring, int page, int pageSize) throws org.apache.thrift.TException
    {
      searcheSeeTalkList_args args = new searcheSeeTalkList_args();
      args.setValidstring(validstring);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searcheSeeTalkList", args);
    }

    public Dm_SeeTalkList recv_searcheSeeTalkList() throws org.apache.thrift.TException
    {
      searcheSeeTalkList_result result = new searcheSeeTalkList_result();
      receiveBase(result, "searcheSeeTalkList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searcheSeeTalkList failed: unknown result");
    }

    public Dm_SeeTalkOne lookSeeTalk(String validstring, String id) throws org.apache.thrift.TException
    {
      send_lookSeeTalk(validstring, id);
      return recv_lookSeeTalk();
    }

    public void send_lookSeeTalk(String validstring, String id) throws org.apache.thrift.TException
    {
      lookSeeTalk_args args = new lookSeeTalk_args();
      args.setValidstring(validstring);
      args.setId(id);
      sendBase("lookSeeTalk", args);
    }

    public Dm_SeeTalkOne recv_lookSeeTalk() throws org.apache.thrift.TException
    {
      lookSeeTalk_result result = new lookSeeTalk_result();
      receiveBase(result, "lookSeeTalk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lookSeeTalk failed: unknown result");
    }

    public Dm_WatermarkResult searchWatermark(String validstring, String id) throws org.apache.thrift.TException
    {
      send_searchWatermark(validstring, id);
      return recv_searchWatermark();
    }

    public void send_searchWatermark(String validstring, String id) throws org.apache.thrift.TException
    {
      searchWatermark_args args = new searchWatermark_args();
      args.setValidstring(validstring);
      args.setId(id);
      sendBase("searchWatermark", args);
    }

    public Dm_WatermarkResult recv_searchWatermark() throws org.apache.thrift.TException
    {
      searchWatermark_result result = new searchWatermark_result();
      receiveBase(result, "searchWatermark");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchWatermark failed: unknown result");
    }

    public Dm_Result modifyWatermark(String validstring, String id, String watermark) throws org.apache.thrift.TException
    {
      send_modifyWatermark(validstring, id, watermark);
      return recv_modifyWatermark();
    }

    public void send_modifyWatermark(String validstring, String id, String watermark) throws org.apache.thrift.TException
    {
      modifyWatermark_args args = new modifyWatermark_args();
      args.setValidstring(validstring);
      args.setId(id);
      args.setWatermark(watermark);
      sendBase("modifyWatermark", args);
    }

    public Dm_Result recv_modifyWatermark() throws org.apache.thrift.TException
    {
      modifyWatermark_result result = new modifyWatermark_result();
      receiveBase(result, "modifyWatermark");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyWatermark failed: unknown result");
    }

    public Dm_Exhibit exhibit_getInfo(String eid) throws org.apache.thrift.TException
    {
      send_exhibit_getInfo(eid);
      return recv_exhibit_getInfo();
    }

    public void send_exhibit_getInfo(String eid) throws org.apache.thrift.TException
    {
      exhibit_getInfo_args args = new exhibit_getInfo_args();
      args.setEid(eid);
      sendBase("exhibit_getInfo", args);
    }

    public Dm_Exhibit recv_exhibit_getInfo() throws org.apache.thrift.TException
    {
      exhibit_getInfo_result result = new exhibit_getInfo_result();
      receiveBase(result, "exhibit_getInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exhibit_getInfo failed: unknown result");
    }

    public Dm_ExhibitList exhibit_getInfoByNum(String mid, int num) throws org.apache.thrift.TException
    {
      send_exhibit_getInfoByNum(mid, num);
      return recv_exhibit_getInfoByNum();
    }

    public void send_exhibit_getInfoByNum(String mid, int num) throws org.apache.thrift.TException
    {
      exhibit_getInfoByNum_args args = new exhibit_getInfoByNum_args();
      args.setMid(mid);
      args.setNum(num);
      sendBase("exhibit_getInfoByNum", args);
    }

    public Dm_ExhibitList recv_exhibit_getInfoByNum() throws org.apache.thrift.TException
    {
      exhibit_getInfoByNum_result result = new exhibit_getInfoByNum_result();
      receiveBase(result, "exhibit_getInfoByNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exhibit_getInfoByNum failed: unknown result");
    }

    public Dm_suibi_pllist suibiplList(String id, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_suibiplList(id, page, pageSize);
      return recv_suibiplList();
    }

    public void send_suibiplList(String id, int page, int pageSize) throws org.apache.thrift.TException
    {
      suibiplList_args args = new suibiplList_args();
      args.setId(id);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("suibiplList", args);
    }

    public Dm_suibi_pllist recv_suibiplList() throws org.apache.thrift.TException
    {
      suibiplList_result result = new suibiplList_result();
      receiveBase(result, "suibiplList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "suibiplList failed: unknown result");
    }

    public Dm_suibi_list ge_AttentionList(String id, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_ge_AttentionList(id, page, pageSize);
      return recv_ge_AttentionList();
    }

    public void send_ge_AttentionList(String id, int page, int pageSize) throws org.apache.thrift.TException
    {
      ge_AttentionList_args args = new ge_AttentionList_args();
      args.setId(id);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("ge_AttentionList", args);
    }

    public Dm_suibi_list recv_ge_AttentionList() throws org.apache.thrift.TException
    {
      ge_AttentionList_result result = new ge_AttentionList_result();
      receiveBase(result, "ge_AttentionList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ge_AttentionList failed: unknown result");
    }

    public Dm_suibi_list ge_suibiList(String userid, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_ge_suibiList(userid, page, pageSize);
      return recv_ge_suibiList();
    }

    public void send_ge_suibiList(String userid, int page, int pageSize) throws org.apache.thrift.TException
    {
      ge_suibiList_args args = new ge_suibiList_args();
      args.setUserid(userid);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("ge_suibiList", args);
    }

    public Dm_suibi_list recv_ge_suibiList() throws org.apache.thrift.TException
    {
      ge_suibiList_result result = new ge_suibiList_result();
      receiveBase(result, "ge_suibiList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ge_suibiList failed: unknown result");
    }

    public Dm_Result selectSuibi(String tag, String nr, String isprivate, String img, String userid) throws org.apache.thrift.TException
    {
      send_selectSuibi(tag, nr, isprivate, img, userid);
      return recv_selectSuibi();
    }

    public void send_selectSuibi(String tag, String nr, String isprivate, String img, String userid) throws org.apache.thrift.TException
    {
      selectSuibi_args args = new selectSuibi_args();
      args.setTag(tag);
      args.setNr(nr);
      args.setIsprivate(isprivate);
      args.setImg(img);
      args.setUserid(userid);
      sendBase("selectSuibi", args);
    }

    public Dm_Result recv_selectSuibi() throws org.apache.thrift.TException
    {
      selectSuibi_result result = new selectSuibi_result();
      receiveBase(result, "selectSuibi");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectSuibi failed: unknown result");
    }

    public Dm_Result selectSuibi_zf(String sid, String tag, String userid) throws org.apache.thrift.TException
    {
      send_selectSuibi_zf(sid, tag, userid);
      return recv_selectSuibi_zf();
    }

    public void send_selectSuibi_zf(String sid, String tag, String userid) throws org.apache.thrift.TException
    {
      selectSuibi_zf_args args = new selectSuibi_zf_args();
      args.setSid(sid);
      args.setTag(tag);
      args.setUserid(userid);
      sendBase("selectSuibi_zf", args);
    }

    public Dm_Result recv_selectSuibi_zf() throws org.apache.thrift.TException
    {
      selectSuibi_zf_result result = new selectSuibi_zf_result();
      receiveBase(result, "selectSuibi_zf");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectSuibi_zf failed: unknown result");
    }

    public Dm_Result selectSuibi_hfpl(String plnr, String father_id, String user_id, String suibi_id) throws org.apache.thrift.TException
    {
      send_selectSuibi_hfpl(plnr, father_id, user_id, suibi_id);
      return recv_selectSuibi_hfpl();
    }

    public void send_selectSuibi_hfpl(String plnr, String father_id, String user_id, String suibi_id) throws org.apache.thrift.TException
    {
      selectSuibi_hfpl_args args = new selectSuibi_hfpl_args();
      args.setPlnr(plnr);
      args.setFather_id(father_id);
      args.setUser_id(user_id);
      args.setSuibi_id(suibi_id);
      sendBase("selectSuibi_hfpl", args);
    }

    public Dm_Result recv_selectSuibi_hfpl() throws org.apache.thrift.TException
    {
      selectSuibi_hfpl_result result = new selectSuibi_hfpl_result();
      receiveBase(result, "selectSuibi_hfpl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectSuibi_hfpl failed: unknown result");
    }

    public Dm_Result selectSuibi_hf(String suibi_id, String nr, String user_id) throws org.apache.thrift.TException
    {
      send_selectSuibi_hf(suibi_id, nr, user_id);
      return recv_selectSuibi_hf();
    }

    public void send_selectSuibi_hf(String suibi_id, String nr, String user_id) throws org.apache.thrift.TException
    {
      selectSuibi_hf_args args = new selectSuibi_hf_args();
      args.setSuibi_id(suibi_id);
      args.setNr(nr);
      args.setUser_id(user_id);
      sendBase("selectSuibi_hf", args);
    }

    public Dm_Result recv_selectSuibi_hf() throws org.apache.thrift.TException
    {
      selectSuibi_hf_result result = new selectSuibi_hf_result();
      receiveBase(result, "selectSuibi_hf");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "selectSuibi_hf failed: unknown result");
    }

    public Dm_Result deleteSuibi(String id) throws org.apache.thrift.TException
    {
      send_deleteSuibi(id);
      return recv_deleteSuibi();
    }

    public void send_deleteSuibi(String id) throws org.apache.thrift.TException
    {
      deleteSuibi_args args = new deleteSuibi_args();
      args.setId(id);
      sendBase("deleteSuibi", args);
    }

    public Dm_Result recv_deleteSuibi() throws org.apache.thrift.TException
    {
      deleteSuibi_result result = new deleteSuibi_result();
      receiveBase(result, "deleteSuibi");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSuibi failed: unknown result");
    }

    public Dm_App_TuceOne viewTuce(String validstring, String id) throws org.apache.thrift.TException
    {
      send_viewTuce(validstring, id);
      return recv_viewTuce();
    }

    public void send_viewTuce(String validstring, String id) throws org.apache.thrift.TException
    {
      viewTuce_args args = new viewTuce_args();
      args.setValidstring(validstring);
      args.setId(id);
      sendBase("viewTuce", args);
    }

    public Dm_App_TuceOne recv_viewTuce() throws org.apache.thrift.TException
    {
      viewTuce_result result = new viewTuce_result();
      receiveBase(result, "viewTuce");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "viewTuce failed: unknown result");
    }

    public Dm_App_TuceList searchTuceListByuid(String validstring, String uid, String title, String isfabu, int page, int pageSize) throws org.apache.thrift.TException
    {
      send_searchTuceListByuid(validstring, uid, title, isfabu, page, pageSize);
      return recv_searchTuceListByuid();
    }

    public void send_searchTuceListByuid(String validstring, String uid, String title, String isfabu, int page, int pageSize) throws org.apache.thrift.TException
    {
      searchTuceListByuid_args args = new searchTuceListByuid_args();
      args.setValidstring(validstring);
      args.setUid(uid);
      args.setTitle(title);
      args.setIsfabu(isfabu);
      args.setPage(page);
      args.setPageSize(pageSize);
      sendBase("searchTuceListByuid", args);
    }

    public Dm_App_TuceList recv_searchTuceListByuid() throws org.apache.thrift.TException
    {
      searchTuceListByuid_result result = new searchTuceListByuid_result();
      receiveBase(result, "searchTuceListByuid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchTuceListByuid failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void regesiter(Dm_User user, org.apache.thrift.async.AsyncMethodCallback<regesiter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      regesiter_call method_call = new regesiter_call(user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class regesiter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Dm_User user;
      public regesiter_call(Dm_User user, org.apache.thrift.async.AsyncMethodCallback<regesiter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("regesiter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        regesiter_args args = new regesiter_args();
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_User_Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_regesiter();
      }
    }

    public void login(String name, String md5, org.apache.thrift.async.AsyncMethodCallback<login_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(name, md5, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class login_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      private String md5;
      public login_call(String name, String md5, org.apache.thrift.async.AsyncMethodCallback<login_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.md5 = md5;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setName(name);
        args.setMd5(md5);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_User_Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
    }

    public void feedback(String validString, String content, org.apache.thrift.async.AsyncMethodCallback<feedback_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      feedback_call method_call = new feedback_call(validString, content, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class feedback_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validString;
      private String content;
      public feedback_call(String validString, String content, org.apache.thrift.async.AsyncMethodCallback<feedback_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validString = validString;
        this.content = content;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("feedback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        feedback_args args = new feedback_args();
        args.setValidString(validString);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_feedback();
      }
    }

    public void requestVersion(String clientType, org.apache.thrift.async.AsyncMethodCallback<requestVersion_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestVersion_call method_call = new requestVersion_call(clientType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestVersion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String clientType;
      public requestVersion_call(String clientType, org.apache.thrift.async.AsyncMethodCallback<requestVersion_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clientType = clientType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestVersion_args args = new requestVersion_args();
        args.setClientType(clientType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_Version getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestVersion();
      }
    }

    public void searchSceneryByName(String validstring, String name, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<searchSceneryByName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchSceneryByName_call method_call = new searchSceneryByName_call(validstring, name, page, pagesize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchSceneryByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String name;
      private int page;
      private int pagesize;
      public searchSceneryByName_call(String validstring, String name, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<searchSceneryByName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.name = name;
        this.page = page;
        this.pagesize = pagesize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchSceneryByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchSceneryByName_args args = new searchSceneryByName_args();
        args.setValidstring(validstring);
        args.setName(name);
        args.setPage(page);
        args.setPagesize(pagesize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_SceneryList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchSceneryByName();
      }
    }

    public void searchSceneryByCity(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<searchSceneryByCity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchSceneryByCity_call method_call = new searchSceneryByCity_call(validstring, cityName, page, pagesize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchSceneryByCity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String cityName;
      private int page;
      private int pagesize;
      public searchSceneryByCity_call(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<searchSceneryByCity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.cityName = cityName;
        this.page = page;
        this.pagesize = pagesize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchSceneryByCity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchSceneryByCity_args args = new searchSceneryByCity_args();
        args.setValidstring(validstring);
        args.setCityName(cityName);
        args.setPage(page);
        args.setPagesize(pagesize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_SceneryList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchSceneryByCity();
      }
    }

    public void searchScenerySimplifyByCity(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<searchScenerySimplifyByCity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchScenerySimplifyByCity_call method_call = new searchScenerySimplifyByCity_call(validstring, cityName, page, pagesize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchScenerySimplifyByCity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String cityName;
      private int page;
      private int pagesize;
      public searchScenerySimplifyByCity_call(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<searchScenerySimplifyByCity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.cityName = cityName;
        this.page = page;
        this.pagesize = pagesize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchScenerySimplifyByCity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchScenerySimplifyByCity_args args = new searchScenerySimplifyByCity_args();
        args.setValidstring(validstring);
        args.setCityName(cityName);
        args.setPage(page);
        args.setPagesize(pagesize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_ScenerySimplifyList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchScenerySimplifyByCity();
      }
    }

    public void searchHotSceneryByCity(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<searchHotSceneryByCity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchHotSceneryByCity_call method_call = new searchHotSceneryByCity_call(validstring, cityName, page, pagesize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchHotSceneryByCity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String cityName;
      private int page;
      private int pagesize;
      public searchHotSceneryByCity_call(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<searchHotSceneryByCity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.cityName = cityName;
        this.page = page;
        this.pagesize = pagesize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchHotSceneryByCity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchHotSceneryByCity_args args = new searchHotSceneryByCity_args();
        args.setValidstring(validstring);
        args.setCityName(cityName);
        args.setPage(page);
        args.setPagesize(pagesize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_SceneryList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchHotSceneryByCity();
      }
    }

    public void searchHotScenerySimplifyByCity(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<searchHotScenerySimplifyByCity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchHotScenerySimplifyByCity_call method_call = new searchHotScenerySimplifyByCity_call(validstring, cityName, page, pagesize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchHotScenerySimplifyByCity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String cityName;
      private int page;
      private int pagesize;
      public searchHotScenerySimplifyByCity_call(String validstring, String cityName, int page, int pagesize, org.apache.thrift.async.AsyncMethodCallback<searchHotScenerySimplifyByCity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.cityName = cityName;
        this.page = page;
        this.pagesize = pagesize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchHotScenerySimplifyByCity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchHotScenerySimplifyByCity_args args = new searchHotScenerySimplifyByCity_args();
        args.setValidstring(validstring);
        args.setCityName(cityName);
        args.setPage(page);
        args.setPagesize(pagesize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_ScenerySimplifyList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchHotScenerySimplifyByCity();
      }
    }

    public void searchSceneryNearby(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp, org.apache.thrift.async.AsyncMethodCallback<searchSceneryNearby_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchSceneryNearby_call method_call = new searchSceneryNearby_call(validstring, lng, lat, name, smallType, bigType, range, page, pagesize, isjp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchSceneryNearby_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private double lng;
      private double lat;
      private String name;
      private String smallType;
      private String bigType;
      private double range;
      private int page;
      private int pagesize;
      private boolean isjp;
      public searchSceneryNearby_call(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp, org.apache.thrift.async.AsyncMethodCallback<searchSceneryNearby_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.lng = lng;
        this.lat = lat;
        this.name = name;
        this.smallType = smallType;
        this.bigType = bigType;
        this.range = range;
        this.page = page;
        this.pagesize = pagesize;
        this.isjp = isjp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchSceneryNearby", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchSceneryNearby_args args = new searchSceneryNearby_args();
        args.setValidstring(validstring);
        args.setLng(lng);
        args.setLat(lat);
        args.setName(name);
        args.setSmallType(smallType);
        args.setBigType(bigType);
        args.setRange(range);
        args.setPage(page);
        args.setPagesize(pagesize);
        args.setIsjp(isjp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_SceneryList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchSceneryNearby();
      }
    }

    public void searchScenerySimplifyNearby(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp, org.apache.thrift.async.AsyncMethodCallback<searchScenerySimplifyNearby_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchScenerySimplifyNearby_call method_call = new searchScenerySimplifyNearby_call(validstring, lng, lat, name, smallType, bigType, range, page, pagesize, isjp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchScenerySimplifyNearby_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private double lng;
      private double lat;
      private String name;
      private String smallType;
      private String bigType;
      private double range;
      private int page;
      private int pagesize;
      private boolean isjp;
      public searchScenerySimplifyNearby_call(String validstring, double lng, double lat, String name, String smallType, String bigType, double range, int page, int pagesize, boolean isjp, org.apache.thrift.async.AsyncMethodCallback<searchScenerySimplifyNearby_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.lng = lng;
        this.lat = lat;
        this.name = name;
        this.smallType = smallType;
        this.bigType = bigType;
        this.range = range;
        this.page = page;
        this.pagesize = pagesize;
        this.isjp = isjp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchScenerySimplifyNearby", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchScenerySimplifyNearby_args args = new searchScenerySimplifyNearby_args();
        args.setValidstring(validstring);
        args.setLng(lng);
        args.setLat(lat);
        args.setName(name);
        args.setSmallType(smallType);
        args.setBigType(bigType);
        args.setRange(range);
        args.setPage(page);
        args.setPagesize(pagesize);
        args.setIsjp(isjp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_ScenerySimplifyList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchScenerySimplifyNearby();
      }
    }

    public void searchCultureScenery(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<searchCultureScenery_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchCultureScenery_call method_call = new searchCultureScenery_call(validstring, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchCultureScenery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String id;
      public searchCultureScenery_call(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<searchCultureScenery_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchCultureScenery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchCultureScenery_args args = new searchCultureScenery_args();
        args.setValidstring(validstring);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_SceneryOne getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchCultureScenery();
      }
    }

    public void getPreImageList(String validstring, org.apache.thrift.async.AsyncMethodCallback<getPreImageList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPreImageList_call method_call = new getPreImageList_call(validstring, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPreImageList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      public getPreImageList_call(String validstring, org.apache.thrift.async.AsyncMethodCallback<getPreImageList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPreImageList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPreImageList_args args = new getPreImageList_args();
        args.setValidstring(validstring);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_PreImageList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPreImageList();
      }
    }

    public void activityType(String validstring, org.apache.thrift.async.AsyncMethodCallback<activityType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activityType_call method_call = new activityType_call(validstring, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activityType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      public activityType_call(String validstring, org.apache.thrift.async.AsyncMethodCallback<activityType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activityType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activityType_args args = new activityType_args();
        args.setValidstring(validstring);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_ActivityTypeList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activityType();
      }
    }

    public void searchActivityByType(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchActivityByType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchActivityByType_call method_call = new searchActivityByType_call(validstring, typeName, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchActivityByType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String typeName;
      private int page;
      private int pageSize;
      public searchActivityByType_call(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchActivityByType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.typeName = typeName;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchActivityByType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchActivityByType_args args = new searchActivityByType_args();
        args.setValidstring(validstring);
        args.setTypeName(typeName);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_ActivityList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchActivityByType();
      }
    }

    public void searchActivitySimplifyByType(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchActivitySimplifyByType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchActivitySimplifyByType_call method_call = new searchActivitySimplifyByType_call(validstring, typeName, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchActivitySimplifyByType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String typeName;
      private int page;
      private int pageSize;
      public searchActivitySimplifyByType_call(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchActivitySimplifyByType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.typeName = typeName;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchActivitySimplifyByType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchActivitySimplifyByType_args args = new searchActivitySimplifyByType_args();
        args.setValidstring(validstring);
        args.setTypeName(typeName);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_ActivitySimplifyList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchActivitySimplifyByType();
      }
    }

    public void searchActivity(String validstring, String activityName, String initiator, String company, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchActivity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchActivity_call method_call = new searchActivity_call(validstring, activityName, initiator, company, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchActivity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String activityName;
      private String initiator;
      private String company;
      private int page;
      private int pageSize;
      public searchActivity_call(String validstring, String activityName, String initiator, String company, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchActivity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.activityName = activityName;
        this.initiator = initiator;
        this.company = company;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchActivity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchActivity_args args = new searchActivity_args();
        args.setValidstring(validstring);
        args.setActivityName(activityName);
        args.setInitiator(initiator);
        args.setCompany(company);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_ActivityList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchActivity();
      }
    }

    public void searchActivitySimplify(String validstring, String activityName, String initiator, String company, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchActivitySimplify_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchActivitySimplify_call method_call = new searchActivitySimplify_call(validstring, activityName, initiator, company, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchActivitySimplify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String activityName;
      private String initiator;
      private String company;
      private int page;
      private int pageSize;
      public searchActivitySimplify_call(String validstring, String activityName, String initiator, String company, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchActivitySimplify_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.activityName = activityName;
        this.initiator = initiator;
        this.company = company;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchActivitySimplify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchActivitySimplify_args args = new searchActivitySimplify_args();
        args.setValidstring(validstring);
        args.setActivityName(activityName);
        args.setInitiator(initiator);
        args.setCompany(company);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_ActivitySimplifyList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchActivitySimplify();
      }
    }

    public void searchHotActivitySimplify(String validstring, String hotType, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchHotActivitySimplify_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchHotActivitySimplify_call method_call = new searchHotActivitySimplify_call(validstring, hotType, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchHotActivitySimplify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String hotType;
      private int page;
      private int pageSize;
      public searchHotActivitySimplify_call(String validstring, String hotType, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchHotActivitySimplify_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.hotType = hotType;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchHotActivitySimplify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchHotActivitySimplify_args args = new searchHotActivitySimplify_args();
        args.setValidstring(validstring);
        args.setHotType(hotType);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_ActivitySimplifyList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchHotActivitySimplify();
      }
    }

    public void viewActivity(String validString, String id, org.apache.thrift.async.AsyncMethodCallback<viewActivity_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      viewActivity_call method_call = new viewActivity_call(validString, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class viewActivity_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validString;
      private String id;
      public viewActivity_call(String validString, String id, org.apache.thrift.async.AsyncMethodCallback<viewActivity_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validString = validString;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("viewActivity", org.apache.thrift.protocol.TMessageType.CALL, 0));
        viewActivity_args args = new viewActivity_args();
        args.setValidString(validString);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_ActivityOne getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_viewActivity();
      }
    }

    public void baikeType(String validstring, org.apache.thrift.async.AsyncMethodCallback<baikeType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      baikeType_call method_call = new baikeType_call(validstring, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class baikeType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      public baikeType_call(String validstring, org.apache.thrift.async.AsyncMethodCallback<baikeType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("baikeType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        baikeType_args args = new baikeType_args();
        args.setValidstring(validstring);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_BaikeTypeList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_baikeType();
      }
    }

    public void searchBaikeByType(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchBaikeByType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchBaikeByType_call method_call = new searchBaikeByType_call(validstring, typeName, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchBaikeByType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String typeName;
      private int page;
      private int pageSize;
      public searchBaikeByType_call(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchBaikeByType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.typeName = typeName;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchBaikeByType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchBaikeByType_args args = new searchBaikeByType_args();
        args.setValidstring(validstring);
        args.setTypeName(typeName);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_BaikeList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchBaikeByType();
      }
    }

    public void searchBaikeSimplifyByType(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchBaikeSimplifyByType_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchBaikeSimplifyByType_call method_call = new searchBaikeSimplifyByType_call(validstring, typeName, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchBaikeSimplifyByType_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String typeName;
      private int page;
      private int pageSize;
      public searchBaikeSimplifyByType_call(String validstring, String typeName, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchBaikeSimplifyByType_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.typeName = typeName;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchBaikeSimplifyByType", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchBaikeSimplifyByType_args args = new searchBaikeSimplifyByType_args();
        args.setValidstring(validstring);
        args.setTypeName(typeName);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_BaikeSimplifyList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchBaikeSimplifyByType();
      }
    }

    public void searchBaikeByName(String validstring, String keyWord, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchBaikeByName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchBaikeByName_call method_call = new searchBaikeByName_call(validstring, keyWord, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchBaikeByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String keyWord;
      private int page;
      private int pageSize;
      public searchBaikeByName_call(String validstring, String keyWord, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchBaikeByName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.keyWord = keyWord;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchBaikeByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchBaikeByName_args args = new searchBaikeByName_args();
        args.setValidstring(validstring);
        args.setKeyWord(keyWord);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_BaikeList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchBaikeByName();
      }
    }

    public void searchBaikeSimplifyByName(String validstring, String keyWord, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchBaikeSimplifyByName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchBaikeSimplifyByName_call method_call = new searchBaikeSimplifyByName_call(validstring, keyWord, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchBaikeSimplifyByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String keyWord;
      private int page;
      private int pageSize;
      public searchBaikeSimplifyByName_call(String validstring, String keyWord, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchBaikeSimplifyByName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.keyWord = keyWord;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchBaikeSimplifyByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchBaikeSimplifyByName_args args = new searchBaikeSimplifyByName_args();
        args.setValidstring(validstring);
        args.setKeyWord(keyWord);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_BaikeSimplifyList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchBaikeSimplifyByName();
      }
    }

    public void viewBaike(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<viewBaike_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      viewBaike_call method_call = new viewBaike_call(validstring, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class viewBaike_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String id;
      public viewBaike_call(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<viewBaike_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("viewBaike", org.apache.thrift.protocol.TMessageType.CALL, 0));
        viewBaike_args args = new viewBaike_args();
        args.setValidstring(validstring);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_BaikeOne getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_viewBaike();
      }
    }

    public void getMessage(String validstring, double lng, double lat, org.apache.thrift.async.AsyncMethodCallback<getMessage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMessage_call method_call = new getMessage_call(validstring, lng, lat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private double lng;
      private double lat;
      public getMessage_call(String validstring, double lng, double lat, org.apache.thrift.async.AsyncMethodCallback<getMessage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.lng = lng;
        this.lat = lat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMessage_args args = new getMessage_args();
        args.setValidstring(validstring);
        args.setLng(lng);
        args.setLat(lat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_MessageList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMessage();
      }
    }

    public void publishTalk(String validstring, Dm_Talk talk, org.apache.thrift.async.AsyncMethodCallback<publishTalk_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      publishTalk_call method_call = new publishTalk_call(validstring, talk, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class publishTalk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private Dm_Talk talk;
      public publishTalk_call(String validstring, Dm_Talk talk, org.apache.thrift.async.AsyncMethodCallback<publishTalk_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.talk = talk;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("publishTalk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        publishTalk_args args = new publishTalk_args();
        args.setValidstring(validstring);
        args.setTalk(talk);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_publishTalk();
      }
    }

    public void searcheSeeTalkList(String validstring, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searcheSeeTalkList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searcheSeeTalkList_call method_call = new searcheSeeTalkList_call(validstring, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searcheSeeTalkList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private int page;
      private int pageSize;
      public searcheSeeTalkList_call(String validstring, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searcheSeeTalkList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searcheSeeTalkList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searcheSeeTalkList_args args = new searcheSeeTalkList_args();
        args.setValidstring(validstring);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_SeeTalkList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searcheSeeTalkList();
      }
    }

    public void lookSeeTalk(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<lookSeeTalk_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lookSeeTalk_call method_call = new lookSeeTalk_call(validstring, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lookSeeTalk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String id;
      public lookSeeTalk_call(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<lookSeeTalk_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lookSeeTalk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lookSeeTalk_args args = new lookSeeTalk_args();
        args.setValidstring(validstring);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_SeeTalkOne getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lookSeeTalk();
      }
    }

    public void searchWatermark(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<searchWatermark_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchWatermark_call method_call = new searchWatermark_call(validstring, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchWatermark_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String id;
      public searchWatermark_call(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<searchWatermark_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchWatermark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchWatermark_args args = new searchWatermark_args();
        args.setValidstring(validstring);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_WatermarkResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchWatermark();
      }
    }

    public void modifyWatermark(String validstring, String id, String watermark, org.apache.thrift.async.AsyncMethodCallback<modifyWatermark_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyWatermark_call method_call = new modifyWatermark_call(validstring, id, watermark, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyWatermark_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String id;
      private String watermark;
      public modifyWatermark_call(String validstring, String id, String watermark, org.apache.thrift.async.AsyncMethodCallback<modifyWatermark_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.id = id;
        this.watermark = watermark;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyWatermark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyWatermark_args args = new modifyWatermark_args();
        args.setValidstring(validstring);
        args.setId(id);
        args.setWatermark(watermark);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyWatermark();
      }
    }

    public void exhibit_getInfo(String eid, org.apache.thrift.async.AsyncMethodCallback<exhibit_getInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exhibit_getInfo_call method_call = new exhibit_getInfo_call(eid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exhibit_getInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String eid;
      public exhibit_getInfo_call(String eid, org.apache.thrift.async.AsyncMethodCallback<exhibit_getInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eid = eid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exhibit_getInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exhibit_getInfo_args args = new exhibit_getInfo_args();
        args.setEid(eid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_Exhibit getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exhibit_getInfo();
      }
    }

    public void exhibit_getInfoByNum(String mid, int num, org.apache.thrift.async.AsyncMethodCallback<exhibit_getInfoByNum_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exhibit_getInfoByNum_call method_call = new exhibit_getInfoByNum_call(mid, num, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exhibit_getInfoByNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String mid;
      private int num;
      public exhibit_getInfoByNum_call(String mid, int num, org.apache.thrift.async.AsyncMethodCallback<exhibit_getInfoByNum_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mid = mid;
        this.num = num;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exhibit_getInfoByNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exhibit_getInfoByNum_args args = new exhibit_getInfoByNum_args();
        args.setMid(mid);
        args.setNum(num);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_ExhibitList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exhibit_getInfoByNum();
      }
    }

    public void suibiplList(String id, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<suibiplList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      suibiplList_call method_call = new suibiplList_call(id, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class suibiplList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private int page;
      private int pageSize;
      public suibiplList_call(String id, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<suibiplList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("suibiplList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        suibiplList_args args = new suibiplList_args();
        args.setId(id);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_suibi_pllist getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_suibiplList();
      }
    }

    public void ge_AttentionList(String id, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<ge_AttentionList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ge_AttentionList_call method_call = new ge_AttentionList_call(id, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ge_AttentionList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      private int page;
      private int pageSize;
      public ge_AttentionList_call(String id, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<ge_AttentionList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ge_AttentionList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ge_AttentionList_args args = new ge_AttentionList_args();
        args.setId(id);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_suibi_list getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ge_AttentionList();
      }
    }

    public void ge_suibiList(String userid, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<ge_suibiList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ge_suibiList_call method_call = new ge_suibiList_call(userid, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ge_suibiList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userid;
      private int page;
      private int pageSize;
      public ge_suibiList_call(String userid, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<ge_suibiList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userid = userid;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ge_suibiList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ge_suibiList_args args = new ge_suibiList_args();
        args.setUserid(userid);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_suibi_list getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ge_suibiList();
      }
    }

    public void selectSuibi(String tag, String nr, String isprivate, String img, String userid, org.apache.thrift.async.AsyncMethodCallback<selectSuibi_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectSuibi_call method_call = new selectSuibi_call(tag, nr, isprivate, img, userid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectSuibi_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tag;
      private String nr;
      private String isprivate;
      private String img;
      private String userid;
      public selectSuibi_call(String tag, String nr, String isprivate, String img, String userid, org.apache.thrift.async.AsyncMethodCallback<selectSuibi_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tag = tag;
        this.nr = nr;
        this.isprivate = isprivate;
        this.img = img;
        this.userid = userid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectSuibi", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectSuibi_args args = new selectSuibi_args();
        args.setTag(tag);
        args.setNr(nr);
        args.setIsprivate(isprivate);
        args.setImg(img);
        args.setUserid(userid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectSuibi();
      }
    }

    public void selectSuibi_zf(String sid, String tag, String userid, org.apache.thrift.async.AsyncMethodCallback<selectSuibi_zf_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectSuibi_zf_call method_call = new selectSuibi_zf_call(sid, tag, userid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectSuibi_zf_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sid;
      private String tag;
      private String userid;
      public selectSuibi_zf_call(String sid, String tag, String userid, org.apache.thrift.async.AsyncMethodCallback<selectSuibi_zf_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sid = sid;
        this.tag = tag;
        this.userid = userid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectSuibi_zf", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectSuibi_zf_args args = new selectSuibi_zf_args();
        args.setSid(sid);
        args.setTag(tag);
        args.setUserid(userid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectSuibi_zf();
      }
    }

    public void selectSuibi_hfpl(String plnr, String father_id, String user_id, String suibi_id, org.apache.thrift.async.AsyncMethodCallback<selectSuibi_hfpl_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectSuibi_hfpl_call method_call = new selectSuibi_hfpl_call(plnr, father_id, user_id, suibi_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectSuibi_hfpl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String plnr;
      private String father_id;
      private String user_id;
      private String suibi_id;
      public selectSuibi_hfpl_call(String plnr, String father_id, String user_id, String suibi_id, org.apache.thrift.async.AsyncMethodCallback<selectSuibi_hfpl_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.plnr = plnr;
        this.father_id = father_id;
        this.user_id = user_id;
        this.suibi_id = suibi_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectSuibi_hfpl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectSuibi_hfpl_args args = new selectSuibi_hfpl_args();
        args.setPlnr(plnr);
        args.setFather_id(father_id);
        args.setUser_id(user_id);
        args.setSuibi_id(suibi_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectSuibi_hfpl();
      }
    }

    public void selectSuibi_hf(String suibi_id, String nr, String user_id, org.apache.thrift.async.AsyncMethodCallback<selectSuibi_hf_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectSuibi_hf_call method_call = new selectSuibi_hf_call(suibi_id, nr, user_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectSuibi_hf_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String suibi_id;
      private String nr;
      private String user_id;
      public selectSuibi_hf_call(String suibi_id, String nr, String user_id, org.apache.thrift.async.AsyncMethodCallback<selectSuibi_hf_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.suibi_id = suibi_id;
        this.nr = nr;
        this.user_id = user_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectSuibi_hf", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectSuibi_hf_args args = new selectSuibi_hf_args();
        args.setSuibi_id(suibi_id);
        args.setNr(nr);
        args.setUser_id(user_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_selectSuibi_hf();
      }
    }

    public void deleteSuibi(String id, org.apache.thrift.async.AsyncMethodCallback<deleteSuibi_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSuibi_call method_call = new deleteSuibi_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSuibi_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String id;
      public deleteSuibi_call(String id, org.apache.thrift.async.AsyncMethodCallback<deleteSuibi_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSuibi", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSuibi_args args = new deleteSuibi_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSuibi();
      }
    }

    public void viewTuce(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<viewTuce_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      viewTuce_call method_call = new viewTuce_call(validstring, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class viewTuce_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String id;
      public viewTuce_call(String validstring, String id, org.apache.thrift.async.AsyncMethodCallback<viewTuce_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("viewTuce", org.apache.thrift.protocol.TMessageType.CALL, 0));
        viewTuce_args args = new viewTuce_args();
        args.setValidstring(validstring);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_App_TuceOne getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_viewTuce();
      }
    }

    public void searchTuceListByuid(String validstring, String uid, String title, String isfabu, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchTuceListByuid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchTuceListByuid_call method_call = new searchTuceListByuid_call(validstring, uid, title, isfabu, page, pageSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchTuceListByuid_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String validstring;
      private String uid;
      private String title;
      private String isfabu;
      private int page;
      private int pageSize;
      public searchTuceListByuid_call(String validstring, String uid, String title, String isfabu, int page, int pageSize, org.apache.thrift.async.AsyncMethodCallback<searchTuceListByuid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.validstring = validstring;
        this.uid = uid;
        this.title = title;
        this.isfabu = isfabu;
        this.page = page;
        this.pageSize = pageSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchTuceListByuid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchTuceListByuid_args args = new searchTuceListByuid_args();
        args.setValidstring(validstring);
        args.setUid(uid);
        args.setTitle(title);
        args.setIsfabu(isfabu);
        args.setPage(page);
        args.setPageSize(pageSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dm_App_TuceList getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchTuceListByuid();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("regesiter", new regesiter());
      processMap.put("login", new login());
      processMap.put("feedback", new feedback());
      processMap.put("requestVersion", new requestVersion());
      processMap.put("searchSceneryByName", new searchSceneryByName());
      processMap.put("searchSceneryByCity", new searchSceneryByCity());
      processMap.put("searchScenerySimplifyByCity", new searchScenerySimplifyByCity());
      processMap.put("searchHotSceneryByCity", new searchHotSceneryByCity());
      processMap.put("searchHotScenerySimplifyByCity", new searchHotScenerySimplifyByCity());
      processMap.put("searchSceneryNearby", new searchSceneryNearby());
      processMap.put("searchScenerySimplifyNearby", new searchScenerySimplifyNearby());
      processMap.put("searchCultureScenery", new searchCultureScenery());
      processMap.put("getPreImageList", new getPreImageList());
      processMap.put("activityType", new activityType());
      processMap.put("searchActivityByType", new searchActivityByType());
      processMap.put("searchActivitySimplifyByType", new searchActivitySimplifyByType());
      processMap.put("searchActivity", new searchActivity());
      processMap.put("searchActivitySimplify", new searchActivitySimplify());
      processMap.put("searchHotActivitySimplify", new searchHotActivitySimplify());
      processMap.put("viewActivity", new viewActivity());
      processMap.put("baikeType", new baikeType());
      processMap.put("searchBaikeByType", new searchBaikeByType());
      processMap.put("searchBaikeSimplifyByType", new searchBaikeSimplifyByType());
      processMap.put("searchBaikeByName", new searchBaikeByName());
      processMap.put("searchBaikeSimplifyByName", new searchBaikeSimplifyByName());
      processMap.put("viewBaike", new viewBaike());
      processMap.put("getMessage", new getMessage());
      processMap.put("publishTalk", new publishTalk());
      processMap.put("searcheSeeTalkList", new searcheSeeTalkList());
      processMap.put("lookSeeTalk", new lookSeeTalk());
      processMap.put("searchWatermark", new searchWatermark());
      processMap.put("modifyWatermark", new modifyWatermark());
      processMap.put("exhibit_getInfo", new exhibit_getInfo());
      processMap.put("exhibit_getInfoByNum", new exhibit_getInfoByNum());
      processMap.put("suibiplList", new suibiplList());
      processMap.put("ge_AttentionList", new ge_AttentionList());
      processMap.put("ge_suibiList", new ge_suibiList());
      processMap.put("selectSuibi", new selectSuibi());
      processMap.put("selectSuibi_zf", new selectSuibi_zf());
      processMap.put("selectSuibi_hfpl", new selectSuibi_hfpl());
      processMap.put("selectSuibi_hf", new selectSuibi_hf());
      processMap.put("deleteSuibi", new deleteSuibi());
      processMap.put("viewTuce", new viewTuce());
      processMap.put("searchTuceListByuid", new searchTuceListByuid());
      return processMap;
    }

    public static class regesiter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, regesiter_args> {
      public regesiter() {
        super("regesiter");
      }

      public regesiter_args getEmptyArgsInstance() {
        return new regesiter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public regesiter_result getResult(I iface, regesiter_args args) throws org.apache.thrift.TException {
        regesiter_result result = new regesiter_result();
        result.success = iface.regesiter(args.user);
        return result;
      }
    }

    public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
        login_result result = new login_result();
        result.success = iface.login(args.name, args.md5);
        return result;
      }
    }

    public static class feedback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, feedback_args> {
      public feedback() {
        super("feedback");
      }

      public feedback_args getEmptyArgsInstance() {
        return new feedback_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public feedback_result getResult(I iface, feedback_args args) throws org.apache.thrift.TException {
        feedback_result result = new feedback_result();
        result.success = iface.feedback(args.validString, args.content);
        return result;
      }
    }

    public static class requestVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestVersion_args> {
      public requestVersion() {
        super("requestVersion");
      }

      public requestVersion_args getEmptyArgsInstance() {
        return new requestVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public requestVersion_result getResult(I iface, requestVersion_args args) throws org.apache.thrift.TException {
        requestVersion_result result = new requestVersion_result();
        result.success = iface.requestVersion(args.clientType);
        return result;
      }
    }

    public static class searchSceneryByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchSceneryByName_args> {
      public searchSceneryByName() {
        super("searchSceneryByName");
      }

      public searchSceneryByName_args getEmptyArgsInstance() {
        return new searchSceneryByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchSceneryByName_result getResult(I iface, searchSceneryByName_args args) throws org.apache.thrift.TException {
        searchSceneryByName_result result = new searchSceneryByName_result();
        result.success = iface.searchSceneryByName(args.validstring, args.name, args.page, args.pagesize);
        return result;
      }
    }

    public static class searchSceneryByCity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchSceneryByCity_args> {
      public searchSceneryByCity() {
        super("searchSceneryByCity");
      }

      public searchSceneryByCity_args getEmptyArgsInstance() {
        return new searchSceneryByCity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchSceneryByCity_result getResult(I iface, searchSceneryByCity_args args) throws org.apache.thrift.TException {
        searchSceneryByCity_result result = new searchSceneryByCity_result();
        result.success = iface.searchSceneryByCity(args.validstring, args.cityName, args.page, args.pagesize);
        return result;
      }
    }

    public static class searchScenerySimplifyByCity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchScenerySimplifyByCity_args> {
      public searchScenerySimplifyByCity() {
        super("searchScenerySimplifyByCity");
      }

      public searchScenerySimplifyByCity_args getEmptyArgsInstance() {
        return new searchScenerySimplifyByCity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchScenerySimplifyByCity_result getResult(I iface, searchScenerySimplifyByCity_args args) throws org.apache.thrift.TException {
        searchScenerySimplifyByCity_result result = new searchScenerySimplifyByCity_result();
        result.success = iface.searchScenerySimplifyByCity(args.validstring, args.cityName, args.page, args.pagesize);
        return result;
      }
    }

    public static class searchHotSceneryByCity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchHotSceneryByCity_args> {
      public searchHotSceneryByCity() {
        super("searchHotSceneryByCity");
      }

      public searchHotSceneryByCity_args getEmptyArgsInstance() {
        return new searchHotSceneryByCity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchHotSceneryByCity_result getResult(I iface, searchHotSceneryByCity_args args) throws org.apache.thrift.TException {
        searchHotSceneryByCity_result result = new searchHotSceneryByCity_result();
        result.success = iface.searchHotSceneryByCity(args.validstring, args.cityName, args.page, args.pagesize);
        return result;
      }
    }

    public static class searchHotScenerySimplifyByCity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchHotScenerySimplifyByCity_args> {
      public searchHotScenerySimplifyByCity() {
        super("searchHotScenerySimplifyByCity");
      }

      public searchHotScenerySimplifyByCity_args getEmptyArgsInstance() {
        return new searchHotScenerySimplifyByCity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchHotScenerySimplifyByCity_result getResult(I iface, searchHotScenerySimplifyByCity_args args) throws org.apache.thrift.TException {
        searchHotScenerySimplifyByCity_result result = new searchHotScenerySimplifyByCity_result();
        result.success = iface.searchHotScenerySimplifyByCity(args.validstring, args.cityName, args.page, args.pagesize);
        return result;
      }
    }

    public static class searchSceneryNearby<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchSceneryNearby_args> {
      public searchSceneryNearby() {
        super("searchSceneryNearby");
      }

      public searchSceneryNearby_args getEmptyArgsInstance() {
        return new searchSceneryNearby_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchSceneryNearby_result getResult(I iface, searchSceneryNearby_args args) throws org.apache.thrift.TException {
        searchSceneryNearby_result result = new searchSceneryNearby_result();
        result.success = iface.searchSceneryNearby(args.validstring, args.lng, args.lat, args.name, args.smallType, args.bigType, args.range, args.page, args.pagesize, args.isjp);
        return result;
      }
    }

    public static class searchScenerySimplifyNearby<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchScenerySimplifyNearby_args> {
      public searchScenerySimplifyNearby() {
        super("searchScenerySimplifyNearby");
      }

      public searchScenerySimplifyNearby_args getEmptyArgsInstance() {
        return new searchScenerySimplifyNearby_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchScenerySimplifyNearby_result getResult(I iface, searchScenerySimplifyNearby_args args) throws org.apache.thrift.TException {
        searchScenerySimplifyNearby_result result = new searchScenerySimplifyNearby_result();
        result.success = iface.searchScenerySimplifyNearby(args.validstring, args.lng, args.lat, args.name, args.smallType, args.bigType, args.range, args.page, args.pagesize, args.isjp);
        return result;
      }
    }

    public static class searchCultureScenery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchCultureScenery_args> {
      public searchCultureScenery() {
        super("searchCultureScenery");
      }

      public searchCultureScenery_args getEmptyArgsInstance() {
        return new searchCultureScenery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchCultureScenery_result getResult(I iface, searchCultureScenery_args args) throws org.apache.thrift.TException {
        searchCultureScenery_result result = new searchCultureScenery_result();
        result.success = iface.searchCultureScenery(args.validstring, args.id);
        return result;
      }
    }

    public static class getPreImageList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPreImageList_args> {
      public getPreImageList() {
        super("getPreImageList");
      }

      public getPreImageList_args getEmptyArgsInstance() {
        return new getPreImageList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPreImageList_result getResult(I iface, getPreImageList_args args) throws org.apache.thrift.TException {
        getPreImageList_result result = new getPreImageList_result();
        result.success = iface.getPreImageList(args.validstring);
        return result;
      }
    }

    public static class activityType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activityType_args> {
      public activityType() {
        super("activityType");
      }

      public activityType_args getEmptyArgsInstance() {
        return new activityType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activityType_result getResult(I iface, activityType_args args) throws org.apache.thrift.TException {
        activityType_result result = new activityType_result();
        result.success = iface.activityType(args.validstring);
        return result;
      }
    }

    public static class searchActivityByType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchActivityByType_args> {
      public searchActivityByType() {
        super("searchActivityByType");
      }

      public searchActivityByType_args getEmptyArgsInstance() {
        return new searchActivityByType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchActivityByType_result getResult(I iface, searchActivityByType_args args) throws org.apache.thrift.TException {
        searchActivityByType_result result = new searchActivityByType_result();
        result.success = iface.searchActivityByType(args.validstring, args.typeName, args.page, args.pageSize);
        return result;
      }
    }

    public static class searchActivitySimplifyByType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchActivitySimplifyByType_args> {
      public searchActivitySimplifyByType() {
        super("searchActivitySimplifyByType");
      }

      public searchActivitySimplifyByType_args getEmptyArgsInstance() {
        return new searchActivitySimplifyByType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchActivitySimplifyByType_result getResult(I iface, searchActivitySimplifyByType_args args) throws org.apache.thrift.TException {
        searchActivitySimplifyByType_result result = new searchActivitySimplifyByType_result();
        result.success = iface.searchActivitySimplifyByType(args.validstring, args.typeName, args.page, args.pageSize);
        return result;
      }
    }

    public static class searchActivity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchActivity_args> {
      public searchActivity() {
        super("searchActivity");
      }

      public searchActivity_args getEmptyArgsInstance() {
        return new searchActivity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchActivity_result getResult(I iface, searchActivity_args args) throws org.apache.thrift.TException {
        searchActivity_result result = new searchActivity_result();
        result.success = iface.searchActivity(args.validstring, args.activityName, args.initiator, args.company, args.page, args.pageSize);
        return result;
      }
    }

    public static class searchActivitySimplify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchActivitySimplify_args> {
      public searchActivitySimplify() {
        super("searchActivitySimplify");
      }

      public searchActivitySimplify_args getEmptyArgsInstance() {
        return new searchActivitySimplify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchActivitySimplify_result getResult(I iface, searchActivitySimplify_args args) throws org.apache.thrift.TException {
        searchActivitySimplify_result result = new searchActivitySimplify_result();
        result.success = iface.searchActivitySimplify(args.validstring, args.activityName, args.initiator, args.company, args.page, args.pageSize);
        return result;
      }
    }

    public static class searchHotActivitySimplify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchHotActivitySimplify_args> {
      public searchHotActivitySimplify() {
        super("searchHotActivitySimplify");
      }

      public searchHotActivitySimplify_args getEmptyArgsInstance() {
        return new searchHotActivitySimplify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchHotActivitySimplify_result getResult(I iface, searchHotActivitySimplify_args args) throws org.apache.thrift.TException {
        searchHotActivitySimplify_result result = new searchHotActivitySimplify_result();
        result.success = iface.searchHotActivitySimplify(args.validstring, args.hotType, args.page, args.pageSize);
        return result;
      }
    }

    public static class viewActivity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, viewActivity_args> {
      public viewActivity() {
        super("viewActivity");
      }

      public viewActivity_args getEmptyArgsInstance() {
        return new viewActivity_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public viewActivity_result getResult(I iface, viewActivity_args args) throws org.apache.thrift.TException {
        viewActivity_result result = new viewActivity_result();
        result.success = iface.viewActivity(args.validString, args.id);
        return result;
      }
    }

    public static class baikeType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, baikeType_args> {
      public baikeType() {
        super("baikeType");
      }

      public baikeType_args getEmptyArgsInstance() {
        return new baikeType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public baikeType_result getResult(I iface, baikeType_args args) throws org.apache.thrift.TException {
        baikeType_result result = new baikeType_result();
        result.success = iface.baikeType(args.validstring);
        return result;
      }
    }

    public static class searchBaikeByType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchBaikeByType_args> {
      public searchBaikeByType() {
        super("searchBaikeByType");
      }

      public searchBaikeByType_args getEmptyArgsInstance() {
        return new searchBaikeByType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchBaikeByType_result getResult(I iface, searchBaikeByType_args args) throws org.apache.thrift.TException {
        searchBaikeByType_result result = new searchBaikeByType_result();
        result.success = iface.searchBaikeByType(args.validstring, args.typeName, args.page, args.pageSize);
        return result;
      }
    }

    public static class searchBaikeSimplifyByType<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchBaikeSimplifyByType_args> {
      public searchBaikeSimplifyByType() {
        super("searchBaikeSimplifyByType");
      }

      public searchBaikeSimplifyByType_args getEmptyArgsInstance() {
        return new searchBaikeSimplifyByType_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchBaikeSimplifyByType_result getResult(I iface, searchBaikeSimplifyByType_args args) throws org.apache.thrift.TException {
        searchBaikeSimplifyByType_result result = new searchBaikeSimplifyByType_result();
        result.success = iface.searchBaikeSimplifyByType(args.validstring, args.typeName, args.page, args.pageSize);
        return result;
      }
    }

    public static class searchBaikeByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchBaikeByName_args> {
      public searchBaikeByName() {
        super("searchBaikeByName");
      }

      public searchBaikeByName_args getEmptyArgsInstance() {
        return new searchBaikeByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchBaikeByName_result getResult(I iface, searchBaikeByName_args args) throws org.apache.thrift.TException {
        searchBaikeByName_result result = new searchBaikeByName_result();
        result.success = iface.searchBaikeByName(args.validstring, args.keyWord, args.page, args.pageSize);
        return result;
      }
    }

    public static class searchBaikeSimplifyByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchBaikeSimplifyByName_args> {
      public searchBaikeSimplifyByName() {
        super("searchBaikeSimplifyByName");
      }

      public searchBaikeSimplifyByName_args getEmptyArgsInstance() {
        return new searchBaikeSimplifyByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchBaikeSimplifyByName_result getResult(I iface, searchBaikeSimplifyByName_args args) throws org.apache.thrift.TException {
        searchBaikeSimplifyByName_result result = new searchBaikeSimplifyByName_result();
        result.success = iface.searchBaikeSimplifyByName(args.validstring, args.keyWord, args.page, args.pageSize);
        return result;
      }
    }

    public static class viewBaike<I extends Iface> extends org.apache.thrift.ProcessFunction<I, viewBaike_args> {
      public viewBaike() {
        super("viewBaike");
      }

      public viewBaike_args getEmptyArgsInstance() {
        return new viewBaike_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public viewBaike_result getResult(I iface, viewBaike_args args) throws org.apache.thrift.TException {
        viewBaike_result result = new viewBaike_result();
        result.success = iface.viewBaike(args.validstring, args.id);
        return result;
      }
    }

    public static class getMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMessage_args> {
      public getMessage() {
        super("getMessage");
      }

      public getMessage_args getEmptyArgsInstance() {
        return new getMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMessage_result getResult(I iface, getMessage_args args) throws org.apache.thrift.TException {
        getMessage_result result = new getMessage_result();
        result.success = iface.getMessage(args.validstring, args.lng, args.lat);
        return result;
      }
    }

    public static class publishTalk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, publishTalk_args> {
      public publishTalk() {
        super("publishTalk");
      }

      public publishTalk_args getEmptyArgsInstance() {
        return new publishTalk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public publishTalk_result getResult(I iface, publishTalk_args args) throws org.apache.thrift.TException {
        publishTalk_result result = new publishTalk_result();
        result.success = iface.publishTalk(args.validstring, args.talk);
        return result;
      }
    }

    public static class searcheSeeTalkList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searcheSeeTalkList_args> {
      public searcheSeeTalkList() {
        super("searcheSeeTalkList");
      }

      public searcheSeeTalkList_args getEmptyArgsInstance() {
        return new searcheSeeTalkList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searcheSeeTalkList_result getResult(I iface, searcheSeeTalkList_args args) throws org.apache.thrift.TException {
        searcheSeeTalkList_result result = new searcheSeeTalkList_result();
        result.success = iface.searcheSeeTalkList(args.validstring, args.page, args.pageSize);
        return result;
      }
    }

    public static class lookSeeTalk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lookSeeTalk_args> {
      public lookSeeTalk() {
        super("lookSeeTalk");
      }

      public lookSeeTalk_args getEmptyArgsInstance() {
        return new lookSeeTalk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lookSeeTalk_result getResult(I iface, lookSeeTalk_args args) throws org.apache.thrift.TException {
        lookSeeTalk_result result = new lookSeeTalk_result();
        result.success = iface.lookSeeTalk(args.validstring, args.id);
        return result;
      }
    }

    public static class searchWatermark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchWatermark_args> {
      public searchWatermark() {
        super("searchWatermark");
      }

      public searchWatermark_args getEmptyArgsInstance() {
        return new searchWatermark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchWatermark_result getResult(I iface, searchWatermark_args args) throws org.apache.thrift.TException {
        searchWatermark_result result = new searchWatermark_result();
        result.success = iface.searchWatermark(args.validstring, args.id);
        return result;
      }
    }

    public static class modifyWatermark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyWatermark_args> {
      public modifyWatermark() {
        super("modifyWatermark");
      }

      public modifyWatermark_args getEmptyArgsInstance() {
        return new modifyWatermark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modifyWatermark_result getResult(I iface, modifyWatermark_args args) throws org.apache.thrift.TException {
        modifyWatermark_result result = new modifyWatermark_result();
        result.success = iface.modifyWatermark(args.validstring, args.id, args.watermark);
        return result;
      }
    }

    public static class exhibit_getInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exhibit_getInfo_args> {
      public exhibit_getInfo() {
        super("exhibit_getInfo");
      }

      public exhibit_getInfo_args getEmptyArgsInstance() {
        return new exhibit_getInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exhibit_getInfo_result getResult(I iface, exhibit_getInfo_args args) throws org.apache.thrift.TException {
        exhibit_getInfo_result result = new exhibit_getInfo_result();
        result.success = iface.exhibit_getInfo(args.eid);
        return result;
      }
    }

    public static class exhibit_getInfoByNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exhibit_getInfoByNum_args> {
      public exhibit_getInfoByNum() {
        super("exhibit_getInfoByNum");
      }

      public exhibit_getInfoByNum_args getEmptyArgsInstance() {
        return new exhibit_getInfoByNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exhibit_getInfoByNum_result getResult(I iface, exhibit_getInfoByNum_args args) throws org.apache.thrift.TException {
        exhibit_getInfoByNum_result result = new exhibit_getInfoByNum_result();
        result.success = iface.exhibit_getInfoByNum(args.mid, args.num);
        return result;
      }
    }

    public static class suibiplList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, suibiplList_args> {
      public suibiplList() {
        super("suibiplList");
      }

      public suibiplList_args getEmptyArgsInstance() {
        return new suibiplList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public suibiplList_result getResult(I iface, suibiplList_args args) throws org.apache.thrift.TException {
        suibiplList_result result = new suibiplList_result();
        result.success = iface.suibiplList(args.id, args.page, args.pageSize);
        return result;
      }
    }

    public static class ge_AttentionList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ge_AttentionList_args> {
      public ge_AttentionList() {
        super("ge_AttentionList");
      }

      public ge_AttentionList_args getEmptyArgsInstance() {
        return new ge_AttentionList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ge_AttentionList_result getResult(I iface, ge_AttentionList_args args) throws org.apache.thrift.TException {
        ge_AttentionList_result result = new ge_AttentionList_result();
        result.success = iface.ge_AttentionList(args.id, args.page, args.pageSize);
        return result;
      }
    }

    public static class ge_suibiList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ge_suibiList_args> {
      public ge_suibiList() {
        super("ge_suibiList");
      }

      public ge_suibiList_args getEmptyArgsInstance() {
        return new ge_suibiList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ge_suibiList_result getResult(I iface, ge_suibiList_args args) throws org.apache.thrift.TException {
        ge_suibiList_result result = new ge_suibiList_result();
        result.success = iface.ge_suibiList(args.userid, args.page, args.pageSize);
        return result;
      }
    }

    public static class selectSuibi<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectSuibi_args> {
      public selectSuibi() {
        super("selectSuibi");
      }

      public selectSuibi_args getEmptyArgsInstance() {
        return new selectSuibi_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectSuibi_result getResult(I iface, selectSuibi_args args) throws org.apache.thrift.TException {
        selectSuibi_result result = new selectSuibi_result();
        result.success = iface.selectSuibi(args.tag, args.nr, args.isprivate, args.img, args.userid);
        return result;
      }
    }

    public static class selectSuibi_zf<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectSuibi_zf_args> {
      public selectSuibi_zf() {
        super("selectSuibi_zf");
      }

      public selectSuibi_zf_args getEmptyArgsInstance() {
        return new selectSuibi_zf_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectSuibi_zf_result getResult(I iface, selectSuibi_zf_args args) throws org.apache.thrift.TException {
        selectSuibi_zf_result result = new selectSuibi_zf_result();
        result.success = iface.selectSuibi_zf(args.sid, args.tag, args.userid);
        return result;
      }
    }

    public static class selectSuibi_hfpl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectSuibi_hfpl_args> {
      public selectSuibi_hfpl() {
        super("selectSuibi_hfpl");
      }

      public selectSuibi_hfpl_args getEmptyArgsInstance() {
        return new selectSuibi_hfpl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectSuibi_hfpl_result getResult(I iface, selectSuibi_hfpl_args args) throws org.apache.thrift.TException {
        selectSuibi_hfpl_result result = new selectSuibi_hfpl_result();
        result.success = iface.selectSuibi_hfpl(args.plnr, args.father_id, args.user_id, args.suibi_id);
        return result;
      }
    }

    public static class selectSuibi_hf<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectSuibi_hf_args> {
      public selectSuibi_hf() {
        super("selectSuibi_hf");
      }

      public selectSuibi_hf_args getEmptyArgsInstance() {
        return new selectSuibi_hf_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public selectSuibi_hf_result getResult(I iface, selectSuibi_hf_args args) throws org.apache.thrift.TException {
        selectSuibi_hf_result result = new selectSuibi_hf_result();
        result.success = iface.selectSuibi_hf(args.suibi_id, args.nr, args.user_id);
        return result;
      }
    }

    public static class deleteSuibi<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSuibi_args> {
      public deleteSuibi() {
        super("deleteSuibi");
      }

      public deleteSuibi_args getEmptyArgsInstance() {
        return new deleteSuibi_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteSuibi_result getResult(I iface, deleteSuibi_args args) throws org.apache.thrift.TException {
        deleteSuibi_result result = new deleteSuibi_result();
        result.success = iface.deleteSuibi(args.id);
        return result;
      }
    }

    public static class viewTuce<I extends Iface> extends org.apache.thrift.ProcessFunction<I, viewTuce_args> {
      public viewTuce() {
        super("viewTuce");
      }

      public viewTuce_args getEmptyArgsInstance() {
        return new viewTuce_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public viewTuce_result getResult(I iface, viewTuce_args args) throws org.apache.thrift.TException {
        viewTuce_result result = new viewTuce_result();
        result.success = iface.viewTuce(args.validstring, args.id);
        return result;
      }
    }

    public static class searchTuceListByuid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchTuceListByuid_args> {
      public searchTuceListByuid() {
        super("searchTuceListByuid");
      }

      public searchTuceListByuid_args getEmptyArgsInstance() {
        return new searchTuceListByuid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchTuceListByuid_result getResult(I iface, searchTuceListByuid_args args) throws org.apache.thrift.TException {
        searchTuceListByuid_result result = new searchTuceListByuid_result();
        result.success = iface.searchTuceListByuid(args.validstring, args.uid, args.title, args.isfabu, args.page, args.pageSize);
        return result;
      }
    }

  }

  public static class regesiter_args implements org.apache.thrift.TBase<regesiter_args, regesiter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regesiter_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regesiter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regesiter_argsTupleSchemeFactory());
    }

    public Dm_User user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_User.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regesiter_args.class, metaDataMap);
    }

    public regesiter_args() {
    }

    public regesiter_args(
      Dm_User user)
    {
      this();
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regesiter_args(regesiter_args other) {
      if (other.isSetUser()) {
        this.user = new Dm_User(other.user);
      }
    }

    public regesiter_args deepCopy() {
      return new regesiter_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
    }

    public Dm_User getUser() {
      return this.user;
    }

    public regesiter_args setUser(Dm_User user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((Dm_User)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regesiter_args)
        return this.equals((regesiter_args)that);
      return false;
    }

    public boolean equals(regesiter_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(regesiter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      regesiter_args typedOther = (regesiter_args)other;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regesiter_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regesiter_argsStandardSchemeFactory implements SchemeFactory {
      public regesiter_argsStandardScheme getScheme() {
        return new regesiter_argsStandardScheme();
      }
    }

    private static class regesiter_argsStandardScheme extends StandardScheme<regesiter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regesiter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new Dm_User();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regesiter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regesiter_argsTupleSchemeFactory implements SchemeFactory {
      public regesiter_argsTupleScheme getScheme() {
        return new regesiter_argsTupleScheme();
      }
    }

    private static class regesiter_argsTupleScheme extends TupleScheme<regesiter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regesiter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regesiter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user = new Dm_User();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class regesiter_result implements org.apache.thrift.TBase<regesiter_result, regesiter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("regesiter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new regesiter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new regesiter_resultTupleSchemeFactory());
    }

    public Dm_User_Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_User_Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(regesiter_result.class, metaDataMap);
    }

    public regesiter_result() {
    }

    public regesiter_result(
      Dm_User_Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public regesiter_result(regesiter_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_User_Result(other.success);
      }
    }

    public regesiter_result deepCopy() {
      return new regesiter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_User_Result getSuccess() {
      return this.success;
    }

    public regesiter_result setSuccess(Dm_User_Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_User_Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof regesiter_result)
        return this.equals((regesiter_result)that);
      return false;
    }

    public boolean equals(regesiter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(regesiter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      regesiter_result typedOther = (regesiter_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("regesiter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class regesiter_resultStandardSchemeFactory implements SchemeFactory {
      public regesiter_resultStandardScheme getScheme() {
        return new regesiter_resultStandardScheme();
      }
    }

    private static class regesiter_resultStandardScheme extends StandardScheme<regesiter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, regesiter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_User_Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, regesiter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class regesiter_resultTupleSchemeFactory implements SchemeFactory {
      public regesiter_resultTupleScheme getScheme() {
        return new regesiter_resultTupleScheme();
      }
    }

    private static class regesiter_resultTupleScheme extends TupleScheme<regesiter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, regesiter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, regesiter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_User_Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("md5", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_argsTupleSchemeFactory());
    }

    public String name; // required
    public String md5; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      MD5((short)2, "md5");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // MD5
            return MD5;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("md5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
    }

    public login_args() {
    }

    public login_args(
      String name,
      String md5)
    {
      this();
      this.name = name;
      this.md5 = md5;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_args(login_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetMd5()) {
        this.md5 = other.md5;
      }
    }

    public login_args deepCopy() {
      return new login_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.md5 = null;
    }

    public String getName() {
      return this.name;
    }

    public login_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getMd5() {
      return this.md5;
    }

    public login_args setMd5(String md5) {
      this.md5 = md5;
      return this;
    }

    public void unsetMd5() {
      this.md5 = null;
    }

    /** Returns true if field md5 is set (has been assigned a value) and false otherwise */
    public boolean isSetMd5() {
      return this.md5 != null;
    }

    public void setMd5IsSet(boolean value) {
      if (!value) {
        this.md5 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case MD5:
        if (value == null) {
          unsetMd5();
        } else {
          setMd5((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case MD5:
        return getMd5();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case MD5:
        return isSetMd5();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_args)
        return this.equals((login_args)that);
      return false;
    }

    public boolean equals(login_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_md5 = true && this.isSetMd5();
      boolean that_present_md5 = true && that.isSetMd5();
      if (this_present_md5 || that_present_md5) {
        if (!(this_present_md5 && that_present_md5))
          return false;
        if (!this.md5.equals(that.md5))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      login_args typedOther = (login_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMd5()).compareTo(typedOther.isSetMd5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMd5()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5, typedOther.md5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("md5:");
      if (this.md5 == null) {
        sb.append("null");
      } else {
        sb.append(this.md5);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_argsStandardSchemeFactory implements SchemeFactory {
      public login_argsStandardScheme getScheme() {
        return new login_argsStandardScheme();
      }
    }

    private static class login_argsStandardScheme extends StandardScheme<login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MD5
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.md5 = iprot.readString();
                struct.setMd5IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.md5 != null) {
          oprot.writeFieldBegin(MD5_FIELD_DESC);
          oprot.writeString(struct.md5);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_argsTupleSchemeFactory implements SchemeFactory {
      public login_argsTupleScheme getScheme() {
        return new login_argsTupleScheme();
      }
    }

    private static class login_argsTupleScheme extends TupleScheme<login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetMd5()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetMd5()) {
          oprot.writeString(struct.md5);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.md5 = iprot.readString();
          struct.setMd5IsSet(true);
        }
      }
    }

  }

  public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_resultTupleSchemeFactory());
    }

    public Dm_User_Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_User_Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
    }

    public login_result() {
    }

    public login_result(
      Dm_User_Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_result(login_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_User_Result(other.success);
      }
    }

    public login_result deepCopy() {
      return new login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_User_Result getSuccess() {
      return this.success;
    }

    public login_result setSuccess(Dm_User_Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_User_Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_result)
        return this.equals((login_result)that);
      return false;
    }

    public boolean equals(login_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      login_result typedOther = (login_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_resultStandardSchemeFactory implements SchemeFactory {
      public login_resultStandardScheme getScheme() {
        return new login_resultStandardScheme();
      }
    }

    private static class login_resultStandardScheme extends StandardScheme<login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_User_Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_resultTupleSchemeFactory implements SchemeFactory {
      public login_resultTupleScheme getScheme() {
        return new login_resultTupleScheme();
      }
    }

    private static class login_resultTupleScheme extends TupleScheme<login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_User_Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class feedback_args implements org.apache.thrift.TBase<feedback_args, feedback_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("feedback_args");

    private static final org.apache.thrift.protocol.TField VALID_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new feedback_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new feedback_argsTupleSchemeFactory());
    }

    public String validString; // required
    public String content; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALID_STRING((short)1, "validString"),
      CONTENT((short)2, "content");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALID_STRING
            return VALID_STRING;
          case 2: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALID_STRING, new org.apache.thrift.meta_data.FieldMetaData("validString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(feedback_args.class, metaDataMap);
    }

    public feedback_args() {
    }

    public feedback_args(
      String validString,
      String content)
    {
      this();
      this.validString = validString;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public feedback_args(feedback_args other) {
      if (other.isSetValidString()) {
        this.validString = other.validString;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
    }

    public feedback_args deepCopy() {
      return new feedback_args(this);
    }

    @Override
    public void clear() {
      this.validString = null;
      this.content = null;
    }

    public String getValidString() {
      return this.validString;
    }

    public feedback_args setValidString(String validString) {
      this.validString = validString;
      return this;
    }

    public void unsetValidString() {
      this.validString = null;
    }

    /** Returns true if field validString is set (has been assigned a value) and false otherwise */
    public boolean isSetValidString() {
      return this.validString != null;
    }

    public void setValidStringIsSet(boolean value) {
      if (!value) {
        this.validString = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public feedback_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALID_STRING:
        if (value == null) {
          unsetValidString();
        } else {
          setValidString((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALID_STRING:
        return getValidString();

      case CONTENT:
        return getContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALID_STRING:
        return isSetValidString();
      case CONTENT:
        return isSetContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof feedback_args)
        return this.equals((feedback_args)that);
      return false;
    }

    public boolean equals(feedback_args that) {
      if (that == null)
        return false;

      boolean this_present_validString = true && this.isSetValidString();
      boolean that_present_validString = true && that.isSetValidString();
      if (this_present_validString || that_present_validString) {
        if (!(this_present_validString && that_present_validString))
          return false;
        if (!this.validString.equals(that.validString))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(feedback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      feedback_args typedOther = (feedback_args)other;

      lastComparison = Boolean.valueOf(isSetValidString()).compareTo(typedOther.isSetValidString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validString, typedOther.validString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("feedback_args(");
      boolean first = true;

      sb.append("validString:");
      if (this.validString == null) {
        sb.append("null");
      } else {
        sb.append(this.validString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class feedback_argsStandardSchemeFactory implements SchemeFactory {
      public feedback_argsStandardScheme getScheme() {
        return new feedback_argsStandardScheme();
      }
    }

    private static class feedback_argsStandardScheme extends StandardScheme<feedback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, feedback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALID_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validString = iprot.readString();
                struct.setValidStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, feedback_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validString != null) {
          oprot.writeFieldBegin(VALID_STRING_FIELD_DESC);
          oprot.writeString(struct.validString);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class feedback_argsTupleSchemeFactory implements SchemeFactory {
      public feedback_argsTupleScheme getScheme() {
        return new feedback_argsTupleScheme();
      }
    }

    private static class feedback_argsTupleScheme extends TupleScheme<feedback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, feedback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidString()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetValidString()) {
          oprot.writeString(struct.validString);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, feedback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.validString = iprot.readString();
          struct.setValidStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
      }
    }

  }

  public static class feedback_result implements org.apache.thrift.TBase<feedback_result, feedback_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("feedback_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new feedback_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new feedback_resultTupleSchemeFactory());
    }

    public Dm_Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(feedback_result.class, metaDataMap);
    }

    public feedback_result() {
    }

    public feedback_result(
      Dm_Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public feedback_result(feedback_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_Result(other.success);
      }
    }

    public feedback_result deepCopy() {
      return new feedback_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_Result getSuccess() {
      return this.success;
    }

    public feedback_result setSuccess(Dm_Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof feedback_result)
        return this.equals((feedback_result)that);
      return false;
    }

    public boolean equals(feedback_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(feedback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      feedback_result typedOther = (feedback_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("feedback_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class feedback_resultStandardSchemeFactory implements SchemeFactory {
      public feedback_resultStandardScheme getScheme() {
        return new feedback_resultStandardScheme();
      }
    }

    private static class feedback_resultStandardScheme extends StandardScheme<feedback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, feedback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, feedback_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class feedback_resultTupleSchemeFactory implements SchemeFactory {
      public feedback_resultTupleScheme getScheme() {
        return new feedback_resultTupleScheme();
      }
    }

    private static class feedback_resultTupleScheme extends TupleScheme<feedback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, feedback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, feedback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class requestVersion_args implements org.apache.thrift.TBase<requestVersion_args, requestVersion_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestVersion_args");

    private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestVersion_argsTupleSchemeFactory());
    }

    public String clientType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLIENT_TYPE((short)1, "clientType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLIENT_TYPE
            return CLIENT_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestVersion_args.class, metaDataMap);
    }

    public requestVersion_args() {
    }

    public requestVersion_args(
      String clientType)
    {
      this();
      this.clientType = clientType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVersion_args(requestVersion_args other) {
      if (other.isSetClientType()) {
        this.clientType = other.clientType;
      }
    }

    public requestVersion_args deepCopy() {
      return new requestVersion_args(this);
    }

    @Override
    public void clear() {
      this.clientType = null;
    }

    public String getClientType() {
      return this.clientType;
    }

    public requestVersion_args setClientType(String clientType) {
      this.clientType = clientType;
      return this;
    }

    public void unsetClientType() {
      this.clientType = null;
    }

    /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
    public boolean isSetClientType() {
      return this.clientType != null;
    }

    public void setClientTypeIsSet(boolean value) {
      if (!value) {
        this.clientType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLIENT_TYPE:
        if (value == null) {
          unsetClientType();
        } else {
          setClientType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLIENT_TYPE:
        return getClientType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLIENT_TYPE:
        return isSetClientType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVersion_args)
        return this.equals((requestVersion_args)that);
      return false;
    }

    public boolean equals(requestVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_clientType = true && this.isSetClientType();
      boolean that_present_clientType = true && that.isSetClientType();
      if (this_present_clientType || that_present_clientType) {
        if (!(this_present_clientType && that_present_clientType))
          return false;
        if (!this.clientType.equals(that.clientType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(requestVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      requestVersion_args typedOther = (requestVersion_args)other;

      lastComparison = Boolean.valueOf(isSetClientType()).compareTo(typedOther.isSetClientType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, typedOther.clientType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestVersion_args(");
      boolean first = true;

      sb.append("clientType:");
      if (this.clientType == null) {
        sb.append("null");
      } else {
        sb.append(this.clientType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestVersion_argsStandardSchemeFactory implements SchemeFactory {
      public requestVersion_argsStandardScheme getScheme() {
        return new requestVersion_argsStandardScheme();
      }
    }

    private static class requestVersion_argsStandardScheme extends StandardScheme<requestVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLIENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientType = iprot.readString();
                struct.setClientTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clientType != null) {
          oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.clientType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestVersion_argsTupleSchemeFactory implements SchemeFactory {
      public requestVersion_argsTupleScheme getScheme() {
        return new requestVersion_argsTupleScheme();
      }
    }

    private static class requestVersion_argsTupleScheme extends TupleScheme<requestVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetClientType()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClientType()) {
          oprot.writeString(struct.clientType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clientType = iprot.readString();
          struct.setClientTypeIsSet(true);
        }
      }
    }

  }

  public static class requestVersion_result implements org.apache.thrift.TBase<requestVersion_result, requestVersion_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestVersion_resultTupleSchemeFactory());
    }

    public Dm_Version success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Version.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestVersion_result.class, metaDataMap);
    }

    public requestVersion_result() {
    }

    public requestVersion_result(
      Dm_Version success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVersion_result(requestVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_Version(other.success);
      }
    }

    public requestVersion_result deepCopy() {
      return new requestVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_Version getSuccess() {
      return this.success;
    }

    public requestVersion_result setSuccess(Dm_Version success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_Version)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVersion_result)
        return this.equals((requestVersion_result)that);
      return false;
    }

    public boolean equals(requestVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(requestVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      requestVersion_result typedOther = (requestVersion_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestVersion_resultStandardSchemeFactory implements SchemeFactory {
      public requestVersion_resultStandardScheme getScheme() {
        return new requestVersion_resultStandardScheme();
      }
    }

    private static class requestVersion_resultStandardScheme extends StandardScheme<requestVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_Version();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestVersion_resultTupleSchemeFactory implements SchemeFactory {
      public requestVersion_resultTupleScheme getScheme() {
        return new requestVersion_resultTupleScheme();
      }
    }

    private static class requestVersion_resultTupleScheme extends TupleScheme<requestVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_Version();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchSceneryByName_args implements org.apache.thrift.TBase<searchSceneryByName_args, searchSceneryByName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchSceneryByName_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchSceneryByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchSceneryByName_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String name; // required
    public int page; // required
    public int pagesize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      NAME((short)2, "name"),
      PAGE((short)3, "page"),
      PAGESIZE((short)4, "pagesize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // NAME
            return NAME;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGESIZE
            return PAGESIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("pagesize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchSceneryByName_args.class, metaDataMap);
    }

    public searchSceneryByName_args() {
    }

    public searchSceneryByName_args(
      String validstring,
      String name,
      int page,
      int pagesize)
    {
      this();
      this.validstring = validstring;
      this.name = name;
      this.page = page;
      setPageIsSet(true);
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchSceneryByName_args(searchSceneryByName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.page = other.page;
      this.pagesize = other.pagesize;
    }

    public searchSceneryByName_args deepCopy() {
      return new searchSceneryByName_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.name = null;
      setPageIsSet(false);
      this.page = 0;
      setPagesizeIsSet(false);
      this.pagesize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchSceneryByName_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public searchSceneryByName_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchSceneryByName_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPagesize() {
      return this.pagesize;
    }

    public searchSceneryByName_args setPagesize(int pagesize) {
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
      return this;
    }

    public void unsetPagesize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pagesize is set (has been assigned a value) and false otherwise */
    public boolean isSetPagesize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPagesizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGESIZE:
        if (value == null) {
          unsetPagesize();
        } else {
          setPagesize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case NAME:
        return getName();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGESIZE:
        return Integer.valueOf(getPagesize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case NAME:
        return isSetName();
      case PAGE:
        return isSetPage();
      case PAGESIZE:
        return isSetPagesize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchSceneryByName_args)
        return this.equals((searchSceneryByName_args)that);
      return false;
    }

    public boolean equals(searchSceneryByName_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pagesize = true;
      boolean that_present_pagesize = true;
      if (this_present_pagesize || that_present_pagesize) {
        if (!(this_present_pagesize && that_present_pagesize))
          return false;
        if (this.pagesize != that.pagesize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchSceneryByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchSceneryByName_args typedOther = (searchSceneryByName_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPagesize()).compareTo(typedOther.isSetPagesize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPagesize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesize, typedOther.pagesize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchSceneryByName_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pagesize:");
      sb.append(this.pagesize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchSceneryByName_argsStandardSchemeFactory implements SchemeFactory {
      public searchSceneryByName_argsStandardScheme getScheme() {
        return new searchSceneryByName_argsStandardScheme();
      }
    }

    private static class searchSceneryByName_argsStandardScheme extends StandardScheme<searchSceneryByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchSceneryByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGESIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pagesize = iprot.readI32();
                struct.setPagesizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchSceneryByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
        oprot.writeI32(struct.pagesize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchSceneryByName_argsTupleSchemeFactory implements SchemeFactory {
      public searchSceneryByName_argsTupleScheme getScheme() {
        return new searchSceneryByName_argsTupleScheme();
      }
    }

    private static class searchSceneryByName_argsTupleScheme extends TupleScheme<searchSceneryByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchSceneryByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPagesize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPagesize()) {
          oprot.writeI32(struct.pagesize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchSceneryByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pagesize = iprot.readI32();
          struct.setPagesizeIsSet(true);
        }
      }
    }

  }

  public static class searchSceneryByName_result implements org.apache.thrift.TBase<searchSceneryByName_result, searchSceneryByName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchSceneryByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchSceneryByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchSceneryByName_resultTupleSchemeFactory());
    }

    public Dm_SceneryList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_SceneryList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchSceneryByName_result.class, metaDataMap);
    }

    public searchSceneryByName_result() {
    }

    public searchSceneryByName_result(
      Dm_SceneryList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchSceneryByName_result(searchSceneryByName_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_SceneryList(other.success);
      }
    }

    public searchSceneryByName_result deepCopy() {
      return new searchSceneryByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_SceneryList getSuccess() {
      return this.success;
    }

    public searchSceneryByName_result setSuccess(Dm_SceneryList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_SceneryList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchSceneryByName_result)
        return this.equals((searchSceneryByName_result)that);
      return false;
    }

    public boolean equals(searchSceneryByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchSceneryByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchSceneryByName_result typedOther = (searchSceneryByName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchSceneryByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchSceneryByName_resultStandardSchemeFactory implements SchemeFactory {
      public searchSceneryByName_resultStandardScheme getScheme() {
        return new searchSceneryByName_resultStandardScheme();
      }
    }

    private static class searchSceneryByName_resultStandardScheme extends StandardScheme<searchSceneryByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchSceneryByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_SceneryList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchSceneryByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchSceneryByName_resultTupleSchemeFactory implements SchemeFactory {
      public searchSceneryByName_resultTupleScheme getScheme() {
        return new searchSceneryByName_resultTupleScheme();
      }
    }

    private static class searchSceneryByName_resultTupleScheme extends TupleScheme<searchSceneryByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchSceneryByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchSceneryByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_SceneryList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchSceneryByCity_args implements org.apache.thrift.TBase<searchSceneryByCity_args, searchSceneryByCity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchSceneryByCity_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchSceneryByCity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchSceneryByCity_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String cityName; // required
    public int page; // required
    public int pagesize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      CITY_NAME((short)2, "cityName"),
      PAGE((short)3, "page"),
      PAGESIZE((short)4, "pagesize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // CITY_NAME
            return CITY_NAME;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGESIZE
            return PAGESIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("pagesize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchSceneryByCity_args.class, metaDataMap);
    }

    public searchSceneryByCity_args() {
    }

    public searchSceneryByCity_args(
      String validstring,
      String cityName,
      int page,
      int pagesize)
    {
      this();
      this.validstring = validstring;
      this.cityName = cityName;
      this.page = page;
      setPageIsSet(true);
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchSceneryByCity_args(searchSceneryByCity_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetCityName()) {
        this.cityName = other.cityName;
      }
      this.page = other.page;
      this.pagesize = other.pagesize;
    }

    public searchSceneryByCity_args deepCopy() {
      return new searchSceneryByCity_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.cityName = null;
      setPageIsSet(false);
      this.page = 0;
      setPagesizeIsSet(false);
      this.pagesize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchSceneryByCity_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getCityName() {
      return this.cityName;
    }

    public searchSceneryByCity_args setCityName(String cityName) {
      this.cityName = cityName;
      return this;
    }

    public void unsetCityName() {
      this.cityName = null;
    }

    /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
    public boolean isSetCityName() {
      return this.cityName != null;
    }

    public void setCityNameIsSet(boolean value) {
      if (!value) {
        this.cityName = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchSceneryByCity_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPagesize() {
      return this.pagesize;
    }

    public searchSceneryByCity_args setPagesize(int pagesize) {
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
      return this;
    }

    public void unsetPagesize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pagesize is set (has been assigned a value) and false otherwise */
    public boolean isSetPagesize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPagesizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case CITY_NAME:
        if (value == null) {
          unsetCityName();
        } else {
          setCityName((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGESIZE:
        if (value == null) {
          unsetPagesize();
        } else {
          setPagesize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case CITY_NAME:
        return getCityName();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGESIZE:
        return Integer.valueOf(getPagesize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case CITY_NAME:
        return isSetCityName();
      case PAGE:
        return isSetPage();
      case PAGESIZE:
        return isSetPagesize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchSceneryByCity_args)
        return this.equals((searchSceneryByCity_args)that);
      return false;
    }

    public boolean equals(searchSceneryByCity_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_cityName = true && this.isSetCityName();
      boolean that_present_cityName = true && that.isSetCityName();
      if (this_present_cityName || that_present_cityName) {
        if (!(this_present_cityName && that_present_cityName))
          return false;
        if (!this.cityName.equals(that.cityName))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pagesize = true;
      boolean that_present_pagesize = true;
      if (this_present_pagesize || that_present_pagesize) {
        if (!(this_present_pagesize && that_present_pagesize))
          return false;
        if (this.pagesize != that.pagesize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchSceneryByCity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchSceneryByCity_args typedOther = (searchSceneryByCity_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCityName()).compareTo(typedOther.isSetCityName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCityName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, typedOther.cityName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPagesize()).compareTo(typedOther.isSetPagesize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPagesize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesize, typedOther.pagesize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchSceneryByCity_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cityName:");
      if (this.cityName == null) {
        sb.append("null");
      } else {
        sb.append(this.cityName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pagesize:");
      sb.append(this.pagesize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchSceneryByCity_argsStandardSchemeFactory implements SchemeFactory {
      public searchSceneryByCity_argsStandardScheme getScheme() {
        return new searchSceneryByCity_argsStandardScheme();
      }
    }

    private static class searchSceneryByCity_argsStandardScheme extends StandardScheme<searchSceneryByCity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchSceneryByCity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CITY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cityName = iprot.readString();
                struct.setCityNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGESIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pagesize = iprot.readI32();
                struct.setPagesizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchSceneryByCity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.cityName != null) {
          oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
          oprot.writeString(struct.cityName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
        oprot.writeI32(struct.pagesize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchSceneryByCity_argsTupleSchemeFactory implements SchemeFactory {
      public searchSceneryByCity_argsTupleScheme getScheme() {
        return new searchSceneryByCity_argsTupleScheme();
      }
    }

    private static class searchSceneryByCity_argsTupleScheme extends TupleScheme<searchSceneryByCity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchSceneryByCity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetCityName()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPagesize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetCityName()) {
          oprot.writeString(struct.cityName);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPagesize()) {
          oprot.writeI32(struct.pagesize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchSceneryByCity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cityName = iprot.readString();
          struct.setCityNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pagesize = iprot.readI32();
          struct.setPagesizeIsSet(true);
        }
      }
    }

  }

  public static class searchSceneryByCity_result implements org.apache.thrift.TBase<searchSceneryByCity_result, searchSceneryByCity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchSceneryByCity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchSceneryByCity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchSceneryByCity_resultTupleSchemeFactory());
    }

    public Dm_SceneryList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_SceneryList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchSceneryByCity_result.class, metaDataMap);
    }

    public searchSceneryByCity_result() {
    }

    public searchSceneryByCity_result(
      Dm_SceneryList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchSceneryByCity_result(searchSceneryByCity_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_SceneryList(other.success);
      }
    }

    public searchSceneryByCity_result deepCopy() {
      return new searchSceneryByCity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_SceneryList getSuccess() {
      return this.success;
    }

    public searchSceneryByCity_result setSuccess(Dm_SceneryList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_SceneryList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchSceneryByCity_result)
        return this.equals((searchSceneryByCity_result)that);
      return false;
    }

    public boolean equals(searchSceneryByCity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchSceneryByCity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchSceneryByCity_result typedOther = (searchSceneryByCity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchSceneryByCity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchSceneryByCity_resultStandardSchemeFactory implements SchemeFactory {
      public searchSceneryByCity_resultStandardScheme getScheme() {
        return new searchSceneryByCity_resultStandardScheme();
      }
    }

    private static class searchSceneryByCity_resultStandardScheme extends StandardScheme<searchSceneryByCity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchSceneryByCity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_SceneryList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchSceneryByCity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchSceneryByCity_resultTupleSchemeFactory implements SchemeFactory {
      public searchSceneryByCity_resultTupleScheme getScheme() {
        return new searchSceneryByCity_resultTupleScheme();
      }
    }

    private static class searchSceneryByCity_resultTupleScheme extends TupleScheme<searchSceneryByCity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchSceneryByCity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchSceneryByCity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_SceneryList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchScenerySimplifyByCity_args implements org.apache.thrift.TBase<searchScenerySimplifyByCity_args, searchScenerySimplifyByCity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchScenerySimplifyByCity_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchScenerySimplifyByCity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchScenerySimplifyByCity_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String cityName; // required
    public int page; // required
    public int pagesize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      CITY_NAME((short)2, "cityName"),
      PAGE((short)3, "page"),
      PAGESIZE((short)4, "pagesize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // CITY_NAME
            return CITY_NAME;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGESIZE
            return PAGESIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("pagesize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchScenerySimplifyByCity_args.class, metaDataMap);
    }

    public searchScenerySimplifyByCity_args() {
    }

    public searchScenerySimplifyByCity_args(
      String validstring,
      String cityName,
      int page,
      int pagesize)
    {
      this();
      this.validstring = validstring;
      this.cityName = cityName;
      this.page = page;
      setPageIsSet(true);
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchScenerySimplifyByCity_args(searchScenerySimplifyByCity_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetCityName()) {
        this.cityName = other.cityName;
      }
      this.page = other.page;
      this.pagesize = other.pagesize;
    }

    public searchScenerySimplifyByCity_args deepCopy() {
      return new searchScenerySimplifyByCity_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.cityName = null;
      setPageIsSet(false);
      this.page = 0;
      setPagesizeIsSet(false);
      this.pagesize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchScenerySimplifyByCity_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getCityName() {
      return this.cityName;
    }

    public searchScenerySimplifyByCity_args setCityName(String cityName) {
      this.cityName = cityName;
      return this;
    }

    public void unsetCityName() {
      this.cityName = null;
    }

    /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
    public boolean isSetCityName() {
      return this.cityName != null;
    }

    public void setCityNameIsSet(boolean value) {
      if (!value) {
        this.cityName = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchScenerySimplifyByCity_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPagesize() {
      return this.pagesize;
    }

    public searchScenerySimplifyByCity_args setPagesize(int pagesize) {
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
      return this;
    }

    public void unsetPagesize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pagesize is set (has been assigned a value) and false otherwise */
    public boolean isSetPagesize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPagesizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case CITY_NAME:
        if (value == null) {
          unsetCityName();
        } else {
          setCityName((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGESIZE:
        if (value == null) {
          unsetPagesize();
        } else {
          setPagesize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case CITY_NAME:
        return getCityName();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGESIZE:
        return Integer.valueOf(getPagesize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case CITY_NAME:
        return isSetCityName();
      case PAGE:
        return isSetPage();
      case PAGESIZE:
        return isSetPagesize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchScenerySimplifyByCity_args)
        return this.equals((searchScenerySimplifyByCity_args)that);
      return false;
    }

    public boolean equals(searchScenerySimplifyByCity_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_cityName = true && this.isSetCityName();
      boolean that_present_cityName = true && that.isSetCityName();
      if (this_present_cityName || that_present_cityName) {
        if (!(this_present_cityName && that_present_cityName))
          return false;
        if (!this.cityName.equals(that.cityName))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pagesize = true;
      boolean that_present_pagesize = true;
      if (this_present_pagesize || that_present_pagesize) {
        if (!(this_present_pagesize && that_present_pagesize))
          return false;
        if (this.pagesize != that.pagesize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchScenerySimplifyByCity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchScenerySimplifyByCity_args typedOther = (searchScenerySimplifyByCity_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCityName()).compareTo(typedOther.isSetCityName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCityName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, typedOther.cityName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPagesize()).compareTo(typedOther.isSetPagesize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPagesize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesize, typedOther.pagesize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchScenerySimplifyByCity_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cityName:");
      if (this.cityName == null) {
        sb.append("null");
      } else {
        sb.append(this.cityName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pagesize:");
      sb.append(this.pagesize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchScenerySimplifyByCity_argsStandardSchemeFactory implements SchemeFactory {
      public searchScenerySimplifyByCity_argsStandardScheme getScheme() {
        return new searchScenerySimplifyByCity_argsStandardScheme();
      }
    }

    private static class searchScenerySimplifyByCity_argsStandardScheme extends StandardScheme<searchScenerySimplifyByCity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchScenerySimplifyByCity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CITY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cityName = iprot.readString();
                struct.setCityNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGESIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pagesize = iprot.readI32();
                struct.setPagesizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchScenerySimplifyByCity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.cityName != null) {
          oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
          oprot.writeString(struct.cityName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
        oprot.writeI32(struct.pagesize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchScenerySimplifyByCity_argsTupleSchemeFactory implements SchemeFactory {
      public searchScenerySimplifyByCity_argsTupleScheme getScheme() {
        return new searchScenerySimplifyByCity_argsTupleScheme();
      }
    }

    private static class searchScenerySimplifyByCity_argsTupleScheme extends TupleScheme<searchScenerySimplifyByCity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchScenerySimplifyByCity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetCityName()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPagesize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetCityName()) {
          oprot.writeString(struct.cityName);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPagesize()) {
          oprot.writeI32(struct.pagesize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchScenerySimplifyByCity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cityName = iprot.readString();
          struct.setCityNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pagesize = iprot.readI32();
          struct.setPagesizeIsSet(true);
        }
      }
    }

  }

  public static class searchScenerySimplifyByCity_result implements org.apache.thrift.TBase<searchScenerySimplifyByCity_result, searchScenerySimplifyByCity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchScenerySimplifyByCity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchScenerySimplifyByCity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchScenerySimplifyByCity_resultTupleSchemeFactory());
    }

    public Dm_ScenerySimplifyList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_ScenerySimplifyList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchScenerySimplifyByCity_result.class, metaDataMap);
    }

    public searchScenerySimplifyByCity_result() {
    }

    public searchScenerySimplifyByCity_result(
      Dm_ScenerySimplifyList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchScenerySimplifyByCity_result(searchScenerySimplifyByCity_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_ScenerySimplifyList(other.success);
      }
    }

    public searchScenerySimplifyByCity_result deepCopy() {
      return new searchScenerySimplifyByCity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_ScenerySimplifyList getSuccess() {
      return this.success;
    }

    public searchScenerySimplifyByCity_result setSuccess(Dm_ScenerySimplifyList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_ScenerySimplifyList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchScenerySimplifyByCity_result)
        return this.equals((searchScenerySimplifyByCity_result)that);
      return false;
    }

    public boolean equals(searchScenerySimplifyByCity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchScenerySimplifyByCity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchScenerySimplifyByCity_result typedOther = (searchScenerySimplifyByCity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchScenerySimplifyByCity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchScenerySimplifyByCity_resultStandardSchemeFactory implements SchemeFactory {
      public searchScenerySimplifyByCity_resultStandardScheme getScheme() {
        return new searchScenerySimplifyByCity_resultStandardScheme();
      }
    }

    private static class searchScenerySimplifyByCity_resultStandardScheme extends StandardScheme<searchScenerySimplifyByCity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchScenerySimplifyByCity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_ScenerySimplifyList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchScenerySimplifyByCity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchScenerySimplifyByCity_resultTupleSchemeFactory implements SchemeFactory {
      public searchScenerySimplifyByCity_resultTupleScheme getScheme() {
        return new searchScenerySimplifyByCity_resultTupleScheme();
      }
    }

    private static class searchScenerySimplifyByCity_resultTupleScheme extends TupleScheme<searchScenerySimplifyByCity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchScenerySimplifyByCity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchScenerySimplifyByCity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_ScenerySimplifyList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchHotSceneryByCity_args implements org.apache.thrift.TBase<searchHotSceneryByCity_args, searchHotSceneryByCity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchHotSceneryByCity_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchHotSceneryByCity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchHotSceneryByCity_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String cityName; // required
    public int page; // required
    public int pagesize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      CITY_NAME((short)2, "cityName"),
      PAGE((short)3, "page"),
      PAGESIZE((short)4, "pagesize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // CITY_NAME
            return CITY_NAME;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGESIZE
            return PAGESIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("pagesize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchHotSceneryByCity_args.class, metaDataMap);
    }

    public searchHotSceneryByCity_args() {
    }

    public searchHotSceneryByCity_args(
      String validstring,
      String cityName,
      int page,
      int pagesize)
    {
      this();
      this.validstring = validstring;
      this.cityName = cityName;
      this.page = page;
      setPageIsSet(true);
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchHotSceneryByCity_args(searchHotSceneryByCity_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetCityName()) {
        this.cityName = other.cityName;
      }
      this.page = other.page;
      this.pagesize = other.pagesize;
    }

    public searchHotSceneryByCity_args deepCopy() {
      return new searchHotSceneryByCity_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.cityName = null;
      setPageIsSet(false);
      this.page = 0;
      setPagesizeIsSet(false);
      this.pagesize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchHotSceneryByCity_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getCityName() {
      return this.cityName;
    }

    public searchHotSceneryByCity_args setCityName(String cityName) {
      this.cityName = cityName;
      return this;
    }

    public void unsetCityName() {
      this.cityName = null;
    }

    /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
    public boolean isSetCityName() {
      return this.cityName != null;
    }

    public void setCityNameIsSet(boolean value) {
      if (!value) {
        this.cityName = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchHotSceneryByCity_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPagesize() {
      return this.pagesize;
    }

    public searchHotSceneryByCity_args setPagesize(int pagesize) {
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
      return this;
    }

    public void unsetPagesize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pagesize is set (has been assigned a value) and false otherwise */
    public boolean isSetPagesize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPagesizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case CITY_NAME:
        if (value == null) {
          unsetCityName();
        } else {
          setCityName((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGESIZE:
        if (value == null) {
          unsetPagesize();
        } else {
          setPagesize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case CITY_NAME:
        return getCityName();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGESIZE:
        return Integer.valueOf(getPagesize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case CITY_NAME:
        return isSetCityName();
      case PAGE:
        return isSetPage();
      case PAGESIZE:
        return isSetPagesize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchHotSceneryByCity_args)
        return this.equals((searchHotSceneryByCity_args)that);
      return false;
    }

    public boolean equals(searchHotSceneryByCity_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_cityName = true && this.isSetCityName();
      boolean that_present_cityName = true && that.isSetCityName();
      if (this_present_cityName || that_present_cityName) {
        if (!(this_present_cityName && that_present_cityName))
          return false;
        if (!this.cityName.equals(that.cityName))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pagesize = true;
      boolean that_present_pagesize = true;
      if (this_present_pagesize || that_present_pagesize) {
        if (!(this_present_pagesize && that_present_pagesize))
          return false;
        if (this.pagesize != that.pagesize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchHotSceneryByCity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchHotSceneryByCity_args typedOther = (searchHotSceneryByCity_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCityName()).compareTo(typedOther.isSetCityName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCityName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, typedOther.cityName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPagesize()).compareTo(typedOther.isSetPagesize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPagesize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesize, typedOther.pagesize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchHotSceneryByCity_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cityName:");
      if (this.cityName == null) {
        sb.append("null");
      } else {
        sb.append(this.cityName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pagesize:");
      sb.append(this.pagesize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchHotSceneryByCity_argsStandardSchemeFactory implements SchemeFactory {
      public searchHotSceneryByCity_argsStandardScheme getScheme() {
        return new searchHotSceneryByCity_argsStandardScheme();
      }
    }

    private static class searchHotSceneryByCity_argsStandardScheme extends StandardScheme<searchHotSceneryByCity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchHotSceneryByCity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CITY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cityName = iprot.readString();
                struct.setCityNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGESIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pagesize = iprot.readI32();
                struct.setPagesizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchHotSceneryByCity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.cityName != null) {
          oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
          oprot.writeString(struct.cityName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
        oprot.writeI32(struct.pagesize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchHotSceneryByCity_argsTupleSchemeFactory implements SchemeFactory {
      public searchHotSceneryByCity_argsTupleScheme getScheme() {
        return new searchHotSceneryByCity_argsTupleScheme();
      }
    }

    private static class searchHotSceneryByCity_argsTupleScheme extends TupleScheme<searchHotSceneryByCity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchHotSceneryByCity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetCityName()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPagesize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetCityName()) {
          oprot.writeString(struct.cityName);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPagesize()) {
          oprot.writeI32(struct.pagesize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchHotSceneryByCity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cityName = iprot.readString();
          struct.setCityNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pagesize = iprot.readI32();
          struct.setPagesizeIsSet(true);
        }
      }
    }

  }

  public static class searchHotSceneryByCity_result implements org.apache.thrift.TBase<searchHotSceneryByCity_result, searchHotSceneryByCity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchHotSceneryByCity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchHotSceneryByCity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchHotSceneryByCity_resultTupleSchemeFactory());
    }

    public Dm_SceneryList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_SceneryList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchHotSceneryByCity_result.class, metaDataMap);
    }

    public searchHotSceneryByCity_result() {
    }

    public searchHotSceneryByCity_result(
      Dm_SceneryList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchHotSceneryByCity_result(searchHotSceneryByCity_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_SceneryList(other.success);
      }
    }

    public searchHotSceneryByCity_result deepCopy() {
      return new searchHotSceneryByCity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_SceneryList getSuccess() {
      return this.success;
    }

    public searchHotSceneryByCity_result setSuccess(Dm_SceneryList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_SceneryList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchHotSceneryByCity_result)
        return this.equals((searchHotSceneryByCity_result)that);
      return false;
    }

    public boolean equals(searchHotSceneryByCity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchHotSceneryByCity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchHotSceneryByCity_result typedOther = (searchHotSceneryByCity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchHotSceneryByCity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchHotSceneryByCity_resultStandardSchemeFactory implements SchemeFactory {
      public searchHotSceneryByCity_resultStandardScheme getScheme() {
        return new searchHotSceneryByCity_resultStandardScheme();
      }
    }

    private static class searchHotSceneryByCity_resultStandardScheme extends StandardScheme<searchHotSceneryByCity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchHotSceneryByCity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_SceneryList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchHotSceneryByCity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchHotSceneryByCity_resultTupleSchemeFactory implements SchemeFactory {
      public searchHotSceneryByCity_resultTupleScheme getScheme() {
        return new searchHotSceneryByCity_resultTupleScheme();
      }
    }

    private static class searchHotSceneryByCity_resultTupleScheme extends TupleScheme<searchHotSceneryByCity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchHotSceneryByCity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchHotSceneryByCity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_SceneryList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchHotScenerySimplifyByCity_args implements org.apache.thrift.TBase<searchHotScenerySimplifyByCity_args, searchHotScenerySimplifyByCity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchHotScenerySimplifyByCity_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchHotScenerySimplifyByCity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchHotScenerySimplifyByCity_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String cityName; // required
    public int page; // required
    public int pagesize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      CITY_NAME((short)2, "cityName"),
      PAGE((short)3, "page"),
      PAGESIZE((short)4, "pagesize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // CITY_NAME
            return CITY_NAME;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGESIZE
            return PAGESIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("pagesize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchHotScenerySimplifyByCity_args.class, metaDataMap);
    }

    public searchHotScenerySimplifyByCity_args() {
    }

    public searchHotScenerySimplifyByCity_args(
      String validstring,
      String cityName,
      int page,
      int pagesize)
    {
      this();
      this.validstring = validstring;
      this.cityName = cityName;
      this.page = page;
      setPageIsSet(true);
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchHotScenerySimplifyByCity_args(searchHotScenerySimplifyByCity_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetCityName()) {
        this.cityName = other.cityName;
      }
      this.page = other.page;
      this.pagesize = other.pagesize;
    }

    public searchHotScenerySimplifyByCity_args deepCopy() {
      return new searchHotScenerySimplifyByCity_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.cityName = null;
      setPageIsSet(false);
      this.page = 0;
      setPagesizeIsSet(false);
      this.pagesize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchHotScenerySimplifyByCity_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getCityName() {
      return this.cityName;
    }

    public searchHotScenerySimplifyByCity_args setCityName(String cityName) {
      this.cityName = cityName;
      return this;
    }

    public void unsetCityName() {
      this.cityName = null;
    }

    /** Returns true if field cityName is set (has been assigned a value) and false otherwise */
    public boolean isSetCityName() {
      return this.cityName != null;
    }

    public void setCityNameIsSet(boolean value) {
      if (!value) {
        this.cityName = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchHotScenerySimplifyByCity_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPagesize() {
      return this.pagesize;
    }

    public searchHotScenerySimplifyByCity_args setPagesize(int pagesize) {
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
      return this;
    }

    public void unsetPagesize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pagesize is set (has been assigned a value) and false otherwise */
    public boolean isSetPagesize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPagesizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case CITY_NAME:
        if (value == null) {
          unsetCityName();
        } else {
          setCityName((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGESIZE:
        if (value == null) {
          unsetPagesize();
        } else {
          setPagesize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case CITY_NAME:
        return getCityName();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGESIZE:
        return Integer.valueOf(getPagesize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case CITY_NAME:
        return isSetCityName();
      case PAGE:
        return isSetPage();
      case PAGESIZE:
        return isSetPagesize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchHotScenerySimplifyByCity_args)
        return this.equals((searchHotScenerySimplifyByCity_args)that);
      return false;
    }

    public boolean equals(searchHotScenerySimplifyByCity_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_cityName = true && this.isSetCityName();
      boolean that_present_cityName = true && that.isSetCityName();
      if (this_present_cityName || that_present_cityName) {
        if (!(this_present_cityName && that_present_cityName))
          return false;
        if (!this.cityName.equals(that.cityName))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pagesize = true;
      boolean that_present_pagesize = true;
      if (this_present_pagesize || that_present_pagesize) {
        if (!(this_present_pagesize && that_present_pagesize))
          return false;
        if (this.pagesize != that.pagesize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchHotScenerySimplifyByCity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchHotScenerySimplifyByCity_args typedOther = (searchHotScenerySimplifyByCity_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCityName()).compareTo(typedOther.isSetCityName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCityName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityName, typedOther.cityName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPagesize()).compareTo(typedOther.isSetPagesize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPagesize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesize, typedOther.pagesize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchHotScenerySimplifyByCity_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cityName:");
      if (this.cityName == null) {
        sb.append("null");
      } else {
        sb.append(this.cityName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pagesize:");
      sb.append(this.pagesize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchHotScenerySimplifyByCity_argsStandardSchemeFactory implements SchemeFactory {
      public searchHotScenerySimplifyByCity_argsStandardScheme getScheme() {
        return new searchHotScenerySimplifyByCity_argsStandardScheme();
      }
    }

    private static class searchHotScenerySimplifyByCity_argsStandardScheme extends StandardScheme<searchHotScenerySimplifyByCity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchHotScenerySimplifyByCity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CITY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cityName = iprot.readString();
                struct.setCityNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGESIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pagesize = iprot.readI32();
                struct.setPagesizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchHotScenerySimplifyByCity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.cityName != null) {
          oprot.writeFieldBegin(CITY_NAME_FIELD_DESC);
          oprot.writeString(struct.cityName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
        oprot.writeI32(struct.pagesize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchHotScenerySimplifyByCity_argsTupleSchemeFactory implements SchemeFactory {
      public searchHotScenerySimplifyByCity_argsTupleScheme getScheme() {
        return new searchHotScenerySimplifyByCity_argsTupleScheme();
      }
    }

    private static class searchHotScenerySimplifyByCity_argsTupleScheme extends TupleScheme<searchHotScenerySimplifyByCity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchHotScenerySimplifyByCity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetCityName()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPagesize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetCityName()) {
          oprot.writeString(struct.cityName);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPagesize()) {
          oprot.writeI32(struct.pagesize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchHotScenerySimplifyByCity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cityName = iprot.readString();
          struct.setCityNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pagesize = iprot.readI32();
          struct.setPagesizeIsSet(true);
        }
      }
    }

  }

  public static class searchHotScenerySimplifyByCity_result implements org.apache.thrift.TBase<searchHotScenerySimplifyByCity_result, searchHotScenerySimplifyByCity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchHotScenerySimplifyByCity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchHotScenerySimplifyByCity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchHotScenerySimplifyByCity_resultTupleSchemeFactory());
    }

    public Dm_ScenerySimplifyList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_ScenerySimplifyList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchHotScenerySimplifyByCity_result.class, metaDataMap);
    }

    public searchHotScenerySimplifyByCity_result() {
    }

    public searchHotScenerySimplifyByCity_result(
      Dm_ScenerySimplifyList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchHotScenerySimplifyByCity_result(searchHotScenerySimplifyByCity_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_ScenerySimplifyList(other.success);
      }
    }

    public searchHotScenerySimplifyByCity_result deepCopy() {
      return new searchHotScenerySimplifyByCity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_ScenerySimplifyList getSuccess() {
      return this.success;
    }

    public searchHotScenerySimplifyByCity_result setSuccess(Dm_ScenerySimplifyList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_ScenerySimplifyList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchHotScenerySimplifyByCity_result)
        return this.equals((searchHotScenerySimplifyByCity_result)that);
      return false;
    }

    public boolean equals(searchHotScenerySimplifyByCity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchHotScenerySimplifyByCity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchHotScenerySimplifyByCity_result typedOther = (searchHotScenerySimplifyByCity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchHotScenerySimplifyByCity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchHotScenerySimplifyByCity_resultStandardSchemeFactory implements SchemeFactory {
      public searchHotScenerySimplifyByCity_resultStandardScheme getScheme() {
        return new searchHotScenerySimplifyByCity_resultStandardScheme();
      }
    }

    private static class searchHotScenerySimplifyByCity_resultStandardScheme extends StandardScheme<searchHotScenerySimplifyByCity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchHotScenerySimplifyByCity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_ScenerySimplifyList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchHotScenerySimplifyByCity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchHotScenerySimplifyByCity_resultTupleSchemeFactory implements SchemeFactory {
      public searchHotScenerySimplifyByCity_resultTupleScheme getScheme() {
        return new searchHotScenerySimplifyByCity_resultTupleScheme();
      }
    }

    private static class searchHotScenerySimplifyByCity_resultTupleScheme extends TupleScheme<searchHotScenerySimplifyByCity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchHotScenerySimplifyByCity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchHotScenerySimplifyByCity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_ScenerySimplifyList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchSceneryNearby_args implements org.apache.thrift.TBase<searchSceneryNearby_args, searchSceneryNearby_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchSceneryNearby_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SMALL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("smallType", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField BIG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bigType", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesize", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField ISJP_FIELD_DESC = new org.apache.thrift.protocol.TField("isjp", org.apache.thrift.protocol.TType.BOOL, (short)10);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchSceneryNearby_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchSceneryNearby_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public double lng; // required
    public double lat; // required
    public String name; // required
    public String smallType; // required
    public String bigType; // required
    public double range; // required
    public int page; // required
    public int pagesize; // required
    public boolean isjp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      LNG((short)2, "lng"),
      LAT((short)3, "lat"),
      NAME((short)4, "name"),
      SMALL_TYPE((short)5, "smallType"),
      BIG_TYPE((short)6, "bigType"),
      RANGE((short)7, "range"),
      PAGE((short)8, "page"),
      PAGESIZE((short)9, "pagesize"),
      ISJP((short)10, "isjp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // LNG
            return LNG;
          case 3: // LAT
            return LAT;
          case 4: // NAME
            return NAME;
          case 5: // SMALL_TYPE
            return SMALL_TYPE;
          case 6: // BIG_TYPE
            return BIG_TYPE;
          case 7: // RANGE
            return RANGE;
          case 8: // PAGE
            return PAGE;
          case 9: // PAGESIZE
            return PAGESIZE;
          case 10: // ISJP
            return ISJP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LNG_ISSET_ID = 0;
    private static final int __LAT_ISSET_ID = 1;
    private static final int __RANGE_ISSET_ID = 2;
    private static final int __PAGE_ISSET_ID = 3;
    private static final int __PAGESIZE_ISSET_ID = 4;
    private static final int __ISJP_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SMALL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("smallType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BIG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bigType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("pagesize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ISJP, new org.apache.thrift.meta_data.FieldMetaData("isjp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchSceneryNearby_args.class, metaDataMap);
    }

    public searchSceneryNearby_args() {
    }

    public searchSceneryNearby_args(
      String validstring,
      double lng,
      double lat,
      String name,
      String smallType,
      String bigType,
      double range,
      int page,
      int pagesize,
      boolean isjp)
    {
      this();
      this.validstring = validstring;
      this.lng = lng;
      setLngIsSet(true);
      this.lat = lat;
      setLatIsSet(true);
      this.name = name;
      this.smallType = smallType;
      this.bigType = bigType;
      this.range = range;
      setRangeIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
      this.isjp = isjp;
      setIsjpIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchSceneryNearby_args(searchSceneryNearby_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      this.lng = other.lng;
      this.lat = other.lat;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetSmallType()) {
        this.smallType = other.smallType;
      }
      if (other.isSetBigType()) {
        this.bigType = other.bigType;
      }
      this.range = other.range;
      this.page = other.page;
      this.pagesize = other.pagesize;
      this.isjp = other.isjp;
    }

    public searchSceneryNearby_args deepCopy() {
      return new searchSceneryNearby_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      setLngIsSet(false);
      this.lng = 0.0;
      setLatIsSet(false);
      this.lat = 0.0;
      this.name = null;
      this.smallType = null;
      this.bigType = null;
      setRangeIsSet(false);
      this.range = 0.0;
      setPageIsSet(false);
      this.page = 0;
      setPagesizeIsSet(false);
      this.pagesize = 0;
      setIsjpIsSet(false);
      this.isjp = false;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchSceneryNearby_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public double getLng() {
      return this.lng;
    }

    public searchSceneryNearby_args setLng(double lng) {
      this.lng = lng;
      setLngIsSet(true);
      return this;
    }

    public void unsetLng() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LNG_ISSET_ID);
    }

    /** Returns true if field lng is set (has been assigned a value) and false otherwise */
    public boolean isSetLng() {
      return EncodingUtils.testBit(__isset_bitfield, __LNG_ISSET_ID);
    }

    public void setLngIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LNG_ISSET_ID, value);
    }

    public double getLat() {
      return this.lat;
    }

    public searchSceneryNearby_args setLat(double lat) {
      this.lat = lat;
      setLatIsSet(true);
      return this;
    }

    public void unsetLat() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAT_ISSET_ID);
    }

    /** Returns true if field lat is set (has been assigned a value) and false otherwise */
    public boolean isSetLat() {
      return EncodingUtils.testBit(__isset_bitfield, __LAT_ISSET_ID);
    }

    public void setLatIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAT_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public searchSceneryNearby_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getSmallType() {
      return this.smallType;
    }

    public searchSceneryNearby_args setSmallType(String smallType) {
      this.smallType = smallType;
      return this;
    }

    public void unsetSmallType() {
      this.smallType = null;
    }

    /** Returns true if field smallType is set (has been assigned a value) and false otherwise */
    public boolean isSetSmallType() {
      return this.smallType != null;
    }

    public void setSmallTypeIsSet(boolean value) {
      if (!value) {
        this.smallType = null;
      }
    }

    public String getBigType() {
      return this.bigType;
    }

    public searchSceneryNearby_args setBigType(String bigType) {
      this.bigType = bigType;
      return this;
    }

    public void unsetBigType() {
      this.bigType = null;
    }

    /** Returns true if field bigType is set (has been assigned a value) and false otherwise */
    public boolean isSetBigType() {
      return this.bigType != null;
    }

    public void setBigTypeIsSet(boolean value) {
      if (!value) {
        this.bigType = null;
      }
    }

    public double getRange() {
      return this.range;
    }

    public searchSceneryNearby_args setRange(double range) {
      this.range = range;
      setRangeIsSet(true);
      return this;
    }

    public void unsetRange() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGE_ISSET_ID);
    }

    /** Returns true if field range is set (has been assigned a value) and false otherwise */
    public boolean isSetRange() {
      return EncodingUtils.testBit(__isset_bitfield, __RANGE_ISSET_ID);
    }

    public void setRangeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGE_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public searchSceneryNearby_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPagesize() {
      return this.pagesize;
    }

    public searchSceneryNearby_args setPagesize(int pagesize) {
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
      return this;
    }

    public void unsetPagesize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pagesize is set (has been assigned a value) and false otherwise */
    public boolean isSetPagesize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPagesizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public boolean isIsjp() {
      return this.isjp;
    }

    public searchSceneryNearby_args setIsjp(boolean isjp) {
      this.isjp = isjp;
      setIsjpIsSet(true);
      return this;
    }

    public void unsetIsjp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISJP_ISSET_ID);
    }

    /** Returns true if field isjp is set (has been assigned a value) and false otherwise */
    public boolean isSetIsjp() {
      return EncodingUtils.testBit(__isset_bitfield, __ISJP_ISSET_ID);
    }

    public void setIsjpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISJP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case LNG:
        if (value == null) {
          unsetLng();
        } else {
          setLng((Double)value);
        }
        break;

      case LAT:
        if (value == null) {
          unsetLat();
        } else {
          setLat((Double)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case SMALL_TYPE:
        if (value == null) {
          unsetSmallType();
        } else {
          setSmallType((String)value);
        }
        break;

      case BIG_TYPE:
        if (value == null) {
          unsetBigType();
        } else {
          setBigType((String)value);
        }
        break;

      case RANGE:
        if (value == null) {
          unsetRange();
        } else {
          setRange((Double)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGESIZE:
        if (value == null) {
          unsetPagesize();
        } else {
          setPagesize((Integer)value);
        }
        break;

      case ISJP:
        if (value == null) {
          unsetIsjp();
        } else {
          setIsjp((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case LNG:
        return Double.valueOf(getLng());

      case LAT:
        return Double.valueOf(getLat());

      case NAME:
        return getName();

      case SMALL_TYPE:
        return getSmallType();

      case BIG_TYPE:
        return getBigType();

      case RANGE:
        return Double.valueOf(getRange());

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGESIZE:
        return Integer.valueOf(getPagesize());

      case ISJP:
        return Boolean.valueOf(isIsjp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case LNG:
        return isSetLng();
      case LAT:
        return isSetLat();
      case NAME:
        return isSetName();
      case SMALL_TYPE:
        return isSetSmallType();
      case BIG_TYPE:
        return isSetBigType();
      case RANGE:
        return isSetRange();
      case PAGE:
        return isSetPage();
      case PAGESIZE:
        return isSetPagesize();
      case ISJP:
        return isSetIsjp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchSceneryNearby_args)
        return this.equals((searchSceneryNearby_args)that);
      return false;
    }

    public boolean equals(searchSceneryNearby_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_lng = true;
      boolean that_present_lng = true;
      if (this_present_lng || that_present_lng) {
        if (!(this_present_lng && that_present_lng))
          return false;
        if (this.lng != that.lng)
          return false;
      }

      boolean this_present_lat = true;
      boolean that_present_lat = true;
      if (this_present_lat || that_present_lat) {
        if (!(this_present_lat && that_present_lat))
          return false;
        if (this.lat != that.lat)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_smallType = true && this.isSetSmallType();
      boolean that_present_smallType = true && that.isSetSmallType();
      if (this_present_smallType || that_present_smallType) {
        if (!(this_present_smallType && that_present_smallType))
          return false;
        if (!this.smallType.equals(that.smallType))
          return false;
      }

      boolean this_present_bigType = true && this.isSetBigType();
      boolean that_present_bigType = true && that.isSetBigType();
      if (this_present_bigType || that_present_bigType) {
        if (!(this_present_bigType && that_present_bigType))
          return false;
        if (!this.bigType.equals(that.bigType))
          return false;
      }

      boolean this_present_range = true;
      boolean that_present_range = true;
      if (this_present_range || that_present_range) {
        if (!(this_present_range && that_present_range))
          return false;
        if (this.range != that.range)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pagesize = true;
      boolean that_present_pagesize = true;
      if (this_present_pagesize || that_present_pagesize) {
        if (!(this_present_pagesize && that_present_pagesize))
          return false;
        if (this.pagesize != that.pagesize)
          return false;
      }

      boolean this_present_isjp = true;
      boolean that_present_isjp = true;
      if (this_present_isjp || that_present_isjp) {
        if (!(this_present_isjp && that_present_isjp))
          return false;
        if (this.isjp != that.isjp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchSceneryNearby_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchSceneryNearby_args typedOther = (searchSceneryNearby_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLng()).compareTo(typedOther.isSetLng());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLng()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, typedOther.lng);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLat()).compareTo(typedOther.isSetLat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, typedOther.lat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSmallType()).compareTo(typedOther.isSetSmallType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSmallType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smallType, typedOther.smallType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBigType()).compareTo(typedOther.isSetBigType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigType, typedOther.bigType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRange()).compareTo(typedOther.isSetRange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, typedOther.range);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPagesize()).compareTo(typedOther.isSetPagesize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPagesize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesize, typedOther.pagesize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsjp()).compareTo(typedOther.isSetIsjp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsjp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isjp, typedOther.isjp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchSceneryNearby_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lng:");
      sb.append(this.lng);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lat:");
      sb.append(this.lat);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("smallType:");
      if (this.smallType == null) {
        sb.append("null");
      } else {
        sb.append(this.smallType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bigType:");
      if (this.bigType == null) {
        sb.append("null");
      } else {
        sb.append(this.bigType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("range:");
      sb.append(this.range);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pagesize:");
      sb.append(this.pagesize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isjp:");
      sb.append(this.isjp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchSceneryNearby_argsStandardSchemeFactory implements SchemeFactory {
      public searchSceneryNearby_argsStandardScheme getScheme() {
        return new searchSceneryNearby_argsStandardScheme();
      }
    }

    private static class searchSceneryNearby_argsStandardScheme extends StandardScheme<searchSceneryNearby_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchSceneryNearby_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LNG
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lng = iprot.readDouble();
                struct.setLngIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LAT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lat = iprot.readDouble();
                struct.setLatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SMALL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.smallType = iprot.readString();
                struct.setSmallTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // BIG_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bigType = iprot.readString();
                struct.setBigTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.range = iprot.readDouble();
                struct.setRangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // PAGESIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pagesize = iprot.readI32();
                struct.setPagesizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // ISJP
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isjp = iprot.readBool();
                struct.setIsjpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchSceneryNearby_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LNG_FIELD_DESC);
        oprot.writeDouble(struct.lng);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAT_FIELD_DESC);
        oprot.writeDouble(struct.lat);
        oprot.writeFieldEnd();
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.smallType != null) {
          oprot.writeFieldBegin(SMALL_TYPE_FIELD_DESC);
          oprot.writeString(struct.smallType);
          oprot.writeFieldEnd();
        }
        if (struct.bigType != null) {
          oprot.writeFieldBegin(BIG_TYPE_FIELD_DESC);
          oprot.writeString(struct.bigType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RANGE_FIELD_DESC);
        oprot.writeDouble(struct.range);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
        oprot.writeI32(struct.pagesize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ISJP_FIELD_DESC);
        oprot.writeBool(struct.isjp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchSceneryNearby_argsTupleSchemeFactory implements SchemeFactory {
      public searchSceneryNearby_argsTupleScheme getScheme() {
        return new searchSceneryNearby_argsTupleScheme();
      }
    }

    private static class searchSceneryNearby_argsTupleScheme extends TupleScheme<searchSceneryNearby_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchSceneryNearby_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetLng()) {
          optionals.set(1);
        }
        if (struct.isSetLat()) {
          optionals.set(2);
        }
        if (struct.isSetName()) {
          optionals.set(3);
        }
        if (struct.isSetSmallType()) {
          optionals.set(4);
        }
        if (struct.isSetBigType()) {
          optionals.set(5);
        }
        if (struct.isSetRange()) {
          optionals.set(6);
        }
        if (struct.isSetPage()) {
          optionals.set(7);
        }
        if (struct.isSetPagesize()) {
          optionals.set(8);
        }
        if (struct.isSetIsjp()) {
          optionals.set(9);
        }
        oprot.writeBitSet(optionals, 10);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetLng()) {
          oprot.writeDouble(struct.lng);
        }
        if (struct.isSetLat()) {
          oprot.writeDouble(struct.lat);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetSmallType()) {
          oprot.writeString(struct.smallType);
        }
        if (struct.isSetBigType()) {
          oprot.writeString(struct.bigType);
        }
        if (struct.isSetRange()) {
          oprot.writeDouble(struct.range);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPagesize()) {
          oprot.writeI32(struct.pagesize);
        }
        if (struct.isSetIsjp()) {
          oprot.writeBool(struct.isjp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchSceneryNearby_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(10);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lng = iprot.readDouble();
          struct.setLngIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lat = iprot.readDouble();
          struct.setLatIsSet(true);
        }
        if (incoming.get(3)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.smallType = iprot.readString();
          struct.setSmallTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.bigType = iprot.readString();
          struct.setBigTypeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.range = iprot.readDouble();
          struct.setRangeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(8)) {
          struct.pagesize = iprot.readI32();
          struct.setPagesizeIsSet(true);
        }
        if (incoming.get(9)) {
          struct.isjp = iprot.readBool();
          struct.setIsjpIsSet(true);
        }
      }
    }

  }

  public static class searchSceneryNearby_result implements org.apache.thrift.TBase<searchSceneryNearby_result, searchSceneryNearby_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchSceneryNearby_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchSceneryNearby_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchSceneryNearby_resultTupleSchemeFactory());
    }

    public Dm_SceneryList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_SceneryList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchSceneryNearby_result.class, metaDataMap);
    }

    public searchSceneryNearby_result() {
    }

    public searchSceneryNearby_result(
      Dm_SceneryList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchSceneryNearby_result(searchSceneryNearby_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_SceneryList(other.success);
      }
    }

    public searchSceneryNearby_result deepCopy() {
      return new searchSceneryNearby_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_SceneryList getSuccess() {
      return this.success;
    }

    public searchSceneryNearby_result setSuccess(Dm_SceneryList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_SceneryList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchSceneryNearby_result)
        return this.equals((searchSceneryNearby_result)that);
      return false;
    }

    public boolean equals(searchSceneryNearby_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchSceneryNearby_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchSceneryNearby_result typedOther = (searchSceneryNearby_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchSceneryNearby_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchSceneryNearby_resultStandardSchemeFactory implements SchemeFactory {
      public searchSceneryNearby_resultStandardScheme getScheme() {
        return new searchSceneryNearby_resultStandardScheme();
      }
    }

    private static class searchSceneryNearby_resultStandardScheme extends StandardScheme<searchSceneryNearby_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchSceneryNearby_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_SceneryList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchSceneryNearby_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchSceneryNearby_resultTupleSchemeFactory implements SchemeFactory {
      public searchSceneryNearby_resultTupleScheme getScheme() {
        return new searchSceneryNearby_resultTupleScheme();
      }
    }

    private static class searchSceneryNearby_resultTupleScheme extends TupleScheme<searchSceneryNearby_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchSceneryNearby_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchSceneryNearby_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_SceneryList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchScenerySimplifyNearby_args implements org.apache.thrift.TBase<searchScenerySimplifyNearby_args, searchScenerySimplifyNearby_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchScenerySimplifyNearby_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SMALL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("smallType", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField BIG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bigType", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("range", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesize", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField ISJP_FIELD_DESC = new org.apache.thrift.protocol.TField("isjp", org.apache.thrift.protocol.TType.BOOL, (short)10);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchScenerySimplifyNearby_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchScenerySimplifyNearby_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public double lng; // required
    public double lat; // required
    public String name; // required
    public String smallType; // required
    public String bigType; // required
    public double range; // required
    public int page; // required
    public int pagesize; // required
    public boolean isjp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      LNG((short)2, "lng"),
      LAT((short)3, "lat"),
      NAME((short)4, "name"),
      SMALL_TYPE((short)5, "smallType"),
      BIG_TYPE((short)6, "bigType"),
      RANGE((short)7, "range"),
      PAGE((short)8, "page"),
      PAGESIZE((short)9, "pagesize"),
      ISJP((short)10, "isjp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // LNG
            return LNG;
          case 3: // LAT
            return LAT;
          case 4: // NAME
            return NAME;
          case 5: // SMALL_TYPE
            return SMALL_TYPE;
          case 6: // BIG_TYPE
            return BIG_TYPE;
          case 7: // RANGE
            return RANGE;
          case 8: // PAGE
            return PAGE;
          case 9: // PAGESIZE
            return PAGESIZE;
          case 10: // ISJP
            return ISJP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LNG_ISSET_ID = 0;
    private static final int __LAT_ISSET_ID = 1;
    private static final int __RANGE_ISSET_ID = 2;
    private static final int __PAGE_ISSET_ID = 3;
    private static final int __PAGESIZE_ISSET_ID = 4;
    private static final int __ISJP_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SMALL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("smallType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BIG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bigType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RANGE, new org.apache.thrift.meta_data.FieldMetaData("range", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("pagesize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ISJP, new org.apache.thrift.meta_data.FieldMetaData("isjp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchScenerySimplifyNearby_args.class, metaDataMap);
    }

    public searchScenerySimplifyNearby_args() {
    }

    public searchScenerySimplifyNearby_args(
      String validstring,
      double lng,
      double lat,
      String name,
      String smallType,
      String bigType,
      double range,
      int page,
      int pagesize,
      boolean isjp)
    {
      this();
      this.validstring = validstring;
      this.lng = lng;
      setLngIsSet(true);
      this.lat = lat;
      setLatIsSet(true);
      this.name = name;
      this.smallType = smallType;
      this.bigType = bigType;
      this.range = range;
      setRangeIsSet(true);
      this.page = page;
      setPageIsSet(true);
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
      this.isjp = isjp;
      setIsjpIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchScenerySimplifyNearby_args(searchScenerySimplifyNearby_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      this.lng = other.lng;
      this.lat = other.lat;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetSmallType()) {
        this.smallType = other.smallType;
      }
      if (other.isSetBigType()) {
        this.bigType = other.bigType;
      }
      this.range = other.range;
      this.page = other.page;
      this.pagesize = other.pagesize;
      this.isjp = other.isjp;
    }

    public searchScenerySimplifyNearby_args deepCopy() {
      return new searchScenerySimplifyNearby_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      setLngIsSet(false);
      this.lng = 0.0;
      setLatIsSet(false);
      this.lat = 0.0;
      this.name = null;
      this.smallType = null;
      this.bigType = null;
      setRangeIsSet(false);
      this.range = 0.0;
      setPageIsSet(false);
      this.page = 0;
      setPagesizeIsSet(false);
      this.pagesize = 0;
      setIsjpIsSet(false);
      this.isjp = false;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchScenerySimplifyNearby_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public double getLng() {
      return this.lng;
    }

    public searchScenerySimplifyNearby_args setLng(double lng) {
      this.lng = lng;
      setLngIsSet(true);
      return this;
    }

    public void unsetLng() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LNG_ISSET_ID);
    }

    /** Returns true if field lng is set (has been assigned a value) and false otherwise */
    public boolean isSetLng() {
      return EncodingUtils.testBit(__isset_bitfield, __LNG_ISSET_ID);
    }

    public void setLngIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LNG_ISSET_ID, value);
    }

    public double getLat() {
      return this.lat;
    }

    public searchScenerySimplifyNearby_args setLat(double lat) {
      this.lat = lat;
      setLatIsSet(true);
      return this;
    }

    public void unsetLat() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAT_ISSET_ID);
    }

    /** Returns true if field lat is set (has been assigned a value) and false otherwise */
    public boolean isSetLat() {
      return EncodingUtils.testBit(__isset_bitfield, __LAT_ISSET_ID);
    }

    public void setLatIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAT_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public searchScenerySimplifyNearby_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getSmallType() {
      return this.smallType;
    }

    public searchScenerySimplifyNearby_args setSmallType(String smallType) {
      this.smallType = smallType;
      return this;
    }

    public void unsetSmallType() {
      this.smallType = null;
    }

    /** Returns true if field smallType is set (has been assigned a value) and false otherwise */
    public boolean isSetSmallType() {
      return this.smallType != null;
    }

    public void setSmallTypeIsSet(boolean value) {
      if (!value) {
        this.smallType = null;
      }
    }

    public String getBigType() {
      return this.bigType;
    }

    public searchScenerySimplifyNearby_args setBigType(String bigType) {
      this.bigType = bigType;
      return this;
    }

    public void unsetBigType() {
      this.bigType = null;
    }

    /** Returns true if field bigType is set (has been assigned a value) and false otherwise */
    public boolean isSetBigType() {
      return this.bigType != null;
    }

    public void setBigTypeIsSet(boolean value) {
      if (!value) {
        this.bigType = null;
      }
    }

    public double getRange() {
      return this.range;
    }

    public searchScenerySimplifyNearby_args setRange(double range) {
      this.range = range;
      setRangeIsSet(true);
      return this;
    }

    public void unsetRange() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGE_ISSET_ID);
    }

    /** Returns true if field range is set (has been assigned a value) and false otherwise */
    public boolean isSetRange() {
      return EncodingUtils.testBit(__isset_bitfield, __RANGE_ISSET_ID);
    }

    public void setRangeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGE_ISSET_ID, value);
    }

    public int getPage() {
      return this.page;
    }

    public searchScenerySimplifyNearby_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPagesize() {
      return this.pagesize;
    }

    public searchScenerySimplifyNearby_args setPagesize(int pagesize) {
      this.pagesize = pagesize;
      setPagesizeIsSet(true);
      return this;
    }

    public void unsetPagesize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pagesize is set (has been assigned a value) and false otherwise */
    public boolean isSetPagesize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPagesizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public boolean isIsjp() {
      return this.isjp;
    }

    public searchScenerySimplifyNearby_args setIsjp(boolean isjp) {
      this.isjp = isjp;
      setIsjpIsSet(true);
      return this;
    }

    public void unsetIsjp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISJP_ISSET_ID);
    }

    /** Returns true if field isjp is set (has been assigned a value) and false otherwise */
    public boolean isSetIsjp() {
      return EncodingUtils.testBit(__isset_bitfield, __ISJP_ISSET_ID);
    }

    public void setIsjpIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISJP_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case LNG:
        if (value == null) {
          unsetLng();
        } else {
          setLng((Double)value);
        }
        break;

      case LAT:
        if (value == null) {
          unsetLat();
        } else {
          setLat((Double)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case SMALL_TYPE:
        if (value == null) {
          unsetSmallType();
        } else {
          setSmallType((String)value);
        }
        break;

      case BIG_TYPE:
        if (value == null) {
          unsetBigType();
        } else {
          setBigType((String)value);
        }
        break;

      case RANGE:
        if (value == null) {
          unsetRange();
        } else {
          setRange((Double)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGESIZE:
        if (value == null) {
          unsetPagesize();
        } else {
          setPagesize((Integer)value);
        }
        break;

      case ISJP:
        if (value == null) {
          unsetIsjp();
        } else {
          setIsjp((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case LNG:
        return Double.valueOf(getLng());

      case LAT:
        return Double.valueOf(getLat());

      case NAME:
        return getName();

      case SMALL_TYPE:
        return getSmallType();

      case BIG_TYPE:
        return getBigType();

      case RANGE:
        return Double.valueOf(getRange());

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGESIZE:
        return Integer.valueOf(getPagesize());

      case ISJP:
        return Boolean.valueOf(isIsjp());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case LNG:
        return isSetLng();
      case LAT:
        return isSetLat();
      case NAME:
        return isSetName();
      case SMALL_TYPE:
        return isSetSmallType();
      case BIG_TYPE:
        return isSetBigType();
      case RANGE:
        return isSetRange();
      case PAGE:
        return isSetPage();
      case PAGESIZE:
        return isSetPagesize();
      case ISJP:
        return isSetIsjp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchScenerySimplifyNearby_args)
        return this.equals((searchScenerySimplifyNearby_args)that);
      return false;
    }

    public boolean equals(searchScenerySimplifyNearby_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_lng = true;
      boolean that_present_lng = true;
      if (this_present_lng || that_present_lng) {
        if (!(this_present_lng && that_present_lng))
          return false;
        if (this.lng != that.lng)
          return false;
      }

      boolean this_present_lat = true;
      boolean that_present_lat = true;
      if (this_present_lat || that_present_lat) {
        if (!(this_present_lat && that_present_lat))
          return false;
        if (this.lat != that.lat)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_smallType = true && this.isSetSmallType();
      boolean that_present_smallType = true && that.isSetSmallType();
      if (this_present_smallType || that_present_smallType) {
        if (!(this_present_smallType && that_present_smallType))
          return false;
        if (!this.smallType.equals(that.smallType))
          return false;
      }

      boolean this_present_bigType = true && this.isSetBigType();
      boolean that_present_bigType = true && that.isSetBigType();
      if (this_present_bigType || that_present_bigType) {
        if (!(this_present_bigType && that_present_bigType))
          return false;
        if (!this.bigType.equals(that.bigType))
          return false;
      }

      boolean this_present_range = true;
      boolean that_present_range = true;
      if (this_present_range || that_present_range) {
        if (!(this_present_range && that_present_range))
          return false;
        if (this.range != that.range)
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pagesize = true;
      boolean that_present_pagesize = true;
      if (this_present_pagesize || that_present_pagesize) {
        if (!(this_present_pagesize && that_present_pagesize))
          return false;
        if (this.pagesize != that.pagesize)
          return false;
      }

      boolean this_present_isjp = true;
      boolean that_present_isjp = true;
      if (this_present_isjp || that_present_isjp) {
        if (!(this_present_isjp && that_present_isjp))
          return false;
        if (this.isjp != that.isjp)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchScenerySimplifyNearby_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchScenerySimplifyNearby_args typedOther = (searchScenerySimplifyNearby_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLng()).compareTo(typedOther.isSetLng());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLng()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, typedOther.lng);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLat()).compareTo(typedOther.isSetLat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, typedOther.lat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSmallType()).compareTo(typedOther.isSetSmallType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSmallType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smallType, typedOther.smallType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBigType()).compareTo(typedOther.isSetBigType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBigType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bigType, typedOther.bigType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRange()).compareTo(typedOther.isSetRange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range, typedOther.range);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPagesize()).compareTo(typedOther.isSetPagesize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPagesize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesize, typedOther.pagesize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsjp()).compareTo(typedOther.isSetIsjp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsjp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isjp, typedOther.isjp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchScenerySimplifyNearby_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lng:");
      sb.append(this.lng);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lat:");
      sb.append(this.lat);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("smallType:");
      if (this.smallType == null) {
        sb.append("null");
      } else {
        sb.append(this.smallType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bigType:");
      if (this.bigType == null) {
        sb.append("null");
      } else {
        sb.append(this.bigType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("range:");
      sb.append(this.range);
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pagesize:");
      sb.append(this.pagesize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isjp:");
      sb.append(this.isjp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchScenerySimplifyNearby_argsStandardSchemeFactory implements SchemeFactory {
      public searchScenerySimplifyNearby_argsStandardScheme getScheme() {
        return new searchScenerySimplifyNearby_argsStandardScheme();
      }
    }

    private static class searchScenerySimplifyNearby_argsStandardScheme extends StandardScheme<searchScenerySimplifyNearby_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchScenerySimplifyNearby_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LNG
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lng = iprot.readDouble();
                struct.setLngIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LAT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lat = iprot.readDouble();
                struct.setLatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SMALL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.smallType = iprot.readString();
                struct.setSmallTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // BIG_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bigType = iprot.readString();
                struct.setBigTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.range = iprot.readDouble();
                struct.setRangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // PAGESIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pagesize = iprot.readI32();
                struct.setPagesizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // ISJP
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isjp = iprot.readBool();
                struct.setIsjpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchScenerySimplifyNearby_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LNG_FIELD_DESC);
        oprot.writeDouble(struct.lng);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAT_FIELD_DESC);
        oprot.writeDouble(struct.lat);
        oprot.writeFieldEnd();
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.smallType != null) {
          oprot.writeFieldBegin(SMALL_TYPE_FIELD_DESC);
          oprot.writeString(struct.smallType);
          oprot.writeFieldEnd();
        }
        if (struct.bigType != null) {
          oprot.writeFieldBegin(BIG_TYPE_FIELD_DESC);
          oprot.writeString(struct.bigType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RANGE_FIELD_DESC);
        oprot.writeDouble(struct.range);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
        oprot.writeI32(struct.pagesize);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ISJP_FIELD_DESC);
        oprot.writeBool(struct.isjp);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchScenerySimplifyNearby_argsTupleSchemeFactory implements SchemeFactory {
      public searchScenerySimplifyNearby_argsTupleScheme getScheme() {
        return new searchScenerySimplifyNearby_argsTupleScheme();
      }
    }

    private static class searchScenerySimplifyNearby_argsTupleScheme extends TupleScheme<searchScenerySimplifyNearby_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchScenerySimplifyNearby_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetLng()) {
          optionals.set(1);
        }
        if (struct.isSetLat()) {
          optionals.set(2);
        }
        if (struct.isSetName()) {
          optionals.set(3);
        }
        if (struct.isSetSmallType()) {
          optionals.set(4);
        }
        if (struct.isSetBigType()) {
          optionals.set(5);
        }
        if (struct.isSetRange()) {
          optionals.set(6);
        }
        if (struct.isSetPage()) {
          optionals.set(7);
        }
        if (struct.isSetPagesize()) {
          optionals.set(8);
        }
        if (struct.isSetIsjp()) {
          optionals.set(9);
        }
        oprot.writeBitSet(optionals, 10);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetLng()) {
          oprot.writeDouble(struct.lng);
        }
        if (struct.isSetLat()) {
          oprot.writeDouble(struct.lat);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetSmallType()) {
          oprot.writeString(struct.smallType);
        }
        if (struct.isSetBigType()) {
          oprot.writeString(struct.bigType);
        }
        if (struct.isSetRange()) {
          oprot.writeDouble(struct.range);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPagesize()) {
          oprot.writeI32(struct.pagesize);
        }
        if (struct.isSetIsjp()) {
          oprot.writeBool(struct.isjp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchScenerySimplifyNearby_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(10);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lng = iprot.readDouble();
          struct.setLngIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lat = iprot.readDouble();
          struct.setLatIsSet(true);
        }
        if (incoming.get(3)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.smallType = iprot.readString();
          struct.setSmallTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.bigType = iprot.readString();
          struct.setBigTypeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.range = iprot.readDouble();
          struct.setRangeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(8)) {
          struct.pagesize = iprot.readI32();
          struct.setPagesizeIsSet(true);
        }
        if (incoming.get(9)) {
          struct.isjp = iprot.readBool();
          struct.setIsjpIsSet(true);
        }
      }
    }

  }

  public static class searchScenerySimplifyNearby_result implements org.apache.thrift.TBase<searchScenerySimplifyNearby_result, searchScenerySimplifyNearby_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchScenerySimplifyNearby_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchScenerySimplifyNearby_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchScenerySimplifyNearby_resultTupleSchemeFactory());
    }

    public Dm_ScenerySimplifyList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_ScenerySimplifyList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchScenerySimplifyNearby_result.class, metaDataMap);
    }

    public searchScenerySimplifyNearby_result() {
    }

    public searchScenerySimplifyNearby_result(
      Dm_ScenerySimplifyList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchScenerySimplifyNearby_result(searchScenerySimplifyNearby_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_ScenerySimplifyList(other.success);
      }
    }

    public searchScenerySimplifyNearby_result deepCopy() {
      return new searchScenerySimplifyNearby_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_ScenerySimplifyList getSuccess() {
      return this.success;
    }

    public searchScenerySimplifyNearby_result setSuccess(Dm_ScenerySimplifyList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_ScenerySimplifyList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchScenerySimplifyNearby_result)
        return this.equals((searchScenerySimplifyNearby_result)that);
      return false;
    }

    public boolean equals(searchScenerySimplifyNearby_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchScenerySimplifyNearby_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchScenerySimplifyNearby_result typedOther = (searchScenerySimplifyNearby_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchScenerySimplifyNearby_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchScenerySimplifyNearby_resultStandardSchemeFactory implements SchemeFactory {
      public searchScenerySimplifyNearby_resultStandardScheme getScheme() {
        return new searchScenerySimplifyNearby_resultStandardScheme();
      }
    }

    private static class searchScenerySimplifyNearby_resultStandardScheme extends StandardScheme<searchScenerySimplifyNearby_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchScenerySimplifyNearby_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_ScenerySimplifyList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchScenerySimplifyNearby_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchScenerySimplifyNearby_resultTupleSchemeFactory implements SchemeFactory {
      public searchScenerySimplifyNearby_resultTupleScheme getScheme() {
        return new searchScenerySimplifyNearby_resultTupleScheme();
      }
    }

    private static class searchScenerySimplifyNearby_resultTupleScheme extends TupleScheme<searchScenerySimplifyNearby_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchScenerySimplifyNearby_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchScenerySimplifyNearby_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_ScenerySimplifyList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchCultureScenery_args implements org.apache.thrift.TBase<searchCultureScenery_args, searchCultureScenery_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchCultureScenery_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchCultureScenery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchCultureScenery_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchCultureScenery_args.class, metaDataMap);
    }

    public searchCultureScenery_args() {
    }

    public searchCultureScenery_args(
      String validstring,
      String id)
    {
      this();
      this.validstring = validstring;
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchCultureScenery_args(searchCultureScenery_args other) {
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public searchCultureScenery_args deepCopy() {
      return new searchCultureScenery_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.id = null;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchCultureScenery_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public searchCultureScenery_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchCultureScenery_args)
        return this.equals((searchCultureScenery_args)that);
      return false;
    }

    public boolean equals(searchCultureScenery_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchCultureScenery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchCultureScenery_args typedOther = (searchCultureScenery_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchCultureScenery_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchCultureScenery_argsStandardSchemeFactory implements SchemeFactory {
      public searchCultureScenery_argsStandardScheme getScheme() {
        return new searchCultureScenery_argsStandardScheme();
      }
    }

    private static class searchCultureScenery_argsStandardScheme extends StandardScheme<searchCultureScenery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchCultureScenery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchCultureScenery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchCultureScenery_argsTupleSchemeFactory implements SchemeFactory {
      public searchCultureScenery_argsTupleScheme getScheme() {
        return new searchCultureScenery_argsTupleScheme();
      }
    }

    private static class searchCultureScenery_argsTupleScheme extends TupleScheme<searchCultureScenery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchCultureScenery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchCultureScenery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class searchCultureScenery_result implements org.apache.thrift.TBase<searchCultureScenery_result, searchCultureScenery_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchCultureScenery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchCultureScenery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchCultureScenery_resultTupleSchemeFactory());
    }

    public Dm_SceneryOne success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_SceneryOne.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchCultureScenery_result.class, metaDataMap);
    }

    public searchCultureScenery_result() {
    }

    public searchCultureScenery_result(
      Dm_SceneryOne success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchCultureScenery_result(searchCultureScenery_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_SceneryOne(other.success);
      }
    }

    public searchCultureScenery_result deepCopy() {
      return new searchCultureScenery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_SceneryOne getSuccess() {
      return this.success;
    }

    public searchCultureScenery_result setSuccess(Dm_SceneryOne success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_SceneryOne)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchCultureScenery_result)
        return this.equals((searchCultureScenery_result)that);
      return false;
    }

    public boolean equals(searchCultureScenery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchCultureScenery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchCultureScenery_result typedOther = (searchCultureScenery_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchCultureScenery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchCultureScenery_resultStandardSchemeFactory implements SchemeFactory {
      public searchCultureScenery_resultStandardScheme getScheme() {
        return new searchCultureScenery_resultStandardScheme();
      }
    }

    private static class searchCultureScenery_resultStandardScheme extends StandardScheme<searchCultureScenery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchCultureScenery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_SceneryOne();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchCultureScenery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchCultureScenery_resultTupleSchemeFactory implements SchemeFactory {
      public searchCultureScenery_resultTupleScheme getScheme() {
        return new searchCultureScenery_resultTupleScheme();
      }
    }

    private static class searchCultureScenery_resultTupleScheme extends TupleScheme<searchCultureScenery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchCultureScenery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchCultureScenery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_SceneryOne();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPreImageList_args implements org.apache.thrift.TBase<getPreImageList_args, getPreImageList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPreImageList_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPreImageList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPreImageList_argsTupleSchemeFactory());
    }

    public String validstring; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPreImageList_args.class, metaDataMap);
    }

    public getPreImageList_args() {
    }

    public getPreImageList_args(
      String validstring)
    {
      this();
      this.validstring = validstring;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPreImageList_args(getPreImageList_args other) {
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
    }

    public getPreImageList_args deepCopy() {
      return new getPreImageList_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public getPreImageList_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPreImageList_args)
        return this.equals((getPreImageList_args)that);
      return false;
    }

    public boolean equals(getPreImageList_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPreImageList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPreImageList_args typedOther = (getPreImageList_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPreImageList_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPreImageList_argsStandardSchemeFactory implements SchemeFactory {
      public getPreImageList_argsStandardScheme getScheme() {
        return new getPreImageList_argsStandardScheme();
      }
    }

    private static class getPreImageList_argsStandardScheme extends StandardScheme<getPreImageList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPreImageList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPreImageList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPreImageList_argsTupleSchemeFactory implements SchemeFactory {
      public getPreImageList_argsTupleScheme getScheme() {
        return new getPreImageList_argsTupleScheme();
      }
    }

    private static class getPreImageList_argsTupleScheme extends TupleScheme<getPreImageList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPreImageList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPreImageList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
      }
    }

  }

  public static class getPreImageList_result implements org.apache.thrift.TBase<getPreImageList_result, getPreImageList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPreImageList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPreImageList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPreImageList_resultTupleSchemeFactory());
    }

    public Dm_PreImageList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_PreImageList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPreImageList_result.class, metaDataMap);
    }

    public getPreImageList_result() {
    }

    public getPreImageList_result(
      Dm_PreImageList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPreImageList_result(getPreImageList_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_PreImageList(other.success);
      }
    }

    public getPreImageList_result deepCopy() {
      return new getPreImageList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_PreImageList getSuccess() {
      return this.success;
    }

    public getPreImageList_result setSuccess(Dm_PreImageList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_PreImageList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPreImageList_result)
        return this.equals((getPreImageList_result)that);
      return false;
    }

    public boolean equals(getPreImageList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getPreImageList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getPreImageList_result typedOther = (getPreImageList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPreImageList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPreImageList_resultStandardSchemeFactory implements SchemeFactory {
      public getPreImageList_resultStandardScheme getScheme() {
        return new getPreImageList_resultStandardScheme();
      }
    }

    private static class getPreImageList_resultStandardScheme extends StandardScheme<getPreImageList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPreImageList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_PreImageList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPreImageList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPreImageList_resultTupleSchemeFactory implements SchemeFactory {
      public getPreImageList_resultTupleScheme getScheme() {
        return new getPreImageList_resultTupleScheme();
      }
    }

    private static class getPreImageList_resultTupleScheme extends TupleScheme<getPreImageList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPreImageList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPreImageList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_PreImageList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class activityType_args implements org.apache.thrift.TBase<activityType_args, activityType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activityType_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activityType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activityType_argsTupleSchemeFactory());
    }

    public String validstring; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activityType_args.class, metaDataMap);
    }

    public activityType_args() {
    }

    public activityType_args(
      String validstring)
    {
      this();
      this.validstring = validstring;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activityType_args(activityType_args other) {
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
    }

    public activityType_args deepCopy() {
      return new activityType_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public activityType_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activityType_args)
        return this.equals((activityType_args)that);
      return false;
    }

    public boolean equals(activityType_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(activityType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      activityType_args typedOther = (activityType_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activityType_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activityType_argsStandardSchemeFactory implements SchemeFactory {
      public activityType_argsStandardScheme getScheme() {
        return new activityType_argsStandardScheme();
      }
    }

    private static class activityType_argsStandardScheme extends StandardScheme<activityType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activityType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activityType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activityType_argsTupleSchemeFactory implements SchemeFactory {
      public activityType_argsTupleScheme getScheme() {
        return new activityType_argsTupleScheme();
      }
    }

    private static class activityType_argsTupleScheme extends TupleScheme<activityType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activityType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activityType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
      }
    }

  }

  public static class activityType_result implements org.apache.thrift.TBase<activityType_result, activityType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activityType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activityType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activityType_resultTupleSchemeFactory());
    }

    public Dm_ActivityTypeList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_ActivityTypeList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activityType_result.class, metaDataMap);
    }

    public activityType_result() {
    }

    public activityType_result(
      Dm_ActivityTypeList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activityType_result(activityType_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_ActivityTypeList(other.success);
      }
    }

    public activityType_result deepCopy() {
      return new activityType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_ActivityTypeList getSuccess() {
      return this.success;
    }

    public activityType_result setSuccess(Dm_ActivityTypeList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_ActivityTypeList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activityType_result)
        return this.equals((activityType_result)that);
      return false;
    }

    public boolean equals(activityType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(activityType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      activityType_result typedOther = (activityType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activityType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activityType_resultStandardSchemeFactory implements SchemeFactory {
      public activityType_resultStandardScheme getScheme() {
        return new activityType_resultStandardScheme();
      }
    }

    private static class activityType_resultStandardScheme extends StandardScheme<activityType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activityType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_ActivityTypeList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activityType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activityType_resultTupleSchemeFactory implements SchemeFactory {
      public activityType_resultTupleScheme getScheme() {
        return new activityType_resultTupleScheme();
      }
    }

    private static class activityType_resultTupleScheme extends TupleScheme<activityType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activityType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activityType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_ActivityTypeList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchActivityByType_args implements org.apache.thrift.TBase<searchActivityByType_args, searchActivityByType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchActivityByType_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchActivityByType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchActivityByType_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String typeName; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      TYPE_NAME((short)2, "typeName"),
      PAGE((short)3, "page"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // TYPE_NAME
            return TYPE_NAME;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchActivityByType_args.class, metaDataMap);
    }

    public searchActivityByType_args() {
    }

    public searchActivityByType_args(
      String validstring,
      String typeName,
      int page,
      int pageSize)
    {
      this();
      this.validstring = validstring;
      this.typeName = typeName;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchActivityByType_args(searchActivityByType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searchActivityByType_args deepCopy() {
      return new searchActivityByType_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.typeName = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchActivityByType_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getTypeName() {
      return this.typeName;
    }

    public searchActivityByType_args setTypeName(String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchActivityByType_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searchActivityByType_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case TYPE_NAME:
        return getTypeName();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case TYPE_NAME:
        return isSetTypeName();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchActivityByType_args)
        return this.equals((searchActivityByType_args)that);
      return false;
    }

    public boolean equals(searchActivityByType_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchActivityByType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchActivityByType_args typedOther = (searchActivityByType_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeName()).compareTo(typedOther.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, typedOther.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchActivityByType_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchActivityByType_argsStandardSchemeFactory implements SchemeFactory {
      public searchActivityByType_argsStandardScheme getScheme() {
        return new searchActivityByType_argsStandardScheme();
      }
    }

    private static class searchActivityByType_argsStandardScheme extends StandardScheme<searchActivityByType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchActivityByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchActivityByType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchActivityByType_argsTupleSchemeFactory implements SchemeFactory {
      public searchActivityByType_argsTupleScheme getScheme() {
        return new searchActivityByType_argsTupleScheme();
      }
    }

    private static class searchActivityByType_argsTupleScheme extends TupleScheme<searchActivityByType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchActivityByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetTypeName()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchActivityByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searchActivityByType_result implements org.apache.thrift.TBase<searchActivityByType_result, searchActivityByType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchActivityByType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchActivityByType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchActivityByType_resultTupleSchemeFactory());
    }

    public Dm_ActivityList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_ActivityList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchActivityByType_result.class, metaDataMap);
    }

    public searchActivityByType_result() {
    }

    public searchActivityByType_result(
      Dm_ActivityList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchActivityByType_result(searchActivityByType_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_ActivityList(other.success);
      }
    }

    public searchActivityByType_result deepCopy() {
      return new searchActivityByType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_ActivityList getSuccess() {
      return this.success;
    }

    public searchActivityByType_result setSuccess(Dm_ActivityList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_ActivityList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchActivityByType_result)
        return this.equals((searchActivityByType_result)that);
      return false;
    }

    public boolean equals(searchActivityByType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchActivityByType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchActivityByType_result typedOther = (searchActivityByType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchActivityByType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchActivityByType_resultStandardSchemeFactory implements SchemeFactory {
      public searchActivityByType_resultStandardScheme getScheme() {
        return new searchActivityByType_resultStandardScheme();
      }
    }

    private static class searchActivityByType_resultStandardScheme extends StandardScheme<searchActivityByType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchActivityByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_ActivityList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchActivityByType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchActivityByType_resultTupleSchemeFactory implements SchemeFactory {
      public searchActivityByType_resultTupleScheme getScheme() {
        return new searchActivityByType_resultTupleScheme();
      }
    }

    private static class searchActivityByType_resultTupleScheme extends TupleScheme<searchActivityByType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchActivityByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchActivityByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_ActivityList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchActivitySimplifyByType_args implements org.apache.thrift.TBase<searchActivitySimplifyByType_args, searchActivitySimplifyByType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchActivitySimplifyByType_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchActivitySimplifyByType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchActivitySimplifyByType_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String typeName; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      TYPE_NAME((short)2, "typeName"),
      PAGE((short)3, "page"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // TYPE_NAME
            return TYPE_NAME;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchActivitySimplifyByType_args.class, metaDataMap);
    }

    public searchActivitySimplifyByType_args() {
    }

    public searchActivitySimplifyByType_args(
      String validstring,
      String typeName,
      int page,
      int pageSize)
    {
      this();
      this.validstring = validstring;
      this.typeName = typeName;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchActivitySimplifyByType_args(searchActivitySimplifyByType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searchActivitySimplifyByType_args deepCopy() {
      return new searchActivitySimplifyByType_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.typeName = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchActivitySimplifyByType_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getTypeName() {
      return this.typeName;
    }

    public searchActivitySimplifyByType_args setTypeName(String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchActivitySimplifyByType_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searchActivitySimplifyByType_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case TYPE_NAME:
        return getTypeName();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case TYPE_NAME:
        return isSetTypeName();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchActivitySimplifyByType_args)
        return this.equals((searchActivitySimplifyByType_args)that);
      return false;
    }

    public boolean equals(searchActivitySimplifyByType_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchActivitySimplifyByType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchActivitySimplifyByType_args typedOther = (searchActivitySimplifyByType_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeName()).compareTo(typedOther.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, typedOther.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchActivitySimplifyByType_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchActivitySimplifyByType_argsStandardSchemeFactory implements SchemeFactory {
      public searchActivitySimplifyByType_argsStandardScheme getScheme() {
        return new searchActivitySimplifyByType_argsStandardScheme();
      }
    }

    private static class searchActivitySimplifyByType_argsStandardScheme extends StandardScheme<searchActivitySimplifyByType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchActivitySimplifyByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchActivitySimplifyByType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchActivitySimplifyByType_argsTupleSchemeFactory implements SchemeFactory {
      public searchActivitySimplifyByType_argsTupleScheme getScheme() {
        return new searchActivitySimplifyByType_argsTupleScheme();
      }
    }

    private static class searchActivitySimplifyByType_argsTupleScheme extends TupleScheme<searchActivitySimplifyByType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchActivitySimplifyByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetTypeName()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchActivitySimplifyByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searchActivitySimplifyByType_result implements org.apache.thrift.TBase<searchActivitySimplifyByType_result, searchActivitySimplifyByType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchActivitySimplifyByType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchActivitySimplifyByType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchActivitySimplifyByType_resultTupleSchemeFactory());
    }

    public Dm_ActivitySimplifyList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_ActivitySimplifyList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchActivitySimplifyByType_result.class, metaDataMap);
    }

    public searchActivitySimplifyByType_result() {
    }

    public searchActivitySimplifyByType_result(
      Dm_ActivitySimplifyList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchActivitySimplifyByType_result(searchActivitySimplifyByType_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_ActivitySimplifyList(other.success);
      }
    }

    public searchActivitySimplifyByType_result deepCopy() {
      return new searchActivitySimplifyByType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_ActivitySimplifyList getSuccess() {
      return this.success;
    }

    public searchActivitySimplifyByType_result setSuccess(Dm_ActivitySimplifyList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_ActivitySimplifyList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchActivitySimplifyByType_result)
        return this.equals((searchActivitySimplifyByType_result)that);
      return false;
    }

    public boolean equals(searchActivitySimplifyByType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchActivitySimplifyByType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchActivitySimplifyByType_result typedOther = (searchActivitySimplifyByType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchActivitySimplifyByType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchActivitySimplifyByType_resultStandardSchemeFactory implements SchemeFactory {
      public searchActivitySimplifyByType_resultStandardScheme getScheme() {
        return new searchActivitySimplifyByType_resultStandardScheme();
      }
    }

    private static class searchActivitySimplifyByType_resultStandardScheme extends StandardScheme<searchActivitySimplifyByType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchActivitySimplifyByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_ActivitySimplifyList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchActivitySimplifyByType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchActivitySimplifyByType_resultTupleSchemeFactory implements SchemeFactory {
      public searchActivitySimplifyByType_resultTupleScheme getScheme() {
        return new searchActivitySimplifyByType_resultTupleScheme();
      }
    }

    private static class searchActivitySimplifyByType_resultTupleScheme extends TupleScheme<searchActivitySimplifyByType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchActivitySimplifyByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchActivitySimplifyByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_ActivitySimplifyList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchActivity_args implements org.apache.thrift.TBase<searchActivity_args, searchActivity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchActivity_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activityName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INITIATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("initiator", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("company", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchActivity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchActivity_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String activityName; // required
    public String initiator; // required
    public String company; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      ACTIVITY_NAME((short)2, "activityName"),
      INITIATOR((short)3, "initiator"),
      COMPANY((short)4, "company"),
      PAGE((short)5, "page"),
      PAGE_SIZE((short)6, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // ACTIVITY_NAME
            return ACTIVITY_NAME;
          case 3: // INITIATOR
            return INITIATOR;
          case 4: // COMPANY
            return COMPANY;
          case 5: // PAGE
            return PAGE;
          case 6: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("activityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INITIATOR, new org.apache.thrift.meta_data.FieldMetaData("initiator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMPANY, new org.apache.thrift.meta_data.FieldMetaData("company", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchActivity_args.class, metaDataMap);
    }

    public searchActivity_args() {
    }

    public searchActivity_args(
      String validstring,
      String activityName,
      String initiator,
      String company,
      int page,
      int pageSize)
    {
      this();
      this.validstring = validstring;
      this.activityName = activityName;
      this.initiator = initiator;
      this.company = company;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchActivity_args(searchActivity_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetActivityName()) {
        this.activityName = other.activityName;
      }
      if (other.isSetInitiator()) {
        this.initiator = other.initiator;
      }
      if (other.isSetCompany()) {
        this.company = other.company;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searchActivity_args deepCopy() {
      return new searchActivity_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.activityName = null;
      this.initiator = null;
      this.company = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchActivity_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getActivityName() {
      return this.activityName;
    }

    public searchActivity_args setActivityName(String activityName) {
      this.activityName = activityName;
      return this;
    }

    public void unsetActivityName() {
      this.activityName = null;
    }

    /** Returns true if field activityName is set (has been assigned a value) and false otherwise */
    public boolean isSetActivityName() {
      return this.activityName != null;
    }

    public void setActivityNameIsSet(boolean value) {
      if (!value) {
        this.activityName = null;
      }
    }

    public String getInitiator() {
      return this.initiator;
    }

    public searchActivity_args setInitiator(String initiator) {
      this.initiator = initiator;
      return this;
    }

    public void unsetInitiator() {
      this.initiator = null;
    }

    /** Returns true if field initiator is set (has been assigned a value) and false otherwise */
    public boolean isSetInitiator() {
      return this.initiator != null;
    }

    public void setInitiatorIsSet(boolean value) {
      if (!value) {
        this.initiator = null;
      }
    }

    public String getCompany() {
      return this.company;
    }

    public searchActivity_args setCompany(String company) {
      this.company = company;
      return this;
    }

    public void unsetCompany() {
      this.company = null;
    }

    /** Returns true if field company is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany() {
      return this.company != null;
    }

    public void setCompanyIsSet(boolean value) {
      if (!value) {
        this.company = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchActivity_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searchActivity_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case ACTIVITY_NAME:
        if (value == null) {
          unsetActivityName();
        } else {
          setActivityName((String)value);
        }
        break;

      case INITIATOR:
        if (value == null) {
          unsetInitiator();
        } else {
          setInitiator((String)value);
        }
        break;

      case COMPANY:
        if (value == null) {
          unsetCompany();
        } else {
          setCompany((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case ACTIVITY_NAME:
        return getActivityName();

      case INITIATOR:
        return getInitiator();

      case COMPANY:
        return getCompany();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case ACTIVITY_NAME:
        return isSetActivityName();
      case INITIATOR:
        return isSetInitiator();
      case COMPANY:
        return isSetCompany();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchActivity_args)
        return this.equals((searchActivity_args)that);
      return false;
    }

    public boolean equals(searchActivity_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_activityName = true && this.isSetActivityName();
      boolean that_present_activityName = true && that.isSetActivityName();
      if (this_present_activityName || that_present_activityName) {
        if (!(this_present_activityName && that_present_activityName))
          return false;
        if (!this.activityName.equals(that.activityName))
          return false;
      }

      boolean this_present_initiator = true && this.isSetInitiator();
      boolean that_present_initiator = true && that.isSetInitiator();
      if (this_present_initiator || that_present_initiator) {
        if (!(this_present_initiator && that_present_initiator))
          return false;
        if (!this.initiator.equals(that.initiator))
          return false;
      }

      boolean this_present_company = true && this.isSetCompany();
      boolean that_present_company = true && that.isSetCompany();
      if (this_present_company || that_present_company) {
        if (!(this_present_company && that_present_company))
          return false;
        if (!this.company.equals(that.company))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchActivity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchActivity_args typedOther = (searchActivity_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActivityName()).compareTo(typedOther.isSetActivityName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivityName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityName, typedOther.activityName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInitiator()).compareTo(typedOther.isSetInitiator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInitiator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initiator, typedOther.initiator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCompany()).compareTo(typedOther.isSetCompany());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company, typedOther.company);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchActivity_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activityName:");
      if (this.activityName == null) {
        sb.append("null");
      } else {
        sb.append(this.activityName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("initiator:");
      if (this.initiator == null) {
        sb.append("null");
      } else {
        sb.append(this.initiator);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("company:");
      if (this.company == null) {
        sb.append("null");
      } else {
        sb.append(this.company);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchActivity_argsStandardSchemeFactory implements SchemeFactory {
      public searchActivity_argsStandardScheme getScheme() {
        return new searchActivity_argsStandardScheme();
      }
    }

    private static class searchActivity_argsStandardScheme extends StandardScheme<searchActivity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchActivity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVITY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activityName = iprot.readString();
                struct.setActivityNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INITIATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.initiator = iprot.readString();
                struct.setInitiatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COMPANY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.company = iprot.readString();
                struct.setCompanyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchActivity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.activityName != null) {
          oprot.writeFieldBegin(ACTIVITY_NAME_FIELD_DESC);
          oprot.writeString(struct.activityName);
          oprot.writeFieldEnd();
        }
        if (struct.initiator != null) {
          oprot.writeFieldBegin(INITIATOR_FIELD_DESC);
          oprot.writeString(struct.initiator);
          oprot.writeFieldEnd();
        }
        if (struct.company != null) {
          oprot.writeFieldBegin(COMPANY_FIELD_DESC);
          oprot.writeString(struct.company);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchActivity_argsTupleSchemeFactory implements SchemeFactory {
      public searchActivity_argsTupleScheme getScheme() {
        return new searchActivity_argsTupleScheme();
      }
    }

    private static class searchActivity_argsTupleScheme extends TupleScheme<searchActivity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchActivity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetActivityName()) {
          optionals.set(1);
        }
        if (struct.isSetInitiator()) {
          optionals.set(2);
        }
        if (struct.isSetCompany()) {
          optionals.set(3);
        }
        if (struct.isSetPage()) {
          optionals.set(4);
        }
        if (struct.isSetPageSize()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetActivityName()) {
          oprot.writeString(struct.activityName);
        }
        if (struct.isSetInitiator()) {
          oprot.writeString(struct.initiator);
        }
        if (struct.isSetCompany()) {
          oprot.writeString(struct.company);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchActivity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activityName = iprot.readString();
          struct.setActivityNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.initiator = iprot.readString();
          struct.setInitiatorIsSet(true);
        }
        if (incoming.get(3)) {
          struct.company = iprot.readString();
          struct.setCompanyIsSet(true);
        }
        if (incoming.get(4)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(5)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searchActivity_result implements org.apache.thrift.TBase<searchActivity_result, searchActivity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchActivity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchActivity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchActivity_resultTupleSchemeFactory());
    }

    public Dm_ActivityList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_ActivityList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchActivity_result.class, metaDataMap);
    }

    public searchActivity_result() {
    }

    public searchActivity_result(
      Dm_ActivityList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchActivity_result(searchActivity_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_ActivityList(other.success);
      }
    }

    public searchActivity_result deepCopy() {
      return new searchActivity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_ActivityList getSuccess() {
      return this.success;
    }

    public searchActivity_result setSuccess(Dm_ActivityList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_ActivityList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchActivity_result)
        return this.equals((searchActivity_result)that);
      return false;
    }

    public boolean equals(searchActivity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchActivity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchActivity_result typedOther = (searchActivity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchActivity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchActivity_resultStandardSchemeFactory implements SchemeFactory {
      public searchActivity_resultStandardScheme getScheme() {
        return new searchActivity_resultStandardScheme();
      }
    }

    private static class searchActivity_resultStandardScheme extends StandardScheme<searchActivity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchActivity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_ActivityList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchActivity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchActivity_resultTupleSchemeFactory implements SchemeFactory {
      public searchActivity_resultTupleScheme getScheme() {
        return new searchActivity_resultTupleScheme();
      }
    }

    private static class searchActivity_resultTupleScheme extends TupleScheme<searchActivity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchActivity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchActivity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_ActivityList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchActivitySimplify_args implements org.apache.thrift.TBase<searchActivitySimplify_args, searchActivitySimplify_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchActivitySimplify_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVITY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("activityName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INITIATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("initiator", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField("company", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchActivitySimplify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchActivitySimplify_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String activityName; // required
    public String initiator; // required
    public String company; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      ACTIVITY_NAME((short)2, "activityName"),
      INITIATOR((short)3, "initiator"),
      COMPANY((short)4, "company"),
      PAGE((short)5, "page"),
      PAGE_SIZE((short)6, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // ACTIVITY_NAME
            return ACTIVITY_NAME;
          case 3: // INITIATOR
            return INITIATOR;
          case 4: // COMPANY
            return COMPANY;
          case 5: // PAGE
            return PAGE;
          case 6: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTIVITY_NAME, new org.apache.thrift.meta_data.FieldMetaData("activityName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INITIATOR, new org.apache.thrift.meta_data.FieldMetaData("initiator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COMPANY, new org.apache.thrift.meta_data.FieldMetaData("company", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchActivitySimplify_args.class, metaDataMap);
    }

    public searchActivitySimplify_args() {
    }

    public searchActivitySimplify_args(
      String validstring,
      String activityName,
      String initiator,
      String company,
      int page,
      int pageSize)
    {
      this();
      this.validstring = validstring;
      this.activityName = activityName;
      this.initiator = initiator;
      this.company = company;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchActivitySimplify_args(searchActivitySimplify_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetActivityName()) {
        this.activityName = other.activityName;
      }
      if (other.isSetInitiator()) {
        this.initiator = other.initiator;
      }
      if (other.isSetCompany()) {
        this.company = other.company;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searchActivitySimplify_args deepCopy() {
      return new searchActivitySimplify_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.activityName = null;
      this.initiator = null;
      this.company = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchActivitySimplify_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getActivityName() {
      return this.activityName;
    }

    public searchActivitySimplify_args setActivityName(String activityName) {
      this.activityName = activityName;
      return this;
    }

    public void unsetActivityName() {
      this.activityName = null;
    }

    /** Returns true if field activityName is set (has been assigned a value) and false otherwise */
    public boolean isSetActivityName() {
      return this.activityName != null;
    }

    public void setActivityNameIsSet(boolean value) {
      if (!value) {
        this.activityName = null;
      }
    }

    public String getInitiator() {
      return this.initiator;
    }

    public searchActivitySimplify_args setInitiator(String initiator) {
      this.initiator = initiator;
      return this;
    }

    public void unsetInitiator() {
      this.initiator = null;
    }

    /** Returns true if field initiator is set (has been assigned a value) and false otherwise */
    public boolean isSetInitiator() {
      return this.initiator != null;
    }

    public void setInitiatorIsSet(boolean value) {
      if (!value) {
        this.initiator = null;
      }
    }

    public String getCompany() {
      return this.company;
    }

    public searchActivitySimplify_args setCompany(String company) {
      this.company = company;
      return this;
    }

    public void unsetCompany() {
      this.company = null;
    }

    /** Returns true if field company is set (has been assigned a value) and false otherwise */
    public boolean isSetCompany() {
      return this.company != null;
    }

    public void setCompanyIsSet(boolean value) {
      if (!value) {
        this.company = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchActivitySimplify_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searchActivitySimplify_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case ACTIVITY_NAME:
        if (value == null) {
          unsetActivityName();
        } else {
          setActivityName((String)value);
        }
        break;

      case INITIATOR:
        if (value == null) {
          unsetInitiator();
        } else {
          setInitiator((String)value);
        }
        break;

      case COMPANY:
        if (value == null) {
          unsetCompany();
        } else {
          setCompany((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case ACTIVITY_NAME:
        return getActivityName();

      case INITIATOR:
        return getInitiator();

      case COMPANY:
        return getCompany();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case ACTIVITY_NAME:
        return isSetActivityName();
      case INITIATOR:
        return isSetInitiator();
      case COMPANY:
        return isSetCompany();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchActivitySimplify_args)
        return this.equals((searchActivitySimplify_args)that);
      return false;
    }

    public boolean equals(searchActivitySimplify_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_activityName = true && this.isSetActivityName();
      boolean that_present_activityName = true && that.isSetActivityName();
      if (this_present_activityName || that_present_activityName) {
        if (!(this_present_activityName && that_present_activityName))
          return false;
        if (!this.activityName.equals(that.activityName))
          return false;
      }

      boolean this_present_initiator = true && this.isSetInitiator();
      boolean that_present_initiator = true && that.isSetInitiator();
      if (this_present_initiator || that_present_initiator) {
        if (!(this_present_initiator && that_present_initiator))
          return false;
        if (!this.initiator.equals(that.initiator))
          return false;
      }

      boolean this_present_company = true && this.isSetCompany();
      boolean that_present_company = true && that.isSetCompany();
      if (this_present_company || that_present_company) {
        if (!(this_present_company && that_present_company))
          return false;
        if (!this.company.equals(that.company))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchActivitySimplify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchActivitySimplify_args typedOther = (searchActivitySimplify_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActivityName()).compareTo(typedOther.isSetActivityName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivityName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activityName, typedOther.activityName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInitiator()).compareTo(typedOther.isSetInitiator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInitiator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initiator, typedOther.initiator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCompany()).compareTo(typedOther.isSetCompany());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompany()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company, typedOther.company);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchActivitySimplify_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("activityName:");
      if (this.activityName == null) {
        sb.append("null");
      } else {
        sb.append(this.activityName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("initiator:");
      if (this.initiator == null) {
        sb.append("null");
      } else {
        sb.append(this.initiator);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("company:");
      if (this.company == null) {
        sb.append("null");
      } else {
        sb.append(this.company);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchActivitySimplify_argsStandardSchemeFactory implements SchemeFactory {
      public searchActivitySimplify_argsStandardScheme getScheme() {
        return new searchActivitySimplify_argsStandardScheme();
      }
    }

    private static class searchActivitySimplify_argsStandardScheme extends StandardScheme<searchActivitySimplify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchActivitySimplify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVITY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.activityName = iprot.readString();
                struct.setActivityNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INITIATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.initiator = iprot.readString();
                struct.setInitiatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COMPANY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.company = iprot.readString();
                struct.setCompanyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchActivitySimplify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.activityName != null) {
          oprot.writeFieldBegin(ACTIVITY_NAME_FIELD_DESC);
          oprot.writeString(struct.activityName);
          oprot.writeFieldEnd();
        }
        if (struct.initiator != null) {
          oprot.writeFieldBegin(INITIATOR_FIELD_DESC);
          oprot.writeString(struct.initiator);
          oprot.writeFieldEnd();
        }
        if (struct.company != null) {
          oprot.writeFieldBegin(COMPANY_FIELD_DESC);
          oprot.writeString(struct.company);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchActivitySimplify_argsTupleSchemeFactory implements SchemeFactory {
      public searchActivitySimplify_argsTupleScheme getScheme() {
        return new searchActivitySimplify_argsTupleScheme();
      }
    }

    private static class searchActivitySimplify_argsTupleScheme extends TupleScheme<searchActivitySimplify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchActivitySimplify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetActivityName()) {
          optionals.set(1);
        }
        if (struct.isSetInitiator()) {
          optionals.set(2);
        }
        if (struct.isSetCompany()) {
          optionals.set(3);
        }
        if (struct.isSetPage()) {
          optionals.set(4);
        }
        if (struct.isSetPageSize()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetActivityName()) {
          oprot.writeString(struct.activityName);
        }
        if (struct.isSetInitiator()) {
          oprot.writeString(struct.initiator);
        }
        if (struct.isSetCompany()) {
          oprot.writeString(struct.company);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchActivitySimplify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activityName = iprot.readString();
          struct.setActivityNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.initiator = iprot.readString();
          struct.setInitiatorIsSet(true);
        }
        if (incoming.get(3)) {
          struct.company = iprot.readString();
          struct.setCompanyIsSet(true);
        }
        if (incoming.get(4)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(5)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searchActivitySimplify_result implements org.apache.thrift.TBase<searchActivitySimplify_result, searchActivitySimplify_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchActivitySimplify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchActivitySimplify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchActivitySimplify_resultTupleSchemeFactory());
    }

    public Dm_ActivitySimplifyList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_ActivitySimplifyList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchActivitySimplify_result.class, metaDataMap);
    }

    public searchActivitySimplify_result() {
    }

    public searchActivitySimplify_result(
      Dm_ActivitySimplifyList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchActivitySimplify_result(searchActivitySimplify_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_ActivitySimplifyList(other.success);
      }
    }

    public searchActivitySimplify_result deepCopy() {
      return new searchActivitySimplify_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_ActivitySimplifyList getSuccess() {
      return this.success;
    }

    public searchActivitySimplify_result setSuccess(Dm_ActivitySimplifyList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_ActivitySimplifyList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchActivitySimplify_result)
        return this.equals((searchActivitySimplify_result)that);
      return false;
    }

    public boolean equals(searchActivitySimplify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchActivitySimplify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchActivitySimplify_result typedOther = (searchActivitySimplify_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchActivitySimplify_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchActivitySimplify_resultStandardSchemeFactory implements SchemeFactory {
      public searchActivitySimplify_resultStandardScheme getScheme() {
        return new searchActivitySimplify_resultStandardScheme();
      }
    }

    private static class searchActivitySimplify_resultStandardScheme extends StandardScheme<searchActivitySimplify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchActivitySimplify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_ActivitySimplifyList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchActivitySimplify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchActivitySimplify_resultTupleSchemeFactory implements SchemeFactory {
      public searchActivitySimplify_resultTupleScheme getScheme() {
        return new searchActivitySimplify_resultTupleScheme();
      }
    }

    private static class searchActivitySimplify_resultTupleScheme extends TupleScheme<searchActivitySimplify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchActivitySimplify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchActivitySimplify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_ActivitySimplifyList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchHotActivitySimplify_args implements org.apache.thrift.TBase<searchHotActivitySimplify_args, searchHotActivitySimplify_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchHotActivitySimplify_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField HOT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("hotType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchHotActivitySimplify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchHotActivitySimplify_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String hotType; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      HOT_TYPE((short)2, "hotType"),
      PAGE((short)3, "page"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // HOT_TYPE
            return HOT_TYPE;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("hotType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchHotActivitySimplify_args.class, metaDataMap);
    }

    public searchHotActivitySimplify_args() {
    }

    public searchHotActivitySimplify_args(
      String validstring,
      String hotType,
      int page,
      int pageSize)
    {
      this();
      this.validstring = validstring;
      this.hotType = hotType;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchHotActivitySimplify_args(searchHotActivitySimplify_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetHotType()) {
        this.hotType = other.hotType;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searchHotActivitySimplify_args deepCopy() {
      return new searchHotActivitySimplify_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.hotType = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchHotActivitySimplify_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getHotType() {
      return this.hotType;
    }

    public searchHotActivitySimplify_args setHotType(String hotType) {
      this.hotType = hotType;
      return this;
    }

    public void unsetHotType() {
      this.hotType = null;
    }

    /** Returns true if field hotType is set (has been assigned a value) and false otherwise */
    public boolean isSetHotType() {
      return this.hotType != null;
    }

    public void setHotTypeIsSet(boolean value) {
      if (!value) {
        this.hotType = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchHotActivitySimplify_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searchHotActivitySimplify_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case HOT_TYPE:
        if (value == null) {
          unsetHotType();
        } else {
          setHotType((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case HOT_TYPE:
        return getHotType();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case HOT_TYPE:
        return isSetHotType();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchHotActivitySimplify_args)
        return this.equals((searchHotActivitySimplify_args)that);
      return false;
    }

    public boolean equals(searchHotActivitySimplify_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_hotType = true && this.isSetHotType();
      boolean that_present_hotType = true && that.isSetHotType();
      if (this_present_hotType || that_present_hotType) {
        if (!(this_present_hotType && that_present_hotType))
          return false;
        if (!this.hotType.equals(that.hotType))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchHotActivitySimplify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchHotActivitySimplify_args typedOther = (searchHotActivitySimplify_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHotType()).compareTo(typedOther.isSetHotType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHotType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hotType, typedOther.hotType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchHotActivitySimplify_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hotType:");
      if (this.hotType == null) {
        sb.append("null");
      } else {
        sb.append(this.hotType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchHotActivitySimplify_argsStandardSchemeFactory implements SchemeFactory {
      public searchHotActivitySimplify_argsStandardScheme getScheme() {
        return new searchHotActivitySimplify_argsStandardScheme();
      }
    }

    private static class searchHotActivitySimplify_argsStandardScheme extends StandardScheme<searchHotActivitySimplify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchHotActivitySimplify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HOT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hotType = iprot.readString();
                struct.setHotTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchHotActivitySimplify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.hotType != null) {
          oprot.writeFieldBegin(HOT_TYPE_FIELD_DESC);
          oprot.writeString(struct.hotType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchHotActivitySimplify_argsTupleSchemeFactory implements SchemeFactory {
      public searchHotActivitySimplify_argsTupleScheme getScheme() {
        return new searchHotActivitySimplify_argsTupleScheme();
      }
    }

    private static class searchHotActivitySimplify_argsTupleScheme extends TupleScheme<searchHotActivitySimplify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchHotActivitySimplify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetHotType()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetHotType()) {
          oprot.writeString(struct.hotType);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchHotActivitySimplify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hotType = iprot.readString();
          struct.setHotTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searchHotActivitySimplify_result implements org.apache.thrift.TBase<searchHotActivitySimplify_result, searchHotActivitySimplify_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchHotActivitySimplify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchHotActivitySimplify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchHotActivitySimplify_resultTupleSchemeFactory());
    }

    public Dm_ActivitySimplifyList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_ActivitySimplifyList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchHotActivitySimplify_result.class, metaDataMap);
    }

    public searchHotActivitySimplify_result() {
    }

    public searchHotActivitySimplify_result(
      Dm_ActivitySimplifyList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchHotActivitySimplify_result(searchHotActivitySimplify_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_ActivitySimplifyList(other.success);
      }
    }

    public searchHotActivitySimplify_result deepCopy() {
      return new searchHotActivitySimplify_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_ActivitySimplifyList getSuccess() {
      return this.success;
    }

    public searchHotActivitySimplify_result setSuccess(Dm_ActivitySimplifyList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_ActivitySimplifyList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchHotActivitySimplify_result)
        return this.equals((searchHotActivitySimplify_result)that);
      return false;
    }

    public boolean equals(searchHotActivitySimplify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchHotActivitySimplify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchHotActivitySimplify_result typedOther = (searchHotActivitySimplify_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchHotActivitySimplify_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchHotActivitySimplify_resultStandardSchemeFactory implements SchemeFactory {
      public searchHotActivitySimplify_resultStandardScheme getScheme() {
        return new searchHotActivitySimplify_resultStandardScheme();
      }
    }

    private static class searchHotActivitySimplify_resultStandardScheme extends StandardScheme<searchHotActivitySimplify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchHotActivitySimplify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_ActivitySimplifyList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchHotActivitySimplify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchHotActivitySimplify_resultTupleSchemeFactory implements SchemeFactory {
      public searchHotActivitySimplify_resultTupleScheme getScheme() {
        return new searchHotActivitySimplify_resultTupleScheme();
      }
    }

    private static class searchHotActivitySimplify_resultTupleScheme extends TupleScheme<searchHotActivitySimplify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchHotActivitySimplify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchHotActivitySimplify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_ActivitySimplifyList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class viewActivity_args implements org.apache.thrift.TBase<viewActivity_args, viewActivity_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("viewActivity_args");

    private static final org.apache.thrift.protocol.TField VALID_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new viewActivity_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new viewActivity_argsTupleSchemeFactory());
    }

    public String validString; // required
    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALID_STRING((short)1, "validString"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALID_STRING
            return VALID_STRING;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALID_STRING, new org.apache.thrift.meta_data.FieldMetaData("validString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(viewActivity_args.class, metaDataMap);
    }

    public viewActivity_args() {
    }

    public viewActivity_args(
      String validString,
      String id)
    {
      this();
      this.validString = validString;
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public viewActivity_args(viewActivity_args other) {
      if (other.isSetValidString()) {
        this.validString = other.validString;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public viewActivity_args deepCopy() {
      return new viewActivity_args(this);
    }

    @Override
    public void clear() {
      this.validString = null;
      this.id = null;
    }

    public String getValidString() {
      return this.validString;
    }

    public viewActivity_args setValidString(String validString) {
      this.validString = validString;
      return this;
    }

    public void unsetValidString() {
      this.validString = null;
    }

    /** Returns true if field validString is set (has been assigned a value) and false otherwise */
    public boolean isSetValidString() {
      return this.validString != null;
    }

    public void setValidStringIsSet(boolean value) {
      if (!value) {
        this.validString = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public viewActivity_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALID_STRING:
        if (value == null) {
          unsetValidString();
        } else {
          setValidString((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALID_STRING:
        return getValidString();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALID_STRING:
        return isSetValidString();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof viewActivity_args)
        return this.equals((viewActivity_args)that);
      return false;
    }

    public boolean equals(viewActivity_args that) {
      if (that == null)
        return false;

      boolean this_present_validString = true && this.isSetValidString();
      boolean that_present_validString = true && that.isSetValidString();
      if (this_present_validString || that_present_validString) {
        if (!(this_present_validString && that_present_validString))
          return false;
        if (!this.validString.equals(that.validString))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(viewActivity_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      viewActivity_args typedOther = (viewActivity_args)other;

      lastComparison = Boolean.valueOf(isSetValidString()).compareTo(typedOther.isSetValidString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validString, typedOther.validString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("viewActivity_args(");
      boolean first = true;

      sb.append("validString:");
      if (this.validString == null) {
        sb.append("null");
      } else {
        sb.append(this.validString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class viewActivity_argsStandardSchemeFactory implements SchemeFactory {
      public viewActivity_argsStandardScheme getScheme() {
        return new viewActivity_argsStandardScheme();
      }
    }

    private static class viewActivity_argsStandardScheme extends StandardScheme<viewActivity_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, viewActivity_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALID_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validString = iprot.readString();
                struct.setValidStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, viewActivity_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validString != null) {
          oprot.writeFieldBegin(VALID_STRING_FIELD_DESC);
          oprot.writeString(struct.validString);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class viewActivity_argsTupleSchemeFactory implements SchemeFactory {
      public viewActivity_argsTupleScheme getScheme() {
        return new viewActivity_argsTupleScheme();
      }
    }

    private static class viewActivity_argsTupleScheme extends TupleScheme<viewActivity_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, viewActivity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidString()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetValidString()) {
          oprot.writeString(struct.validString);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, viewActivity_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.validString = iprot.readString();
          struct.setValidStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class viewActivity_result implements org.apache.thrift.TBase<viewActivity_result, viewActivity_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("viewActivity_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new viewActivity_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new viewActivity_resultTupleSchemeFactory());
    }

    public Dm_ActivityOne success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_ActivityOne.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(viewActivity_result.class, metaDataMap);
    }

    public viewActivity_result() {
    }

    public viewActivity_result(
      Dm_ActivityOne success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public viewActivity_result(viewActivity_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_ActivityOne(other.success);
      }
    }

    public viewActivity_result deepCopy() {
      return new viewActivity_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_ActivityOne getSuccess() {
      return this.success;
    }

    public viewActivity_result setSuccess(Dm_ActivityOne success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_ActivityOne)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof viewActivity_result)
        return this.equals((viewActivity_result)that);
      return false;
    }

    public boolean equals(viewActivity_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(viewActivity_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      viewActivity_result typedOther = (viewActivity_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("viewActivity_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class viewActivity_resultStandardSchemeFactory implements SchemeFactory {
      public viewActivity_resultStandardScheme getScheme() {
        return new viewActivity_resultStandardScheme();
      }
    }

    private static class viewActivity_resultStandardScheme extends StandardScheme<viewActivity_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, viewActivity_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_ActivityOne();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, viewActivity_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class viewActivity_resultTupleSchemeFactory implements SchemeFactory {
      public viewActivity_resultTupleScheme getScheme() {
        return new viewActivity_resultTupleScheme();
      }
    }

    private static class viewActivity_resultTupleScheme extends TupleScheme<viewActivity_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, viewActivity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, viewActivity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_ActivityOne();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class baikeType_args implements org.apache.thrift.TBase<baikeType_args, baikeType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("baikeType_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new baikeType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new baikeType_argsTupleSchemeFactory());
    }

    public String validstring; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(baikeType_args.class, metaDataMap);
    }

    public baikeType_args() {
    }

    public baikeType_args(
      String validstring)
    {
      this();
      this.validstring = validstring;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public baikeType_args(baikeType_args other) {
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
    }

    public baikeType_args deepCopy() {
      return new baikeType_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public baikeType_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof baikeType_args)
        return this.equals((baikeType_args)that);
      return false;
    }

    public boolean equals(baikeType_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(baikeType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      baikeType_args typedOther = (baikeType_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("baikeType_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class baikeType_argsStandardSchemeFactory implements SchemeFactory {
      public baikeType_argsStandardScheme getScheme() {
        return new baikeType_argsStandardScheme();
      }
    }

    private static class baikeType_argsStandardScheme extends StandardScheme<baikeType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, baikeType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, baikeType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class baikeType_argsTupleSchemeFactory implements SchemeFactory {
      public baikeType_argsTupleScheme getScheme() {
        return new baikeType_argsTupleScheme();
      }
    }

    private static class baikeType_argsTupleScheme extends TupleScheme<baikeType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, baikeType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, baikeType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
      }
    }

  }

  public static class baikeType_result implements org.apache.thrift.TBase<baikeType_result, baikeType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("baikeType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new baikeType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new baikeType_resultTupleSchemeFactory());
    }

    public Dm_BaikeTypeList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_BaikeTypeList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(baikeType_result.class, metaDataMap);
    }

    public baikeType_result() {
    }

    public baikeType_result(
      Dm_BaikeTypeList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public baikeType_result(baikeType_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_BaikeTypeList(other.success);
      }
    }

    public baikeType_result deepCopy() {
      return new baikeType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_BaikeTypeList getSuccess() {
      return this.success;
    }

    public baikeType_result setSuccess(Dm_BaikeTypeList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_BaikeTypeList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof baikeType_result)
        return this.equals((baikeType_result)that);
      return false;
    }

    public boolean equals(baikeType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(baikeType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      baikeType_result typedOther = (baikeType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("baikeType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class baikeType_resultStandardSchemeFactory implements SchemeFactory {
      public baikeType_resultStandardScheme getScheme() {
        return new baikeType_resultStandardScheme();
      }
    }

    private static class baikeType_resultStandardScheme extends StandardScheme<baikeType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, baikeType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_BaikeTypeList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, baikeType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class baikeType_resultTupleSchemeFactory implements SchemeFactory {
      public baikeType_resultTupleScheme getScheme() {
        return new baikeType_resultTupleScheme();
      }
    }

    private static class baikeType_resultTupleScheme extends TupleScheme<baikeType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, baikeType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, baikeType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_BaikeTypeList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchBaikeByType_args implements org.apache.thrift.TBase<searchBaikeByType_args, searchBaikeByType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchBaikeByType_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchBaikeByType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchBaikeByType_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String typeName; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      TYPE_NAME((short)2, "typeName"),
      PAGE((short)3, "page"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // TYPE_NAME
            return TYPE_NAME;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchBaikeByType_args.class, metaDataMap);
    }

    public searchBaikeByType_args() {
    }

    public searchBaikeByType_args(
      String validstring,
      String typeName,
      int page,
      int pageSize)
    {
      this();
      this.validstring = validstring;
      this.typeName = typeName;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchBaikeByType_args(searchBaikeByType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searchBaikeByType_args deepCopy() {
      return new searchBaikeByType_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.typeName = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchBaikeByType_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getTypeName() {
      return this.typeName;
    }

    public searchBaikeByType_args setTypeName(String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchBaikeByType_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searchBaikeByType_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case TYPE_NAME:
        return getTypeName();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case TYPE_NAME:
        return isSetTypeName();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchBaikeByType_args)
        return this.equals((searchBaikeByType_args)that);
      return false;
    }

    public boolean equals(searchBaikeByType_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchBaikeByType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchBaikeByType_args typedOther = (searchBaikeByType_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeName()).compareTo(typedOther.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, typedOther.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchBaikeByType_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchBaikeByType_argsStandardSchemeFactory implements SchemeFactory {
      public searchBaikeByType_argsStandardScheme getScheme() {
        return new searchBaikeByType_argsStandardScheme();
      }
    }

    private static class searchBaikeByType_argsStandardScheme extends StandardScheme<searchBaikeByType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchBaikeByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchBaikeByType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchBaikeByType_argsTupleSchemeFactory implements SchemeFactory {
      public searchBaikeByType_argsTupleScheme getScheme() {
        return new searchBaikeByType_argsTupleScheme();
      }
    }

    private static class searchBaikeByType_argsTupleScheme extends TupleScheme<searchBaikeByType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchBaikeByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetTypeName()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchBaikeByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searchBaikeByType_result implements org.apache.thrift.TBase<searchBaikeByType_result, searchBaikeByType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchBaikeByType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchBaikeByType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchBaikeByType_resultTupleSchemeFactory());
    }

    public Dm_BaikeList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_BaikeList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchBaikeByType_result.class, metaDataMap);
    }

    public searchBaikeByType_result() {
    }

    public searchBaikeByType_result(
      Dm_BaikeList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchBaikeByType_result(searchBaikeByType_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_BaikeList(other.success);
      }
    }

    public searchBaikeByType_result deepCopy() {
      return new searchBaikeByType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_BaikeList getSuccess() {
      return this.success;
    }

    public searchBaikeByType_result setSuccess(Dm_BaikeList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_BaikeList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchBaikeByType_result)
        return this.equals((searchBaikeByType_result)that);
      return false;
    }

    public boolean equals(searchBaikeByType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchBaikeByType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchBaikeByType_result typedOther = (searchBaikeByType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchBaikeByType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchBaikeByType_resultStandardSchemeFactory implements SchemeFactory {
      public searchBaikeByType_resultStandardScheme getScheme() {
        return new searchBaikeByType_resultStandardScheme();
      }
    }

    private static class searchBaikeByType_resultStandardScheme extends StandardScheme<searchBaikeByType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchBaikeByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_BaikeList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchBaikeByType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchBaikeByType_resultTupleSchemeFactory implements SchemeFactory {
      public searchBaikeByType_resultTupleScheme getScheme() {
        return new searchBaikeByType_resultTupleScheme();
      }
    }

    private static class searchBaikeByType_resultTupleScheme extends TupleScheme<searchBaikeByType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchBaikeByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchBaikeByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_BaikeList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchBaikeSimplifyByType_args implements org.apache.thrift.TBase<searchBaikeSimplifyByType_args, searchBaikeSimplifyByType_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchBaikeSimplifyByType_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchBaikeSimplifyByType_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchBaikeSimplifyByType_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String typeName; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      TYPE_NAME((short)2, "typeName"),
      PAGE((short)3, "page"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // TYPE_NAME
            return TYPE_NAME;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchBaikeSimplifyByType_args.class, metaDataMap);
    }

    public searchBaikeSimplifyByType_args() {
    }

    public searchBaikeSimplifyByType_args(
      String validstring,
      String typeName,
      int page,
      int pageSize)
    {
      this();
      this.validstring = validstring;
      this.typeName = typeName;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchBaikeSimplifyByType_args(searchBaikeSimplifyByType_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searchBaikeSimplifyByType_args deepCopy() {
      return new searchBaikeSimplifyByType_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.typeName = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchBaikeSimplifyByType_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getTypeName() {
      return this.typeName;
    }

    public searchBaikeSimplifyByType_args setTypeName(String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchBaikeSimplifyByType_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searchBaikeSimplifyByType_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case TYPE_NAME:
        return getTypeName();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case TYPE_NAME:
        return isSetTypeName();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchBaikeSimplifyByType_args)
        return this.equals((searchBaikeSimplifyByType_args)that);
      return false;
    }

    public boolean equals(searchBaikeSimplifyByType_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchBaikeSimplifyByType_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchBaikeSimplifyByType_args typedOther = (searchBaikeSimplifyByType_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTypeName()).compareTo(typedOther.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, typedOther.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchBaikeSimplifyByType_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchBaikeSimplifyByType_argsStandardSchemeFactory implements SchemeFactory {
      public searchBaikeSimplifyByType_argsStandardScheme getScheme() {
        return new searchBaikeSimplifyByType_argsStandardScheme();
      }
    }

    private static class searchBaikeSimplifyByType_argsStandardScheme extends StandardScheme<searchBaikeSimplifyByType_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchBaikeSimplifyByType_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchBaikeSimplifyByType_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchBaikeSimplifyByType_argsTupleSchemeFactory implements SchemeFactory {
      public searchBaikeSimplifyByType_argsTupleScheme getScheme() {
        return new searchBaikeSimplifyByType_argsTupleScheme();
      }
    }

    private static class searchBaikeSimplifyByType_argsTupleScheme extends TupleScheme<searchBaikeSimplifyByType_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchBaikeSimplifyByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetTypeName()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchBaikeSimplifyByType_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searchBaikeSimplifyByType_result implements org.apache.thrift.TBase<searchBaikeSimplifyByType_result, searchBaikeSimplifyByType_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchBaikeSimplifyByType_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchBaikeSimplifyByType_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchBaikeSimplifyByType_resultTupleSchemeFactory());
    }

    public Dm_BaikeSimplifyList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_BaikeSimplifyList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchBaikeSimplifyByType_result.class, metaDataMap);
    }

    public searchBaikeSimplifyByType_result() {
    }

    public searchBaikeSimplifyByType_result(
      Dm_BaikeSimplifyList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchBaikeSimplifyByType_result(searchBaikeSimplifyByType_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_BaikeSimplifyList(other.success);
      }
    }

    public searchBaikeSimplifyByType_result deepCopy() {
      return new searchBaikeSimplifyByType_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_BaikeSimplifyList getSuccess() {
      return this.success;
    }

    public searchBaikeSimplifyByType_result setSuccess(Dm_BaikeSimplifyList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_BaikeSimplifyList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchBaikeSimplifyByType_result)
        return this.equals((searchBaikeSimplifyByType_result)that);
      return false;
    }

    public boolean equals(searchBaikeSimplifyByType_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchBaikeSimplifyByType_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchBaikeSimplifyByType_result typedOther = (searchBaikeSimplifyByType_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchBaikeSimplifyByType_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchBaikeSimplifyByType_resultStandardSchemeFactory implements SchemeFactory {
      public searchBaikeSimplifyByType_resultStandardScheme getScheme() {
        return new searchBaikeSimplifyByType_resultStandardScheme();
      }
    }

    private static class searchBaikeSimplifyByType_resultStandardScheme extends StandardScheme<searchBaikeSimplifyByType_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchBaikeSimplifyByType_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_BaikeSimplifyList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchBaikeSimplifyByType_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchBaikeSimplifyByType_resultTupleSchemeFactory implements SchemeFactory {
      public searchBaikeSimplifyByType_resultTupleScheme getScheme() {
        return new searchBaikeSimplifyByType_resultTupleScheme();
      }
    }

    private static class searchBaikeSimplifyByType_resultTupleScheme extends TupleScheme<searchBaikeSimplifyByType_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchBaikeSimplifyByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchBaikeSimplifyByType_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_BaikeSimplifyList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchBaikeByName_args implements org.apache.thrift.TBase<searchBaikeByName_args, searchBaikeByName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchBaikeByName_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyWord", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchBaikeByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchBaikeByName_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String keyWord; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      KEY_WORD((short)2, "keyWord"),
      PAGE((short)3, "page"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // KEY_WORD
            return KEY_WORD;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY_WORD, new org.apache.thrift.meta_data.FieldMetaData("keyWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchBaikeByName_args.class, metaDataMap);
    }

    public searchBaikeByName_args() {
    }

    public searchBaikeByName_args(
      String validstring,
      String keyWord,
      int page,
      int pageSize)
    {
      this();
      this.validstring = validstring;
      this.keyWord = keyWord;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchBaikeByName_args(searchBaikeByName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetKeyWord()) {
        this.keyWord = other.keyWord;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searchBaikeByName_args deepCopy() {
      return new searchBaikeByName_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.keyWord = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchBaikeByName_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getKeyWord() {
      return this.keyWord;
    }

    public searchBaikeByName_args setKeyWord(String keyWord) {
      this.keyWord = keyWord;
      return this;
    }

    public void unsetKeyWord() {
      this.keyWord = null;
    }

    /** Returns true if field keyWord is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyWord() {
      return this.keyWord != null;
    }

    public void setKeyWordIsSet(boolean value) {
      if (!value) {
        this.keyWord = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchBaikeByName_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searchBaikeByName_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case KEY_WORD:
        if (value == null) {
          unsetKeyWord();
        } else {
          setKeyWord((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case KEY_WORD:
        return getKeyWord();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case KEY_WORD:
        return isSetKeyWord();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchBaikeByName_args)
        return this.equals((searchBaikeByName_args)that);
      return false;
    }

    public boolean equals(searchBaikeByName_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_keyWord = true && this.isSetKeyWord();
      boolean that_present_keyWord = true && that.isSetKeyWord();
      if (this_present_keyWord || that_present_keyWord) {
        if (!(this_present_keyWord && that_present_keyWord))
          return false;
        if (!this.keyWord.equals(that.keyWord))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchBaikeByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchBaikeByName_args typedOther = (searchBaikeByName_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyWord()).compareTo(typedOther.isSetKeyWord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyWord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyWord, typedOther.keyWord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchBaikeByName_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyWord:");
      if (this.keyWord == null) {
        sb.append("null");
      } else {
        sb.append(this.keyWord);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchBaikeByName_argsStandardSchemeFactory implements SchemeFactory {
      public searchBaikeByName_argsStandardScheme getScheme() {
        return new searchBaikeByName_argsStandardScheme();
      }
    }

    private static class searchBaikeByName_argsStandardScheme extends StandardScheme<searchBaikeByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchBaikeByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_WORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyWord = iprot.readString();
                struct.setKeyWordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchBaikeByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.keyWord != null) {
          oprot.writeFieldBegin(KEY_WORD_FIELD_DESC);
          oprot.writeString(struct.keyWord);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchBaikeByName_argsTupleSchemeFactory implements SchemeFactory {
      public searchBaikeByName_argsTupleScheme getScheme() {
        return new searchBaikeByName_argsTupleScheme();
      }
    }

    private static class searchBaikeByName_argsTupleScheme extends TupleScheme<searchBaikeByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchBaikeByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetKeyWord()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetKeyWord()) {
          oprot.writeString(struct.keyWord);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchBaikeByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.keyWord = iprot.readString();
          struct.setKeyWordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searchBaikeByName_result implements org.apache.thrift.TBase<searchBaikeByName_result, searchBaikeByName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchBaikeByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchBaikeByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchBaikeByName_resultTupleSchemeFactory());
    }

    public Dm_BaikeList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_BaikeList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchBaikeByName_result.class, metaDataMap);
    }

    public searchBaikeByName_result() {
    }

    public searchBaikeByName_result(
      Dm_BaikeList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchBaikeByName_result(searchBaikeByName_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_BaikeList(other.success);
      }
    }

    public searchBaikeByName_result deepCopy() {
      return new searchBaikeByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_BaikeList getSuccess() {
      return this.success;
    }

    public searchBaikeByName_result setSuccess(Dm_BaikeList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_BaikeList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchBaikeByName_result)
        return this.equals((searchBaikeByName_result)that);
      return false;
    }

    public boolean equals(searchBaikeByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchBaikeByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchBaikeByName_result typedOther = (searchBaikeByName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchBaikeByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchBaikeByName_resultStandardSchemeFactory implements SchemeFactory {
      public searchBaikeByName_resultStandardScheme getScheme() {
        return new searchBaikeByName_resultStandardScheme();
      }
    }

    private static class searchBaikeByName_resultStandardScheme extends StandardScheme<searchBaikeByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchBaikeByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_BaikeList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchBaikeByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchBaikeByName_resultTupleSchemeFactory implements SchemeFactory {
      public searchBaikeByName_resultTupleScheme getScheme() {
        return new searchBaikeByName_resultTupleScheme();
      }
    }

    private static class searchBaikeByName_resultTupleScheme extends TupleScheme<searchBaikeByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchBaikeByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchBaikeByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_BaikeList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchBaikeSimplifyByName_args implements org.apache.thrift.TBase<searchBaikeSimplifyByName_args, searchBaikeSimplifyByName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchBaikeSimplifyByName_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyWord", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchBaikeSimplifyByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchBaikeSimplifyByName_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String keyWord; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      KEY_WORD((short)2, "keyWord"),
      PAGE((short)3, "page"),
      PAGE_SIZE((short)4, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // KEY_WORD
            return KEY_WORD;
          case 3: // PAGE
            return PAGE;
          case 4: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY_WORD, new org.apache.thrift.meta_data.FieldMetaData("keyWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchBaikeSimplifyByName_args.class, metaDataMap);
    }

    public searchBaikeSimplifyByName_args() {
    }

    public searchBaikeSimplifyByName_args(
      String validstring,
      String keyWord,
      int page,
      int pageSize)
    {
      this();
      this.validstring = validstring;
      this.keyWord = keyWord;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchBaikeSimplifyByName_args(searchBaikeSimplifyByName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetKeyWord()) {
        this.keyWord = other.keyWord;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searchBaikeSimplifyByName_args deepCopy() {
      return new searchBaikeSimplifyByName_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.keyWord = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchBaikeSimplifyByName_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getKeyWord() {
      return this.keyWord;
    }

    public searchBaikeSimplifyByName_args setKeyWord(String keyWord) {
      this.keyWord = keyWord;
      return this;
    }

    public void unsetKeyWord() {
      this.keyWord = null;
    }

    /** Returns true if field keyWord is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyWord() {
      return this.keyWord != null;
    }

    public void setKeyWordIsSet(boolean value) {
      if (!value) {
        this.keyWord = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchBaikeSimplifyByName_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searchBaikeSimplifyByName_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case KEY_WORD:
        if (value == null) {
          unsetKeyWord();
        } else {
          setKeyWord((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case KEY_WORD:
        return getKeyWord();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case KEY_WORD:
        return isSetKeyWord();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchBaikeSimplifyByName_args)
        return this.equals((searchBaikeSimplifyByName_args)that);
      return false;
    }

    public boolean equals(searchBaikeSimplifyByName_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_keyWord = true && this.isSetKeyWord();
      boolean that_present_keyWord = true && that.isSetKeyWord();
      if (this_present_keyWord || that_present_keyWord) {
        if (!(this_present_keyWord && that_present_keyWord))
          return false;
        if (!this.keyWord.equals(that.keyWord))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchBaikeSimplifyByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchBaikeSimplifyByName_args typedOther = (searchBaikeSimplifyByName_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyWord()).compareTo(typedOther.isSetKeyWord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyWord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyWord, typedOther.keyWord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchBaikeSimplifyByName_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyWord:");
      if (this.keyWord == null) {
        sb.append("null");
      } else {
        sb.append(this.keyWord);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchBaikeSimplifyByName_argsStandardSchemeFactory implements SchemeFactory {
      public searchBaikeSimplifyByName_argsStandardScheme getScheme() {
        return new searchBaikeSimplifyByName_argsStandardScheme();
      }
    }

    private static class searchBaikeSimplifyByName_argsStandardScheme extends StandardScheme<searchBaikeSimplifyByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchBaikeSimplifyByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_WORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyWord = iprot.readString();
                struct.setKeyWordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchBaikeSimplifyByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.keyWord != null) {
          oprot.writeFieldBegin(KEY_WORD_FIELD_DESC);
          oprot.writeString(struct.keyWord);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchBaikeSimplifyByName_argsTupleSchemeFactory implements SchemeFactory {
      public searchBaikeSimplifyByName_argsTupleScheme getScheme() {
        return new searchBaikeSimplifyByName_argsTupleScheme();
      }
    }

    private static class searchBaikeSimplifyByName_argsTupleScheme extends TupleScheme<searchBaikeSimplifyByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchBaikeSimplifyByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetKeyWord()) {
          optionals.set(1);
        }
        if (struct.isSetPage()) {
          optionals.set(2);
        }
        if (struct.isSetPageSize()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetKeyWord()) {
          oprot.writeString(struct.keyWord);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchBaikeSimplifyByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.keyWord = iprot.readString();
          struct.setKeyWordIsSet(true);
        }
        if (incoming.get(2)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searchBaikeSimplifyByName_result implements org.apache.thrift.TBase<searchBaikeSimplifyByName_result, searchBaikeSimplifyByName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchBaikeSimplifyByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchBaikeSimplifyByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchBaikeSimplifyByName_resultTupleSchemeFactory());
    }

    public Dm_BaikeSimplifyList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_BaikeSimplifyList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchBaikeSimplifyByName_result.class, metaDataMap);
    }

    public searchBaikeSimplifyByName_result() {
    }

    public searchBaikeSimplifyByName_result(
      Dm_BaikeSimplifyList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchBaikeSimplifyByName_result(searchBaikeSimplifyByName_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_BaikeSimplifyList(other.success);
      }
    }

    public searchBaikeSimplifyByName_result deepCopy() {
      return new searchBaikeSimplifyByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_BaikeSimplifyList getSuccess() {
      return this.success;
    }

    public searchBaikeSimplifyByName_result setSuccess(Dm_BaikeSimplifyList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_BaikeSimplifyList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchBaikeSimplifyByName_result)
        return this.equals((searchBaikeSimplifyByName_result)that);
      return false;
    }

    public boolean equals(searchBaikeSimplifyByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchBaikeSimplifyByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchBaikeSimplifyByName_result typedOther = (searchBaikeSimplifyByName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchBaikeSimplifyByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchBaikeSimplifyByName_resultStandardSchemeFactory implements SchemeFactory {
      public searchBaikeSimplifyByName_resultStandardScheme getScheme() {
        return new searchBaikeSimplifyByName_resultStandardScheme();
      }
    }

    private static class searchBaikeSimplifyByName_resultStandardScheme extends StandardScheme<searchBaikeSimplifyByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchBaikeSimplifyByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_BaikeSimplifyList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchBaikeSimplifyByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchBaikeSimplifyByName_resultTupleSchemeFactory implements SchemeFactory {
      public searchBaikeSimplifyByName_resultTupleScheme getScheme() {
        return new searchBaikeSimplifyByName_resultTupleScheme();
      }
    }

    private static class searchBaikeSimplifyByName_resultTupleScheme extends TupleScheme<searchBaikeSimplifyByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchBaikeSimplifyByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchBaikeSimplifyByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_BaikeSimplifyList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class viewBaike_args implements org.apache.thrift.TBase<viewBaike_args, viewBaike_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("viewBaike_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new viewBaike_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new viewBaike_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(viewBaike_args.class, metaDataMap);
    }

    public viewBaike_args() {
    }

    public viewBaike_args(
      String validstring,
      String id)
    {
      this();
      this.validstring = validstring;
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public viewBaike_args(viewBaike_args other) {
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public viewBaike_args deepCopy() {
      return new viewBaike_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.id = null;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public viewBaike_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public viewBaike_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof viewBaike_args)
        return this.equals((viewBaike_args)that);
      return false;
    }

    public boolean equals(viewBaike_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(viewBaike_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      viewBaike_args typedOther = (viewBaike_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("viewBaike_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class viewBaike_argsStandardSchemeFactory implements SchemeFactory {
      public viewBaike_argsStandardScheme getScheme() {
        return new viewBaike_argsStandardScheme();
      }
    }

    private static class viewBaike_argsStandardScheme extends StandardScheme<viewBaike_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, viewBaike_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, viewBaike_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class viewBaike_argsTupleSchemeFactory implements SchemeFactory {
      public viewBaike_argsTupleScheme getScheme() {
        return new viewBaike_argsTupleScheme();
      }
    }

    private static class viewBaike_argsTupleScheme extends TupleScheme<viewBaike_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, viewBaike_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, viewBaike_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class viewBaike_result implements org.apache.thrift.TBase<viewBaike_result, viewBaike_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("viewBaike_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new viewBaike_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new viewBaike_resultTupleSchemeFactory());
    }

    public Dm_BaikeOne success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_BaikeOne.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(viewBaike_result.class, metaDataMap);
    }

    public viewBaike_result() {
    }

    public viewBaike_result(
      Dm_BaikeOne success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public viewBaike_result(viewBaike_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_BaikeOne(other.success);
      }
    }

    public viewBaike_result deepCopy() {
      return new viewBaike_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_BaikeOne getSuccess() {
      return this.success;
    }

    public viewBaike_result setSuccess(Dm_BaikeOne success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_BaikeOne)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof viewBaike_result)
        return this.equals((viewBaike_result)that);
      return false;
    }

    public boolean equals(viewBaike_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(viewBaike_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      viewBaike_result typedOther = (viewBaike_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("viewBaike_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class viewBaike_resultStandardSchemeFactory implements SchemeFactory {
      public viewBaike_resultStandardScheme getScheme() {
        return new viewBaike_resultStandardScheme();
      }
    }

    private static class viewBaike_resultStandardScheme extends StandardScheme<viewBaike_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, viewBaike_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_BaikeOne();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, viewBaike_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class viewBaike_resultTupleSchemeFactory implements SchemeFactory {
      public viewBaike_resultTupleScheme getScheme() {
        return new viewBaike_resultTupleScheme();
      }
    }

    private static class viewBaike_resultTupleScheme extends TupleScheme<viewBaike_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, viewBaike_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, viewBaike_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_BaikeOne();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMessage_args implements org.apache.thrift.TBase<getMessage_args, getMessage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessage_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessage_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public double lng; // required
    public double lat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      LNG((short)2, "lng"),
      LAT((short)3, "lat");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // LNG
            return LNG;
          case 3: // LAT
            return LAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LNG_ISSET_ID = 0;
    private static final int __LAT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessage_args.class, metaDataMap);
    }

    public getMessage_args() {
    }

    public getMessage_args(
      String validstring,
      double lng,
      double lat)
    {
      this();
      this.validstring = validstring;
      this.lng = lng;
      setLngIsSet(true);
      this.lat = lat;
      setLatIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessage_args(getMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      this.lng = other.lng;
      this.lat = other.lat;
    }

    public getMessage_args deepCopy() {
      return new getMessage_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      setLngIsSet(false);
      this.lng = 0.0;
      setLatIsSet(false);
      this.lat = 0.0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public getMessage_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public double getLng() {
      return this.lng;
    }

    public getMessage_args setLng(double lng) {
      this.lng = lng;
      setLngIsSet(true);
      return this;
    }

    public void unsetLng() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LNG_ISSET_ID);
    }

    /** Returns true if field lng is set (has been assigned a value) and false otherwise */
    public boolean isSetLng() {
      return EncodingUtils.testBit(__isset_bitfield, __LNG_ISSET_ID);
    }

    public void setLngIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LNG_ISSET_ID, value);
    }

    public double getLat() {
      return this.lat;
    }

    public getMessage_args setLat(double lat) {
      this.lat = lat;
      setLatIsSet(true);
      return this;
    }

    public void unsetLat() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAT_ISSET_ID);
    }

    /** Returns true if field lat is set (has been assigned a value) and false otherwise */
    public boolean isSetLat() {
      return EncodingUtils.testBit(__isset_bitfield, __LAT_ISSET_ID);
    }

    public void setLatIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case LNG:
        if (value == null) {
          unsetLng();
        } else {
          setLng((Double)value);
        }
        break;

      case LAT:
        if (value == null) {
          unsetLat();
        } else {
          setLat((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case LNG:
        return Double.valueOf(getLng());

      case LAT:
        return Double.valueOf(getLat());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case LNG:
        return isSetLng();
      case LAT:
        return isSetLat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessage_args)
        return this.equals((getMessage_args)that);
      return false;
    }

    public boolean equals(getMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_lng = true;
      boolean that_present_lng = true;
      if (this_present_lng || that_present_lng) {
        if (!(this_present_lng && that_present_lng))
          return false;
        if (this.lng != that.lng)
          return false;
      }

      boolean this_present_lat = true;
      boolean that_present_lat = true;
      if (this_present_lat || that_present_lat) {
        if (!(this_present_lat && that_present_lat))
          return false;
        if (this.lat != that.lat)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMessage_args typedOther = (getMessage_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLng()).compareTo(typedOther.isSetLng());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLng()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, typedOther.lng);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLat()).compareTo(typedOther.isSetLat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, typedOther.lat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessage_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lng:");
      sb.append(this.lng);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lat:");
      sb.append(this.lat);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessage_argsStandardSchemeFactory implements SchemeFactory {
      public getMessage_argsStandardScheme getScheme() {
        return new getMessage_argsStandardScheme();
      }
    }

    private static class getMessage_argsStandardScheme extends StandardScheme<getMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LNG
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lng = iprot.readDouble();
                struct.setLngIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LAT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lat = iprot.readDouble();
                struct.setLatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LNG_FIELD_DESC);
        oprot.writeDouble(struct.lng);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAT_FIELD_DESC);
        oprot.writeDouble(struct.lat);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessage_argsTupleSchemeFactory implements SchemeFactory {
      public getMessage_argsTupleScheme getScheme() {
        return new getMessage_argsTupleScheme();
      }
    }

    private static class getMessage_argsTupleScheme extends TupleScheme<getMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetLng()) {
          optionals.set(1);
        }
        if (struct.isSetLat()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetLng()) {
          oprot.writeDouble(struct.lng);
        }
        if (struct.isSetLat()) {
          oprot.writeDouble(struct.lat);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lng = iprot.readDouble();
          struct.setLngIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lat = iprot.readDouble();
          struct.setLatIsSet(true);
        }
      }
    }

  }

  public static class getMessage_result implements org.apache.thrift.TBase<getMessage_result, getMessage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessage_resultTupleSchemeFactory());
    }

    public Dm_MessageList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_MessageList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessage_result.class, metaDataMap);
    }

    public getMessage_result() {
    }

    public getMessage_result(
      Dm_MessageList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessage_result(getMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_MessageList(other.success);
      }
    }

    public getMessage_result deepCopy() {
      return new getMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_MessageList getSuccess() {
      return this.success;
    }

    public getMessage_result setSuccess(Dm_MessageList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_MessageList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessage_result)
        return this.equals((getMessage_result)that);
      return false;
    }

    public boolean equals(getMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMessage_result typedOther = (getMessage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessage_resultStandardSchemeFactory implements SchemeFactory {
      public getMessage_resultStandardScheme getScheme() {
        return new getMessage_resultStandardScheme();
      }
    }

    private static class getMessage_resultStandardScheme extends StandardScheme<getMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_MessageList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessage_resultTupleSchemeFactory implements SchemeFactory {
      public getMessage_resultTupleScheme getScheme() {
        return new getMessage_resultTupleScheme();
      }
    }

    private static class getMessage_resultTupleScheme extends TupleScheme<getMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_MessageList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class publishTalk_args implements org.apache.thrift.TBase<publishTalk_args, publishTalk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishTalk_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TALK_FIELD_DESC = new org.apache.thrift.protocol.TField("talk", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishTalk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishTalk_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public Dm_Talk talk; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      TALK((short)2, "talk");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // TALK
            return TALK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TALK, new org.apache.thrift.meta_data.FieldMetaData("talk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Talk.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishTalk_args.class, metaDataMap);
    }

    public publishTalk_args() {
    }

    public publishTalk_args(
      String validstring,
      Dm_Talk talk)
    {
      this();
      this.validstring = validstring;
      this.talk = talk;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishTalk_args(publishTalk_args other) {
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetTalk()) {
        this.talk = new Dm_Talk(other.talk);
      }
    }

    public publishTalk_args deepCopy() {
      return new publishTalk_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.talk = null;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public publishTalk_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public Dm_Talk getTalk() {
      return this.talk;
    }

    public publishTalk_args setTalk(Dm_Talk talk) {
      this.talk = talk;
      return this;
    }

    public void unsetTalk() {
      this.talk = null;
    }

    /** Returns true if field talk is set (has been assigned a value) and false otherwise */
    public boolean isSetTalk() {
      return this.talk != null;
    }

    public void setTalkIsSet(boolean value) {
      if (!value) {
        this.talk = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case TALK:
        if (value == null) {
          unsetTalk();
        } else {
          setTalk((Dm_Talk)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case TALK:
        return getTalk();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case TALK:
        return isSetTalk();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishTalk_args)
        return this.equals((publishTalk_args)that);
      return false;
    }

    public boolean equals(publishTalk_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_talk = true && this.isSetTalk();
      boolean that_present_talk = true && that.isSetTalk();
      if (this_present_talk || that_present_talk) {
        if (!(this_present_talk && that_present_talk))
          return false;
        if (!this.talk.equals(that.talk))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(publishTalk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      publishTalk_args typedOther = (publishTalk_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTalk()).compareTo(typedOther.isSetTalk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTalk()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.talk, typedOther.talk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishTalk_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("talk:");
      if (this.talk == null) {
        sb.append("null");
      } else {
        sb.append(this.talk);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (talk != null) {
        talk.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishTalk_argsStandardSchemeFactory implements SchemeFactory {
      public publishTalk_argsStandardScheme getScheme() {
        return new publishTalk_argsStandardScheme();
      }
    }

    private static class publishTalk_argsStandardScheme extends StandardScheme<publishTalk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishTalk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TALK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.talk = new Dm_Talk();
                struct.talk.read(iprot);
                struct.setTalkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishTalk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.talk != null) {
          oprot.writeFieldBegin(TALK_FIELD_DESC);
          struct.talk.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishTalk_argsTupleSchemeFactory implements SchemeFactory {
      public publishTalk_argsTupleScheme getScheme() {
        return new publishTalk_argsTupleScheme();
      }
    }

    private static class publishTalk_argsTupleScheme extends TupleScheme<publishTalk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishTalk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetTalk()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetTalk()) {
          struct.talk.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishTalk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.talk = new Dm_Talk();
          struct.talk.read(iprot);
          struct.setTalkIsSet(true);
        }
      }
    }

  }

  public static class publishTalk_result implements org.apache.thrift.TBase<publishTalk_result, publishTalk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("publishTalk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new publishTalk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new publishTalk_resultTupleSchemeFactory());
    }

    public Dm_Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(publishTalk_result.class, metaDataMap);
    }

    public publishTalk_result() {
    }

    public publishTalk_result(
      Dm_Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public publishTalk_result(publishTalk_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_Result(other.success);
      }
    }

    public publishTalk_result deepCopy() {
      return new publishTalk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_Result getSuccess() {
      return this.success;
    }

    public publishTalk_result setSuccess(Dm_Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof publishTalk_result)
        return this.equals((publishTalk_result)that);
      return false;
    }

    public boolean equals(publishTalk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(publishTalk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      publishTalk_result typedOther = (publishTalk_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("publishTalk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class publishTalk_resultStandardSchemeFactory implements SchemeFactory {
      public publishTalk_resultStandardScheme getScheme() {
        return new publishTalk_resultStandardScheme();
      }
    }

    private static class publishTalk_resultStandardScheme extends StandardScheme<publishTalk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, publishTalk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, publishTalk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class publishTalk_resultTupleSchemeFactory implements SchemeFactory {
      public publishTalk_resultTupleScheme getScheme() {
        return new publishTalk_resultTupleScheme();
      }
    }

    private static class publishTalk_resultTupleScheme extends TupleScheme<publishTalk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, publishTalk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, publishTalk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searcheSeeTalkList_args implements org.apache.thrift.TBase<searcheSeeTalkList_args, searcheSeeTalkList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searcheSeeTalkList_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searcheSeeTalkList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searcheSeeTalkList_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      PAGE((short)2, "page"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // PAGE
            return PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searcheSeeTalkList_args.class, metaDataMap);
    }

    public searcheSeeTalkList_args() {
    }

    public searcheSeeTalkList_args(
      String validstring,
      int page,
      int pageSize)
    {
      this();
      this.validstring = validstring;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searcheSeeTalkList_args(searcheSeeTalkList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searcheSeeTalkList_args deepCopy() {
      return new searcheSeeTalkList_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searcheSeeTalkList_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searcheSeeTalkList_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searcheSeeTalkList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searcheSeeTalkList_args)
        return this.equals((searcheSeeTalkList_args)that);
      return false;
    }

    public boolean equals(searcheSeeTalkList_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searcheSeeTalkList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searcheSeeTalkList_args typedOther = (searcheSeeTalkList_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searcheSeeTalkList_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searcheSeeTalkList_argsStandardSchemeFactory implements SchemeFactory {
      public searcheSeeTalkList_argsStandardScheme getScheme() {
        return new searcheSeeTalkList_argsStandardScheme();
      }
    }

    private static class searcheSeeTalkList_argsStandardScheme extends StandardScheme<searcheSeeTalkList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searcheSeeTalkList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searcheSeeTalkList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searcheSeeTalkList_argsTupleSchemeFactory implements SchemeFactory {
      public searcheSeeTalkList_argsTupleScheme getScheme() {
        return new searcheSeeTalkList_argsTupleScheme();
      }
    }

    private static class searcheSeeTalkList_argsTupleScheme extends TupleScheme<searcheSeeTalkList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searcheSeeTalkList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searcheSeeTalkList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searcheSeeTalkList_result implements org.apache.thrift.TBase<searcheSeeTalkList_result, searcheSeeTalkList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searcheSeeTalkList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searcheSeeTalkList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searcheSeeTalkList_resultTupleSchemeFactory());
    }

    public Dm_SeeTalkList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_SeeTalkList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searcheSeeTalkList_result.class, metaDataMap);
    }

    public searcheSeeTalkList_result() {
    }

    public searcheSeeTalkList_result(
      Dm_SeeTalkList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searcheSeeTalkList_result(searcheSeeTalkList_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_SeeTalkList(other.success);
      }
    }

    public searcheSeeTalkList_result deepCopy() {
      return new searcheSeeTalkList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_SeeTalkList getSuccess() {
      return this.success;
    }

    public searcheSeeTalkList_result setSuccess(Dm_SeeTalkList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_SeeTalkList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searcheSeeTalkList_result)
        return this.equals((searcheSeeTalkList_result)that);
      return false;
    }

    public boolean equals(searcheSeeTalkList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searcheSeeTalkList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searcheSeeTalkList_result typedOther = (searcheSeeTalkList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searcheSeeTalkList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searcheSeeTalkList_resultStandardSchemeFactory implements SchemeFactory {
      public searcheSeeTalkList_resultStandardScheme getScheme() {
        return new searcheSeeTalkList_resultStandardScheme();
      }
    }

    private static class searcheSeeTalkList_resultStandardScheme extends StandardScheme<searcheSeeTalkList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searcheSeeTalkList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_SeeTalkList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searcheSeeTalkList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searcheSeeTalkList_resultTupleSchemeFactory implements SchemeFactory {
      public searcheSeeTalkList_resultTupleScheme getScheme() {
        return new searcheSeeTalkList_resultTupleScheme();
      }
    }

    private static class searcheSeeTalkList_resultTupleScheme extends TupleScheme<searcheSeeTalkList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searcheSeeTalkList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searcheSeeTalkList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_SeeTalkList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class lookSeeTalk_args implements org.apache.thrift.TBase<lookSeeTalk_args, lookSeeTalk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lookSeeTalk_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lookSeeTalk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lookSeeTalk_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lookSeeTalk_args.class, metaDataMap);
    }

    public lookSeeTalk_args() {
    }

    public lookSeeTalk_args(
      String validstring,
      String id)
    {
      this();
      this.validstring = validstring;
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookSeeTalk_args(lookSeeTalk_args other) {
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public lookSeeTalk_args deepCopy() {
      return new lookSeeTalk_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.id = null;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public lookSeeTalk_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public lookSeeTalk_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lookSeeTalk_args)
        return this.equals((lookSeeTalk_args)that);
      return false;
    }

    public boolean equals(lookSeeTalk_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lookSeeTalk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lookSeeTalk_args typedOther = (lookSeeTalk_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lookSeeTalk_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lookSeeTalk_argsStandardSchemeFactory implements SchemeFactory {
      public lookSeeTalk_argsStandardScheme getScheme() {
        return new lookSeeTalk_argsStandardScheme();
      }
    }

    private static class lookSeeTalk_argsStandardScheme extends StandardScheme<lookSeeTalk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lookSeeTalk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lookSeeTalk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lookSeeTalk_argsTupleSchemeFactory implements SchemeFactory {
      public lookSeeTalk_argsTupleScheme getScheme() {
        return new lookSeeTalk_argsTupleScheme();
      }
    }

    private static class lookSeeTalk_argsTupleScheme extends TupleScheme<lookSeeTalk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lookSeeTalk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lookSeeTalk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class lookSeeTalk_result implements org.apache.thrift.TBase<lookSeeTalk_result, lookSeeTalk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lookSeeTalk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lookSeeTalk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lookSeeTalk_resultTupleSchemeFactory());
    }

    public Dm_SeeTalkOne success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_SeeTalkOne.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lookSeeTalk_result.class, metaDataMap);
    }

    public lookSeeTalk_result() {
    }

    public lookSeeTalk_result(
      Dm_SeeTalkOne success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookSeeTalk_result(lookSeeTalk_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_SeeTalkOne(other.success);
      }
    }

    public lookSeeTalk_result deepCopy() {
      return new lookSeeTalk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_SeeTalkOne getSuccess() {
      return this.success;
    }

    public lookSeeTalk_result setSuccess(Dm_SeeTalkOne success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_SeeTalkOne)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lookSeeTalk_result)
        return this.equals((lookSeeTalk_result)that);
      return false;
    }

    public boolean equals(lookSeeTalk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(lookSeeTalk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      lookSeeTalk_result typedOther = (lookSeeTalk_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lookSeeTalk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lookSeeTalk_resultStandardSchemeFactory implements SchemeFactory {
      public lookSeeTalk_resultStandardScheme getScheme() {
        return new lookSeeTalk_resultStandardScheme();
      }
    }

    private static class lookSeeTalk_resultStandardScheme extends StandardScheme<lookSeeTalk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lookSeeTalk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_SeeTalkOne();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lookSeeTalk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lookSeeTalk_resultTupleSchemeFactory implements SchemeFactory {
      public lookSeeTalk_resultTupleScheme getScheme() {
        return new lookSeeTalk_resultTupleScheme();
      }
    }

    private static class lookSeeTalk_resultTupleScheme extends TupleScheme<lookSeeTalk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lookSeeTalk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lookSeeTalk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_SeeTalkOne();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchWatermark_args implements org.apache.thrift.TBase<searchWatermark_args, searchWatermark_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchWatermark_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchWatermark_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchWatermark_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchWatermark_args.class, metaDataMap);
    }

    public searchWatermark_args() {
    }

    public searchWatermark_args(
      String validstring,
      String id)
    {
      this();
      this.validstring = validstring;
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchWatermark_args(searchWatermark_args other) {
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public searchWatermark_args deepCopy() {
      return new searchWatermark_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.id = null;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchWatermark_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public searchWatermark_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchWatermark_args)
        return this.equals((searchWatermark_args)that);
      return false;
    }

    public boolean equals(searchWatermark_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchWatermark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchWatermark_args typedOther = (searchWatermark_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchWatermark_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchWatermark_argsStandardSchemeFactory implements SchemeFactory {
      public searchWatermark_argsStandardScheme getScheme() {
        return new searchWatermark_argsStandardScheme();
      }
    }

    private static class searchWatermark_argsStandardScheme extends StandardScheme<searchWatermark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchWatermark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchWatermark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchWatermark_argsTupleSchemeFactory implements SchemeFactory {
      public searchWatermark_argsTupleScheme getScheme() {
        return new searchWatermark_argsTupleScheme();
      }
    }

    private static class searchWatermark_argsTupleScheme extends TupleScheme<searchWatermark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchWatermark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchWatermark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class searchWatermark_result implements org.apache.thrift.TBase<searchWatermark_result, searchWatermark_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchWatermark_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchWatermark_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchWatermark_resultTupleSchemeFactory());
    }

    public Dm_WatermarkResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_WatermarkResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchWatermark_result.class, metaDataMap);
    }

    public searchWatermark_result() {
    }

    public searchWatermark_result(
      Dm_WatermarkResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchWatermark_result(searchWatermark_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_WatermarkResult(other.success);
      }
    }

    public searchWatermark_result deepCopy() {
      return new searchWatermark_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_WatermarkResult getSuccess() {
      return this.success;
    }

    public searchWatermark_result setSuccess(Dm_WatermarkResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_WatermarkResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchWatermark_result)
        return this.equals((searchWatermark_result)that);
      return false;
    }

    public boolean equals(searchWatermark_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchWatermark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchWatermark_result typedOther = (searchWatermark_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchWatermark_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchWatermark_resultStandardSchemeFactory implements SchemeFactory {
      public searchWatermark_resultStandardScheme getScheme() {
        return new searchWatermark_resultStandardScheme();
      }
    }

    private static class searchWatermark_resultStandardScheme extends StandardScheme<searchWatermark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchWatermark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_WatermarkResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchWatermark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchWatermark_resultTupleSchemeFactory implements SchemeFactory {
      public searchWatermark_resultTupleScheme getScheme() {
        return new searchWatermark_resultTupleScheme();
      }
    }

    private static class searchWatermark_resultTupleScheme extends TupleScheme<searchWatermark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchWatermark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchWatermark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_WatermarkResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class modifyWatermark_args implements org.apache.thrift.TBase<modifyWatermark_args, modifyWatermark_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyWatermark_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField WATERMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("watermark", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyWatermark_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyWatermark_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String id; // required
    public String watermark; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      ID((short)2, "id"),
      WATERMARK((short)3, "watermark");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // ID
            return ID;
          case 3: // WATERMARK
            return WATERMARK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WATERMARK, new org.apache.thrift.meta_data.FieldMetaData("watermark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyWatermark_args.class, metaDataMap);
    }

    public modifyWatermark_args() {
    }

    public modifyWatermark_args(
      String validstring,
      String id,
      String watermark)
    {
      this();
      this.validstring = validstring;
      this.id = id;
      this.watermark = watermark;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyWatermark_args(modifyWatermark_args other) {
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
      if (other.isSetWatermark()) {
        this.watermark = other.watermark;
      }
    }

    public modifyWatermark_args deepCopy() {
      return new modifyWatermark_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.id = null;
      this.watermark = null;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public modifyWatermark_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public modifyWatermark_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public String getWatermark() {
      return this.watermark;
    }

    public modifyWatermark_args setWatermark(String watermark) {
      this.watermark = watermark;
      return this;
    }

    public void unsetWatermark() {
      this.watermark = null;
    }

    /** Returns true if field watermark is set (has been assigned a value) and false otherwise */
    public boolean isSetWatermark() {
      return this.watermark != null;
    }

    public void setWatermarkIsSet(boolean value) {
      if (!value) {
        this.watermark = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case WATERMARK:
        if (value == null) {
          unsetWatermark();
        } else {
          setWatermark((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case ID:
        return getId();

      case WATERMARK:
        return getWatermark();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case ID:
        return isSetId();
      case WATERMARK:
        return isSetWatermark();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyWatermark_args)
        return this.equals((modifyWatermark_args)that);
      return false;
    }

    public boolean equals(modifyWatermark_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_watermark = true && this.isSetWatermark();
      boolean that_present_watermark = true && that.isSetWatermark();
      if (this_present_watermark || that_present_watermark) {
        if (!(this_present_watermark && that_present_watermark))
          return false;
        if (!this.watermark.equals(that.watermark))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyWatermark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyWatermark_args typedOther = (modifyWatermark_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWatermark()).compareTo(typedOther.isSetWatermark());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWatermark()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.watermark, typedOther.watermark);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyWatermark_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("watermark:");
      if (this.watermark == null) {
        sb.append("null");
      } else {
        sb.append(this.watermark);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyWatermark_argsStandardSchemeFactory implements SchemeFactory {
      public modifyWatermark_argsStandardScheme getScheme() {
        return new modifyWatermark_argsStandardScheme();
      }
    }

    private static class modifyWatermark_argsStandardScheme extends StandardScheme<modifyWatermark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyWatermark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WATERMARK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.watermark = iprot.readString();
                struct.setWatermarkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyWatermark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        if (struct.watermark != null) {
          oprot.writeFieldBegin(WATERMARK_FIELD_DESC);
          oprot.writeString(struct.watermark);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyWatermark_argsTupleSchemeFactory implements SchemeFactory {
      public modifyWatermark_argsTupleScheme getScheme() {
        return new modifyWatermark_argsTupleScheme();
      }
    }

    private static class modifyWatermark_argsTupleScheme extends TupleScheme<modifyWatermark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyWatermark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetWatermark()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetWatermark()) {
          oprot.writeString(struct.watermark);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyWatermark_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.watermark = iprot.readString();
          struct.setWatermarkIsSet(true);
        }
      }
    }

  }

  public static class modifyWatermark_result implements org.apache.thrift.TBase<modifyWatermark_result, modifyWatermark_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyWatermark_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new modifyWatermark_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new modifyWatermark_resultTupleSchemeFactory());
    }

    public Dm_Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyWatermark_result.class, metaDataMap);
    }

    public modifyWatermark_result() {
    }

    public modifyWatermark_result(
      Dm_Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyWatermark_result(modifyWatermark_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_Result(other.success);
      }
    }

    public modifyWatermark_result deepCopy() {
      return new modifyWatermark_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_Result getSuccess() {
      return this.success;
    }

    public modifyWatermark_result setSuccess(Dm_Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyWatermark_result)
        return this.equals((modifyWatermark_result)that);
      return false;
    }

    public boolean equals(modifyWatermark_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(modifyWatermark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      modifyWatermark_result typedOther = (modifyWatermark_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("modifyWatermark_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyWatermark_resultStandardSchemeFactory implements SchemeFactory {
      public modifyWatermark_resultStandardScheme getScheme() {
        return new modifyWatermark_resultStandardScheme();
      }
    }

    private static class modifyWatermark_resultStandardScheme extends StandardScheme<modifyWatermark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyWatermark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyWatermark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyWatermark_resultTupleSchemeFactory implements SchemeFactory {
      public modifyWatermark_resultTupleScheme getScheme() {
        return new modifyWatermark_resultTupleScheme();
      }
    }

    private static class modifyWatermark_resultTupleScheme extends TupleScheme<modifyWatermark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyWatermark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyWatermark_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exhibit_getInfo_args implements org.apache.thrift.TBase<exhibit_getInfo_args, exhibit_getInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exhibit_getInfo_args");

    private static final org.apache.thrift.protocol.TField EID_FIELD_DESC = new org.apache.thrift.protocol.TField("eid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exhibit_getInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exhibit_getInfo_argsTupleSchemeFactory());
    }

    public String eid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EID((short)1, "eid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EID
            return EID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EID, new org.apache.thrift.meta_data.FieldMetaData("eid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exhibit_getInfo_args.class, metaDataMap);
    }

    public exhibit_getInfo_args() {
    }

    public exhibit_getInfo_args(
      String eid)
    {
      this();
      this.eid = eid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exhibit_getInfo_args(exhibit_getInfo_args other) {
      if (other.isSetEid()) {
        this.eid = other.eid;
      }
    }

    public exhibit_getInfo_args deepCopy() {
      return new exhibit_getInfo_args(this);
    }

    @Override
    public void clear() {
      this.eid = null;
    }

    public String getEid() {
      return this.eid;
    }

    public exhibit_getInfo_args setEid(String eid) {
      this.eid = eid;
      return this;
    }

    public void unsetEid() {
      this.eid = null;
    }

    /** Returns true if field eid is set (has been assigned a value) and false otherwise */
    public boolean isSetEid() {
      return this.eid != null;
    }

    public void setEidIsSet(boolean value) {
      if (!value) {
        this.eid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EID:
        if (value == null) {
          unsetEid();
        } else {
          setEid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EID:
        return getEid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EID:
        return isSetEid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exhibit_getInfo_args)
        return this.equals((exhibit_getInfo_args)that);
      return false;
    }

    public boolean equals(exhibit_getInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_eid = true && this.isSetEid();
      boolean that_present_eid = true && that.isSetEid();
      if (this_present_eid || that_present_eid) {
        if (!(this_present_eid && that_present_eid))
          return false;
        if (!this.eid.equals(that.eid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exhibit_getInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exhibit_getInfo_args typedOther = (exhibit_getInfo_args)other;

      lastComparison = Boolean.valueOf(isSetEid()).compareTo(typedOther.isSetEid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eid, typedOther.eid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exhibit_getInfo_args(");
      boolean first = true;

      sb.append("eid:");
      if (this.eid == null) {
        sb.append("null");
      } else {
        sb.append(this.eid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exhibit_getInfo_argsStandardSchemeFactory implements SchemeFactory {
      public exhibit_getInfo_argsStandardScheme getScheme() {
        return new exhibit_getInfo_argsStandardScheme();
      }
    }

    private static class exhibit_getInfo_argsStandardScheme extends StandardScheme<exhibit_getInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exhibit_getInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.eid = iprot.readString();
                struct.setEidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exhibit_getInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eid != null) {
          oprot.writeFieldBegin(EID_FIELD_DESC);
          oprot.writeString(struct.eid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exhibit_getInfo_argsTupleSchemeFactory implements SchemeFactory {
      public exhibit_getInfo_argsTupleScheme getScheme() {
        return new exhibit_getInfo_argsTupleScheme();
      }
    }

    private static class exhibit_getInfo_argsTupleScheme extends TupleScheme<exhibit_getInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exhibit_getInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEid()) {
          oprot.writeString(struct.eid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exhibit_getInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eid = iprot.readString();
          struct.setEidIsSet(true);
        }
      }
    }

  }

  public static class exhibit_getInfo_result implements org.apache.thrift.TBase<exhibit_getInfo_result, exhibit_getInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exhibit_getInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exhibit_getInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exhibit_getInfo_resultTupleSchemeFactory());
    }

    public Dm_Exhibit success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Exhibit.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exhibit_getInfo_result.class, metaDataMap);
    }

    public exhibit_getInfo_result() {
    }

    public exhibit_getInfo_result(
      Dm_Exhibit success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exhibit_getInfo_result(exhibit_getInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_Exhibit(other.success);
      }
    }

    public exhibit_getInfo_result deepCopy() {
      return new exhibit_getInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_Exhibit getSuccess() {
      return this.success;
    }

    public exhibit_getInfo_result setSuccess(Dm_Exhibit success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_Exhibit)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exhibit_getInfo_result)
        return this.equals((exhibit_getInfo_result)that);
      return false;
    }

    public boolean equals(exhibit_getInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exhibit_getInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exhibit_getInfo_result typedOther = (exhibit_getInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exhibit_getInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exhibit_getInfo_resultStandardSchemeFactory implements SchemeFactory {
      public exhibit_getInfo_resultStandardScheme getScheme() {
        return new exhibit_getInfo_resultStandardScheme();
      }
    }

    private static class exhibit_getInfo_resultStandardScheme extends StandardScheme<exhibit_getInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exhibit_getInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_Exhibit();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exhibit_getInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exhibit_getInfo_resultTupleSchemeFactory implements SchemeFactory {
      public exhibit_getInfo_resultTupleScheme getScheme() {
        return new exhibit_getInfo_resultTupleScheme();
      }
    }

    private static class exhibit_getInfo_resultTupleScheme extends TupleScheme<exhibit_getInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exhibit_getInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exhibit_getInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_Exhibit();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exhibit_getInfoByNum_args implements org.apache.thrift.TBase<exhibit_getInfoByNum_args, exhibit_getInfoByNum_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exhibit_getInfoByNum_args");

    private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exhibit_getInfoByNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exhibit_getInfoByNum_argsTupleSchemeFactory());
    }

    public String mid; // required
    public int num; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MID((short)1, "mid"),
      NUM((short)2, "num");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MID
            return MID;
          case 2: // NUM
            return NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exhibit_getInfoByNum_args.class, metaDataMap);
    }

    public exhibit_getInfoByNum_args() {
    }

    public exhibit_getInfoByNum_args(
      String mid,
      int num)
    {
      this();
      this.mid = mid;
      this.num = num;
      setNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exhibit_getInfoByNum_args(exhibit_getInfoByNum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
      this.num = other.num;
    }

    public exhibit_getInfoByNum_args deepCopy() {
      return new exhibit_getInfoByNum_args(this);
    }

    @Override
    public void clear() {
      this.mid = null;
      setNumIsSet(false);
      this.num = 0;
    }

    public String getMid() {
      return this.mid;
    }

    public exhibit_getInfoByNum_args setMid(String mid) {
      this.mid = mid;
      return this;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public int getNum() {
      return this.num;
    }

    public exhibit_getInfoByNum_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MID:
        if (value == null) {
          unsetMid();
        } else {
          setMid((String)value);
        }
        break;

      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MID:
        return getMid();

      case NUM:
        return Integer.valueOf(getNum());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MID:
        return isSetMid();
      case NUM:
        return isSetNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exhibit_getInfoByNum_args)
        return this.equals((exhibit_getInfoByNum_args)that);
      return false;
    }

    public boolean equals(exhibit_getInfoByNum_args that) {
      if (that == null)
        return false;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exhibit_getInfoByNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exhibit_getInfoByNum_args typedOther = (exhibit_getInfoByNum_args)other;

      lastComparison = Boolean.valueOf(isSetMid()).compareTo(typedOther.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, typedOther.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum()).compareTo(typedOther.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, typedOther.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exhibit_getInfoByNum_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("num:");
      sb.append(this.num);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exhibit_getInfoByNum_argsStandardSchemeFactory implements SchemeFactory {
      public exhibit_getInfoByNum_argsStandardScheme getScheme() {
        return new exhibit_getInfoByNum_argsStandardScheme();
      }
    }

    private static class exhibit_getInfoByNum_argsStandardScheme extends StandardScheme<exhibit_getInfoByNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exhibit_getInfoByNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mid = iprot.readString();
                struct.setMidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exhibit_getInfoByNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mid != null) {
          oprot.writeFieldBegin(MID_FIELD_DESC);
          oprot.writeString(struct.mid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exhibit_getInfoByNum_argsTupleSchemeFactory implements SchemeFactory {
      public exhibit_getInfoByNum_argsTupleScheme getScheme() {
        return new exhibit_getInfoByNum_argsTupleScheme();
      }
    }

    private static class exhibit_getInfoByNum_argsTupleScheme extends TupleScheme<exhibit_getInfoByNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exhibit_getInfoByNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMid()) {
          optionals.set(0);
        }
        if (struct.isSetNum()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMid()) {
          oprot.writeString(struct.mid);
        }
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exhibit_getInfoByNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.mid = iprot.readString();
          struct.setMidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
      }
    }

  }

  public static class exhibit_getInfoByNum_result implements org.apache.thrift.TBase<exhibit_getInfoByNum_result, exhibit_getInfoByNum_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exhibit_getInfoByNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exhibit_getInfoByNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exhibit_getInfoByNum_resultTupleSchemeFactory());
    }

    public Dm_ExhibitList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_ExhibitList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exhibit_getInfoByNum_result.class, metaDataMap);
    }

    public exhibit_getInfoByNum_result() {
    }

    public exhibit_getInfoByNum_result(
      Dm_ExhibitList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exhibit_getInfoByNum_result(exhibit_getInfoByNum_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_ExhibitList(other.success);
      }
    }

    public exhibit_getInfoByNum_result deepCopy() {
      return new exhibit_getInfoByNum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_ExhibitList getSuccess() {
      return this.success;
    }

    public exhibit_getInfoByNum_result setSuccess(Dm_ExhibitList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_ExhibitList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exhibit_getInfoByNum_result)
        return this.equals((exhibit_getInfoByNum_result)that);
      return false;
    }

    public boolean equals(exhibit_getInfoByNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exhibit_getInfoByNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exhibit_getInfoByNum_result typedOther = (exhibit_getInfoByNum_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exhibit_getInfoByNum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exhibit_getInfoByNum_resultStandardSchemeFactory implements SchemeFactory {
      public exhibit_getInfoByNum_resultStandardScheme getScheme() {
        return new exhibit_getInfoByNum_resultStandardScheme();
      }
    }

    private static class exhibit_getInfoByNum_resultStandardScheme extends StandardScheme<exhibit_getInfoByNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exhibit_getInfoByNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_ExhibitList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exhibit_getInfoByNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exhibit_getInfoByNum_resultTupleSchemeFactory implements SchemeFactory {
      public exhibit_getInfoByNum_resultTupleScheme getScheme() {
        return new exhibit_getInfoByNum_resultTupleScheme();
      }
    }

    private static class exhibit_getInfoByNum_resultTupleScheme extends TupleScheme<exhibit_getInfoByNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exhibit_getInfoByNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exhibit_getInfoByNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_ExhibitList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class suibiplList_args implements org.apache.thrift.TBase<suibiplList_args, suibiplList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("suibiplList_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new suibiplList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new suibiplList_argsTupleSchemeFactory());
    }

    public String id; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      PAGE((short)2, "page"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // PAGE
            return PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(suibiplList_args.class, metaDataMap);
    }

    public suibiplList_args() {
    }

    public suibiplList_args(
      String id,
      int page,
      int pageSize)
    {
      this();
      this.id = id;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suibiplList_args(suibiplList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetId()) {
        this.id = other.id;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public suibiplList_args deepCopy() {
      return new suibiplList_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getId() {
      return this.id;
    }

    public suibiplList_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public suibiplList_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public suibiplList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof suibiplList_args)
        return this.equals((suibiplList_args)that);
      return false;
    }

    public boolean equals(suibiplList_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(suibiplList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      suibiplList_args typedOther = (suibiplList_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("suibiplList_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suibiplList_argsStandardSchemeFactory implements SchemeFactory {
      public suibiplList_argsStandardScheme getScheme() {
        return new suibiplList_argsStandardScheme();
      }
    }

    private static class suibiplList_argsStandardScheme extends StandardScheme<suibiplList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, suibiplList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, suibiplList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suibiplList_argsTupleSchemeFactory implements SchemeFactory {
      public suibiplList_argsTupleScheme getScheme() {
        return new suibiplList_argsTupleScheme();
      }
    }

    private static class suibiplList_argsTupleScheme extends TupleScheme<suibiplList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, suibiplList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, suibiplList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class suibiplList_result implements org.apache.thrift.TBase<suibiplList_result, suibiplList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("suibiplList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new suibiplList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new suibiplList_resultTupleSchemeFactory());
    }

    public Dm_suibi_pllist success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_suibi_pllist.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(suibiplList_result.class, metaDataMap);
    }

    public suibiplList_result() {
    }

    public suibiplList_result(
      Dm_suibi_pllist success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suibiplList_result(suibiplList_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_suibi_pllist(other.success);
      }
    }

    public suibiplList_result deepCopy() {
      return new suibiplList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_suibi_pllist getSuccess() {
      return this.success;
    }

    public suibiplList_result setSuccess(Dm_suibi_pllist success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_suibi_pllist)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof suibiplList_result)
        return this.equals((suibiplList_result)that);
      return false;
    }

    public boolean equals(suibiplList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(suibiplList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      suibiplList_result typedOther = (suibiplList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("suibiplList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suibiplList_resultStandardSchemeFactory implements SchemeFactory {
      public suibiplList_resultStandardScheme getScheme() {
        return new suibiplList_resultStandardScheme();
      }
    }

    private static class suibiplList_resultStandardScheme extends StandardScheme<suibiplList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, suibiplList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_suibi_pllist();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, suibiplList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suibiplList_resultTupleSchemeFactory implements SchemeFactory {
      public suibiplList_resultTupleScheme getScheme() {
        return new suibiplList_resultTupleScheme();
      }
    }

    private static class suibiplList_resultTupleScheme extends TupleScheme<suibiplList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, suibiplList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, suibiplList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_suibi_pllist();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ge_AttentionList_args implements org.apache.thrift.TBase<ge_AttentionList_args, ge_AttentionList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ge_AttentionList_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ge_AttentionList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ge_AttentionList_argsTupleSchemeFactory());
    }

    public String id; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      PAGE((short)2, "page"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // PAGE
            return PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ge_AttentionList_args.class, metaDataMap);
    }

    public ge_AttentionList_args() {
    }

    public ge_AttentionList_args(
      String id,
      int page,
      int pageSize)
    {
      this();
      this.id = id;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ge_AttentionList_args(ge_AttentionList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetId()) {
        this.id = other.id;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public ge_AttentionList_args deepCopy() {
      return new ge_AttentionList_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getId() {
      return this.id;
    }

    public ge_AttentionList_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public ge_AttentionList_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public ge_AttentionList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ge_AttentionList_args)
        return this.equals((ge_AttentionList_args)that);
      return false;
    }

    public boolean equals(ge_AttentionList_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ge_AttentionList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ge_AttentionList_args typedOther = (ge_AttentionList_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ge_AttentionList_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ge_AttentionList_argsStandardSchemeFactory implements SchemeFactory {
      public ge_AttentionList_argsStandardScheme getScheme() {
        return new ge_AttentionList_argsStandardScheme();
      }
    }

    private static class ge_AttentionList_argsStandardScheme extends StandardScheme<ge_AttentionList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ge_AttentionList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ge_AttentionList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ge_AttentionList_argsTupleSchemeFactory implements SchemeFactory {
      public ge_AttentionList_argsTupleScheme getScheme() {
        return new ge_AttentionList_argsTupleScheme();
      }
    }

    private static class ge_AttentionList_argsTupleScheme extends TupleScheme<ge_AttentionList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ge_AttentionList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ge_AttentionList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class ge_AttentionList_result implements org.apache.thrift.TBase<ge_AttentionList_result, ge_AttentionList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ge_AttentionList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ge_AttentionList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ge_AttentionList_resultTupleSchemeFactory());
    }

    public Dm_suibi_list success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_suibi_list.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ge_AttentionList_result.class, metaDataMap);
    }

    public ge_AttentionList_result() {
    }

    public ge_AttentionList_result(
      Dm_suibi_list success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ge_AttentionList_result(ge_AttentionList_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_suibi_list(other.success);
      }
    }

    public ge_AttentionList_result deepCopy() {
      return new ge_AttentionList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_suibi_list getSuccess() {
      return this.success;
    }

    public ge_AttentionList_result setSuccess(Dm_suibi_list success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_suibi_list)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ge_AttentionList_result)
        return this.equals((ge_AttentionList_result)that);
      return false;
    }

    public boolean equals(ge_AttentionList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ge_AttentionList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ge_AttentionList_result typedOther = (ge_AttentionList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ge_AttentionList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ge_AttentionList_resultStandardSchemeFactory implements SchemeFactory {
      public ge_AttentionList_resultStandardScheme getScheme() {
        return new ge_AttentionList_resultStandardScheme();
      }
    }

    private static class ge_AttentionList_resultStandardScheme extends StandardScheme<ge_AttentionList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ge_AttentionList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_suibi_list();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ge_AttentionList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ge_AttentionList_resultTupleSchemeFactory implements SchemeFactory {
      public ge_AttentionList_resultTupleScheme getScheme() {
        return new ge_AttentionList_resultTupleScheme();
      }
    }

    private static class ge_AttentionList_resultTupleScheme extends TupleScheme<ge_AttentionList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ge_AttentionList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ge_AttentionList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_suibi_list();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ge_suibiList_args implements org.apache.thrift.TBase<ge_suibiList_args, ge_suibiList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ge_suibiList_args");

    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ge_suibiList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ge_suibiList_argsTupleSchemeFactory());
    }

    public String userid; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USERID((short)1, "userid"),
      PAGE((short)2, "page"),
      PAGE_SIZE((short)3, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USERID
            return USERID;
          case 2: // PAGE
            return PAGE;
          case 3: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ge_suibiList_args.class, metaDataMap);
    }

    public ge_suibiList_args() {
    }

    public ge_suibiList_args(
      String userid,
      int page,
      int pageSize)
    {
      this();
      this.userid = userid;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ge_suibiList_args(ge_suibiList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public ge_suibiList_args deepCopy() {
      return new ge_suibiList_args(this);
    }

    @Override
    public void clear() {
      this.userid = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getUserid() {
      return this.userid;
    }

    public ge_suibiList_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public ge_suibiList_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public ge_suibiList_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USERID:
        return getUserid();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USERID:
        return isSetUserid();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ge_suibiList_args)
        return this.equals((ge_suibiList_args)that);
      return false;
    }

    public boolean equals(ge_suibiList_args that) {
      if (that == null)
        return false;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ge_suibiList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ge_suibiList_args typedOther = (ge_suibiList_args)other;

      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ge_suibiList_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ge_suibiList_argsStandardSchemeFactory implements SchemeFactory {
      public ge_suibiList_argsStandardScheme getScheme() {
        return new ge_suibiList_argsStandardScheme();
      }
    }

    private static class ge_suibiList_argsStandardScheme extends StandardScheme<ge_suibiList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ge_suibiList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ge_suibiList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ge_suibiList_argsTupleSchemeFactory implements SchemeFactory {
      public ge_suibiList_argsTupleScheme getScheme() {
        return new ge_suibiList_argsTupleScheme();
      }
    }

    private static class ge_suibiList_argsTupleScheme extends TupleScheme<ge_suibiList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ge_suibiList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserid()) {
          optionals.set(0);
        }
        if (struct.isSetPage()) {
          optionals.set(1);
        }
        if (struct.isSetPageSize()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ge_suibiList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(1)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class ge_suibiList_result implements org.apache.thrift.TBase<ge_suibiList_result, ge_suibiList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ge_suibiList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ge_suibiList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ge_suibiList_resultTupleSchemeFactory());
    }

    public Dm_suibi_list success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_suibi_list.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ge_suibiList_result.class, metaDataMap);
    }

    public ge_suibiList_result() {
    }

    public ge_suibiList_result(
      Dm_suibi_list success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ge_suibiList_result(ge_suibiList_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_suibi_list(other.success);
      }
    }

    public ge_suibiList_result deepCopy() {
      return new ge_suibiList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_suibi_list getSuccess() {
      return this.success;
    }

    public ge_suibiList_result setSuccess(Dm_suibi_list success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_suibi_list)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ge_suibiList_result)
        return this.equals((ge_suibiList_result)that);
      return false;
    }

    public boolean equals(ge_suibiList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ge_suibiList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ge_suibiList_result typedOther = (ge_suibiList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ge_suibiList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ge_suibiList_resultStandardSchemeFactory implements SchemeFactory {
      public ge_suibiList_resultStandardScheme getScheme() {
        return new ge_suibiList_resultStandardScheme();
      }
    }

    private static class ge_suibiList_resultStandardScheme extends StandardScheme<ge_suibiList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ge_suibiList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_suibi_list();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ge_suibiList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ge_suibiList_resultTupleSchemeFactory implements SchemeFactory {
      public ge_suibiList_resultTupleScheme getScheme() {
        return new ge_suibiList_resultTupleScheme();
      }
    }

    private static class ge_suibiList_resultTupleScheme extends TupleScheme<ge_suibiList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ge_suibiList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ge_suibiList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_suibi_list();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectSuibi_args implements org.apache.thrift.TBase<selectSuibi_args, selectSuibi_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSuibi_args");

    private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NR_FIELD_DESC = new org.apache.thrift.protocol.TField("nr", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ISPRIVATE_FIELD_DESC = new org.apache.thrift.protocol.TField("isprivate", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("img", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSuibi_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSuibi_argsTupleSchemeFactory());
    }

    public String tag; // required
    public String nr; // required
    public String isprivate; // required
    public String img; // required
    public String userid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG((short)1, "tag"),
      NR((short)2, "nr"),
      ISPRIVATE((short)3, "isprivate"),
      IMG((short)4, "img"),
      USERID((short)5, "userid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG
            return TAG;
          case 2: // NR
            return NR;
          case 3: // ISPRIVATE
            return ISPRIVATE;
          case 4: // IMG
            return IMG;
          case 5: // USERID
            return USERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NR, new org.apache.thrift.meta_data.FieldMetaData("nr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISPRIVATE, new org.apache.thrift.meta_data.FieldMetaData("isprivate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMG, new org.apache.thrift.meta_data.FieldMetaData("img", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSuibi_args.class, metaDataMap);
    }

    public selectSuibi_args() {
    }

    public selectSuibi_args(
      String tag,
      String nr,
      String isprivate,
      String img,
      String userid)
    {
      this();
      this.tag = tag;
      this.nr = nr;
      this.isprivate = isprivate;
      this.img = img;
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSuibi_args(selectSuibi_args other) {
      if (other.isSetTag()) {
        this.tag = other.tag;
      }
      if (other.isSetNr()) {
        this.nr = other.nr;
      }
      if (other.isSetIsprivate()) {
        this.isprivate = other.isprivate;
      }
      if (other.isSetImg()) {
        this.img = other.img;
      }
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public selectSuibi_args deepCopy() {
      return new selectSuibi_args(this);
    }

    @Override
    public void clear() {
      this.tag = null;
      this.nr = null;
      this.isprivate = null;
      this.img = null;
      this.userid = null;
    }

    public String getTag() {
      return this.tag;
    }

    public selectSuibi_args setTag(String tag) {
      this.tag = tag;
      return this;
    }

    public void unsetTag() {
      this.tag = null;
    }

    /** Returns true if field tag is set (has been assigned a value) and false otherwise */
    public boolean isSetTag() {
      return this.tag != null;
    }

    public void setTagIsSet(boolean value) {
      if (!value) {
        this.tag = null;
      }
    }

    public String getNr() {
      return this.nr;
    }

    public selectSuibi_args setNr(String nr) {
      this.nr = nr;
      return this;
    }

    public void unsetNr() {
      this.nr = null;
    }

    /** Returns true if field nr is set (has been assigned a value) and false otherwise */
    public boolean isSetNr() {
      return this.nr != null;
    }

    public void setNrIsSet(boolean value) {
      if (!value) {
        this.nr = null;
      }
    }

    public String getIsprivate() {
      return this.isprivate;
    }

    public selectSuibi_args setIsprivate(String isprivate) {
      this.isprivate = isprivate;
      return this;
    }

    public void unsetIsprivate() {
      this.isprivate = null;
    }

    /** Returns true if field isprivate is set (has been assigned a value) and false otherwise */
    public boolean isSetIsprivate() {
      return this.isprivate != null;
    }

    public void setIsprivateIsSet(boolean value) {
      if (!value) {
        this.isprivate = null;
      }
    }

    public String getImg() {
      return this.img;
    }

    public selectSuibi_args setImg(String img) {
      this.img = img;
      return this;
    }

    public void unsetImg() {
      this.img = null;
    }

    /** Returns true if field img is set (has been assigned a value) and false otherwise */
    public boolean isSetImg() {
      return this.img != null;
    }

    public void setImgIsSet(boolean value) {
      if (!value) {
        this.img = null;
      }
    }

    public String getUserid() {
      return this.userid;
    }

    public selectSuibi_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG:
        if (value == null) {
          unsetTag();
        } else {
          setTag((String)value);
        }
        break;

      case NR:
        if (value == null) {
          unsetNr();
        } else {
          setNr((String)value);
        }
        break;

      case ISPRIVATE:
        if (value == null) {
          unsetIsprivate();
        } else {
          setIsprivate((String)value);
        }
        break;

      case IMG:
        if (value == null) {
          unsetImg();
        } else {
          setImg((String)value);
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG:
        return getTag();

      case NR:
        return getNr();

      case ISPRIVATE:
        return getIsprivate();

      case IMG:
        return getImg();

      case USERID:
        return getUserid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG:
        return isSetTag();
      case NR:
        return isSetNr();
      case ISPRIVATE:
        return isSetIsprivate();
      case IMG:
        return isSetImg();
      case USERID:
        return isSetUserid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSuibi_args)
        return this.equals((selectSuibi_args)that);
      return false;
    }

    public boolean equals(selectSuibi_args that) {
      if (that == null)
        return false;

      boolean this_present_tag = true && this.isSetTag();
      boolean that_present_tag = true && that.isSetTag();
      if (this_present_tag || that_present_tag) {
        if (!(this_present_tag && that_present_tag))
          return false;
        if (!this.tag.equals(that.tag))
          return false;
      }

      boolean this_present_nr = true && this.isSetNr();
      boolean that_present_nr = true && that.isSetNr();
      if (this_present_nr || that_present_nr) {
        if (!(this_present_nr && that_present_nr))
          return false;
        if (!this.nr.equals(that.nr))
          return false;
      }

      boolean this_present_isprivate = true && this.isSetIsprivate();
      boolean that_present_isprivate = true && that.isSetIsprivate();
      if (this_present_isprivate || that_present_isprivate) {
        if (!(this_present_isprivate && that_present_isprivate))
          return false;
        if (!this.isprivate.equals(that.isprivate))
          return false;
      }

      boolean this_present_img = true && this.isSetImg();
      boolean that_present_img = true && that.isSetImg();
      if (this_present_img || that_present_img) {
        if (!(this_present_img && that_present_img))
          return false;
        if (!this.img.equals(that.img))
          return false;
      }

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(selectSuibi_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      selectSuibi_args typedOther = (selectSuibi_args)other;

      lastComparison = Boolean.valueOf(isSetTag()).compareTo(typedOther.isSetTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, typedOther.tag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNr()).compareTo(typedOther.isSetNr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nr, typedOther.nr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsprivate()).compareTo(typedOther.isSetIsprivate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsprivate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isprivate, typedOther.isprivate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImg()).compareTo(typedOther.isSetImg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img, typedOther.img);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSuibi_args(");
      boolean first = true;

      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nr:");
      if (this.nr == null) {
        sb.append("null");
      } else {
        sb.append(this.nr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isprivate:");
      if (this.isprivate == null) {
        sb.append("null");
      } else {
        sb.append(this.isprivate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("img:");
      if (this.img == null) {
        sb.append("null");
      } else {
        sb.append(this.img);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSuibi_argsStandardSchemeFactory implements SchemeFactory {
      public selectSuibi_argsStandardScheme getScheme() {
        return new selectSuibi_argsStandardScheme();
      }
    }

    private static class selectSuibi_argsStandardScheme extends StandardScheme<selectSuibi_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSuibi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tag = iprot.readString();
                struct.setTagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nr = iprot.readString();
                struct.setNrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ISPRIVATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.isprivate = iprot.readString();
                struct.setIsprivateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IMG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.img = iprot.readString();
                struct.setImgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSuibi_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tag != null) {
          oprot.writeFieldBegin(TAG_FIELD_DESC);
          oprot.writeString(struct.tag);
          oprot.writeFieldEnd();
        }
        if (struct.nr != null) {
          oprot.writeFieldBegin(NR_FIELD_DESC);
          oprot.writeString(struct.nr);
          oprot.writeFieldEnd();
        }
        if (struct.isprivate != null) {
          oprot.writeFieldBegin(ISPRIVATE_FIELD_DESC);
          oprot.writeString(struct.isprivate);
          oprot.writeFieldEnd();
        }
        if (struct.img != null) {
          oprot.writeFieldBegin(IMG_FIELD_DESC);
          oprot.writeString(struct.img);
          oprot.writeFieldEnd();
        }
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSuibi_argsTupleSchemeFactory implements SchemeFactory {
      public selectSuibi_argsTupleScheme getScheme() {
        return new selectSuibi_argsTupleScheme();
      }
    }

    private static class selectSuibi_argsTupleScheme extends TupleScheme<selectSuibi_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSuibi_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTag()) {
          optionals.set(0);
        }
        if (struct.isSetNr()) {
          optionals.set(1);
        }
        if (struct.isSetIsprivate()) {
          optionals.set(2);
        }
        if (struct.isSetImg()) {
          optionals.set(3);
        }
        if (struct.isSetUserid()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTag()) {
          oprot.writeString(struct.tag);
        }
        if (struct.isSetNr()) {
          oprot.writeString(struct.nr);
        }
        if (struct.isSetIsprivate()) {
          oprot.writeString(struct.isprivate);
        }
        if (struct.isSetImg()) {
          oprot.writeString(struct.img);
        }
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSuibi_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.tag = iprot.readString();
          struct.setTagIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nr = iprot.readString();
          struct.setNrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.isprivate = iprot.readString();
          struct.setIsprivateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.img = iprot.readString();
          struct.setImgIsSet(true);
        }
        if (incoming.get(4)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
      }
    }

  }

  public static class selectSuibi_result implements org.apache.thrift.TBase<selectSuibi_result, selectSuibi_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSuibi_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSuibi_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSuibi_resultTupleSchemeFactory());
    }

    public Dm_Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSuibi_result.class, metaDataMap);
    }

    public selectSuibi_result() {
    }

    public selectSuibi_result(
      Dm_Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSuibi_result(selectSuibi_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_Result(other.success);
      }
    }

    public selectSuibi_result deepCopy() {
      return new selectSuibi_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_Result getSuccess() {
      return this.success;
    }

    public selectSuibi_result setSuccess(Dm_Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSuibi_result)
        return this.equals((selectSuibi_result)that);
      return false;
    }

    public boolean equals(selectSuibi_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(selectSuibi_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      selectSuibi_result typedOther = (selectSuibi_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSuibi_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSuibi_resultStandardSchemeFactory implements SchemeFactory {
      public selectSuibi_resultStandardScheme getScheme() {
        return new selectSuibi_resultStandardScheme();
      }
    }

    private static class selectSuibi_resultStandardScheme extends StandardScheme<selectSuibi_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSuibi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSuibi_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSuibi_resultTupleSchemeFactory implements SchemeFactory {
      public selectSuibi_resultTupleScheme getScheme() {
        return new selectSuibi_resultTupleScheme();
      }
    }

    private static class selectSuibi_resultTupleScheme extends TupleScheme<selectSuibi_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSuibi_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSuibi_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectSuibi_zf_args implements org.apache.thrift.TBase<selectSuibi_zf_args, selectSuibi_zf_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSuibi_zf_args");

    private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSuibi_zf_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSuibi_zf_argsTupleSchemeFactory());
    }

    public String sid; // required
    public String tag; // required
    public String userid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SID((short)1, "sid"),
      TAG((short)2, "tag"),
      USERID((short)3, "userid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SID
            return SID;
          case 2: // TAG
            return TAG;
          case 3: // USERID
            return USERID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSuibi_zf_args.class, metaDataMap);
    }

    public selectSuibi_zf_args() {
    }

    public selectSuibi_zf_args(
      String sid,
      String tag,
      String userid)
    {
      this();
      this.sid = sid;
      this.tag = tag;
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSuibi_zf_args(selectSuibi_zf_args other) {
      if (other.isSetSid()) {
        this.sid = other.sid;
      }
      if (other.isSetTag()) {
        this.tag = other.tag;
      }
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public selectSuibi_zf_args deepCopy() {
      return new selectSuibi_zf_args(this);
    }

    @Override
    public void clear() {
      this.sid = null;
      this.tag = null;
      this.userid = null;
    }

    public String getSid() {
      return this.sid;
    }

    public selectSuibi_zf_args setSid(String sid) {
      this.sid = sid;
      return this;
    }

    public void unsetSid() {
      this.sid = null;
    }

    /** Returns true if field sid is set (has been assigned a value) and false otherwise */
    public boolean isSetSid() {
      return this.sid != null;
    }

    public void setSidIsSet(boolean value) {
      if (!value) {
        this.sid = null;
      }
    }

    public String getTag() {
      return this.tag;
    }

    public selectSuibi_zf_args setTag(String tag) {
      this.tag = tag;
      return this;
    }

    public void unsetTag() {
      this.tag = null;
    }

    /** Returns true if field tag is set (has been assigned a value) and false otherwise */
    public boolean isSetTag() {
      return this.tag != null;
    }

    public void setTagIsSet(boolean value) {
      if (!value) {
        this.tag = null;
      }
    }

    public String getUserid() {
      return this.userid;
    }

    public selectSuibi_zf_args setUserid(String userid) {
      this.userid = userid;
      return this;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SID:
        if (value == null) {
          unsetSid();
        } else {
          setSid((String)value);
        }
        break;

      case TAG:
        if (value == null) {
          unsetTag();
        } else {
          setTag((String)value);
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SID:
        return getSid();

      case TAG:
        return getTag();

      case USERID:
        return getUserid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SID:
        return isSetSid();
      case TAG:
        return isSetTag();
      case USERID:
        return isSetUserid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSuibi_zf_args)
        return this.equals((selectSuibi_zf_args)that);
      return false;
    }

    public boolean equals(selectSuibi_zf_args that) {
      if (that == null)
        return false;

      boolean this_present_sid = true && this.isSetSid();
      boolean that_present_sid = true && that.isSetSid();
      if (this_present_sid || that_present_sid) {
        if (!(this_present_sid && that_present_sid))
          return false;
        if (!this.sid.equals(that.sid))
          return false;
      }

      boolean this_present_tag = true && this.isSetTag();
      boolean that_present_tag = true && that.isSetTag();
      if (this_present_tag || that_present_tag) {
        if (!(this_present_tag && that_present_tag))
          return false;
        if (!this.tag.equals(that.tag))
          return false;
      }

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(selectSuibi_zf_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      selectSuibi_zf_args typedOther = (selectSuibi_zf_args)other;

      lastComparison = Boolean.valueOf(isSetSid()).compareTo(typedOther.isSetSid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, typedOther.sid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTag()).compareTo(typedOther.isSetTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, typedOther.tag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSuibi_zf_args(");
      boolean first = true;

      sb.append("sid:");
      if (this.sid == null) {
        sb.append("null");
      } else {
        sb.append(this.sid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tag:");
      if (this.tag == null) {
        sb.append("null");
      } else {
        sb.append(this.tag);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSuibi_zf_argsStandardSchemeFactory implements SchemeFactory {
      public selectSuibi_zf_argsStandardScheme getScheme() {
        return new selectSuibi_zf_argsStandardScheme();
      }
    }

    private static class selectSuibi_zf_argsStandardScheme extends StandardScheme<selectSuibi_zf_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSuibi_zf_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sid = iprot.readString();
                struct.setSidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TAG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tag = iprot.readString();
                struct.setTagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userid = iprot.readString();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSuibi_zf_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sid != null) {
          oprot.writeFieldBegin(SID_FIELD_DESC);
          oprot.writeString(struct.sid);
          oprot.writeFieldEnd();
        }
        if (struct.tag != null) {
          oprot.writeFieldBegin(TAG_FIELD_DESC);
          oprot.writeString(struct.tag);
          oprot.writeFieldEnd();
        }
        if (struct.userid != null) {
          oprot.writeFieldBegin(USERID_FIELD_DESC);
          oprot.writeString(struct.userid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSuibi_zf_argsTupleSchemeFactory implements SchemeFactory {
      public selectSuibi_zf_argsTupleScheme getScheme() {
        return new selectSuibi_zf_argsTupleScheme();
      }
    }

    private static class selectSuibi_zf_argsTupleScheme extends TupleScheme<selectSuibi_zf_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSuibi_zf_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSid()) {
          optionals.set(0);
        }
        if (struct.isSetTag()) {
          optionals.set(1);
        }
        if (struct.isSetUserid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSid()) {
          oprot.writeString(struct.sid);
        }
        if (struct.isSetTag()) {
          oprot.writeString(struct.tag);
        }
        if (struct.isSetUserid()) {
          oprot.writeString(struct.userid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSuibi_zf_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sid = iprot.readString();
          struct.setSidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tag = iprot.readString();
          struct.setTagIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userid = iprot.readString();
          struct.setUseridIsSet(true);
        }
      }
    }

  }

  public static class selectSuibi_zf_result implements org.apache.thrift.TBase<selectSuibi_zf_result, selectSuibi_zf_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSuibi_zf_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSuibi_zf_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSuibi_zf_resultTupleSchemeFactory());
    }

    public Dm_Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSuibi_zf_result.class, metaDataMap);
    }

    public selectSuibi_zf_result() {
    }

    public selectSuibi_zf_result(
      Dm_Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSuibi_zf_result(selectSuibi_zf_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_Result(other.success);
      }
    }

    public selectSuibi_zf_result deepCopy() {
      return new selectSuibi_zf_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_Result getSuccess() {
      return this.success;
    }

    public selectSuibi_zf_result setSuccess(Dm_Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSuibi_zf_result)
        return this.equals((selectSuibi_zf_result)that);
      return false;
    }

    public boolean equals(selectSuibi_zf_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(selectSuibi_zf_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      selectSuibi_zf_result typedOther = (selectSuibi_zf_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSuibi_zf_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSuibi_zf_resultStandardSchemeFactory implements SchemeFactory {
      public selectSuibi_zf_resultStandardScheme getScheme() {
        return new selectSuibi_zf_resultStandardScheme();
      }
    }

    private static class selectSuibi_zf_resultStandardScheme extends StandardScheme<selectSuibi_zf_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSuibi_zf_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSuibi_zf_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSuibi_zf_resultTupleSchemeFactory implements SchemeFactory {
      public selectSuibi_zf_resultTupleScheme getScheme() {
        return new selectSuibi_zf_resultTupleScheme();
      }
    }

    private static class selectSuibi_zf_resultTupleScheme extends TupleScheme<selectSuibi_zf_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSuibi_zf_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSuibi_zf_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectSuibi_hfpl_args implements org.apache.thrift.TBase<selectSuibi_hfpl_args, selectSuibi_hfpl_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSuibi_hfpl_args");

    private static final org.apache.thrift.protocol.TField PLNR_FIELD_DESC = new org.apache.thrift.protocol.TField("plnr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FATHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("father_id", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SUIBI_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("suibi_id", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSuibi_hfpl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSuibi_hfpl_argsTupleSchemeFactory());
    }

    public String plnr; // required
    public String father_id; // required
    public String user_id; // required
    public String suibi_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLNR((short)1, "plnr"),
      FATHER_ID((short)2, "father_id"),
      USER_ID((short)3, "user_id"),
      SUIBI_ID((short)4, "suibi_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLNR
            return PLNR;
          case 2: // FATHER_ID
            return FATHER_ID;
          case 3: // USER_ID
            return USER_ID;
          case 4: // SUIBI_ID
            return SUIBI_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLNR, new org.apache.thrift.meta_data.FieldMetaData("plnr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FATHER_ID, new org.apache.thrift.meta_data.FieldMetaData("father_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SUIBI_ID, new org.apache.thrift.meta_data.FieldMetaData("suibi_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSuibi_hfpl_args.class, metaDataMap);
    }

    public selectSuibi_hfpl_args() {
    }

    public selectSuibi_hfpl_args(
      String plnr,
      String father_id,
      String user_id,
      String suibi_id)
    {
      this();
      this.plnr = plnr;
      this.father_id = father_id;
      this.user_id = user_id;
      this.suibi_id = suibi_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSuibi_hfpl_args(selectSuibi_hfpl_args other) {
      if (other.isSetPlnr()) {
        this.plnr = other.plnr;
      }
      if (other.isSetFather_id()) {
        this.father_id = other.father_id;
      }
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
      if (other.isSetSuibi_id()) {
        this.suibi_id = other.suibi_id;
      }
    }

    public selectSuibi_hfpl_args deepCopy() {
      return new selectSuibi_hfpl_args(this);
    }

    @Override
    public void clear() {
      this.plnr = null;
      this.father_id = null;
      this.user_id = null;
      this.suibi_id = null;
    }

    public String getPlnr() {
      return this.plnr;
    }

    public selectSuibi_hfpl_args setPlnr(String plnr) {
      this.plnr = plnr;
      return this;
    }

    public void unsetPlnr() {
      this.plnr = null;
    }

    /** Returns true if field plnr is set (has been assigned a value) and false otherwise */
    public boolean isSetPlnr() {
      return this.plnr != null;
    }

    public void setPlnrIsSet(boolean value) {
      if (!value) {
        this.plnr = null;
      }
    }

    public String getFather_id() {
      return this.father_id;
    }

    public selectSuibi_hfpl_args setFather_id(String father_id) {
      this.father_id = father_id;
      return this;
    }

    public void unsetFather_id() {
      this.father_id = null;
    }

    /** Returns true if field father_id is set (has been assigned a value) and false otherwise */
    public boolean isSetFather_id() {
      return this.father_id != null;
    }

    public void setFather_idIsSet(boolean value) {
      if (!value) {
        this.father_id = null;
      }
    }

    public String getUser_id() {
      return this.user_id;
    }

    public selectSuibi_hfpl_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public String getSuibi_id() {
      return this.suibi_id;
    }

    public selectSuibi_hfpl_args setSuibi_id(String suibi_id) {
      this.suibi_id = suibi_id;
      return this;
    }

    public void unsetSuibi_id() {
      this.suibi_id = null;
    }

    /** Returns true if field suibi_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSuibi_id() {
      return this.suibi_id != null;
    }

    public void setSuibi_idIsSet(boolean value) {
      if (!value) {
        this.suibi_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLNR:
        if (value == null) {
          unsetPlnr();
        } else {
          setPlnr((String)value);
        }
        break;

      case FATHER_ID:
        if (value == null) {
          unsetFather_id();
        } else {
          setFather_id((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      case SUIBI_ID:
        if (value == null) {
          unsetSuibi_id();
        } else {
          setSuibi_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLNR:
        return getPlnr();

      case FATHER_ID:
        return getFather_id();

      case USER_ID:
        return getUser_id();

      case SUIBI_ID:
        return getSuibi_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLNR:
        return isSetPlnr();
      case FATHER_ID:
        return isSetFather_id();
      case USER_ID:
        return isSetUser_id();
      case SUIBI_ID:
        return isSetSuibi_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSuibi_hfpl_args)
        return this.equals((selectSuibi_hfpl_args)that);
      return false;
    }

    public boolean equals(selectSuibi_hfpl_args that) {
      if (that == null)
        return false;

      boolean this_present_plnr = true && this.isSetPlnr();
      boolean that_present_plnr = true && that.isSetPlnr();
      if (this_present_plnr || that_present_plnr) {
        if (!(this_present_plnr && that_present_plnr))
          return false;
        if (!this.plnr.equals(that.plnr))
          return false;
      }

      boolean this_present_father_id = true && this.isSetFather_id();
      boolean that_present_father_id = true && that.isSetFather_id();
      if (this_present_father_id || that_present_father_id) {
        if (!(this_present_father_id && that_present_father_id))
          return false;
        if (!this.father_id.equals(that.father_id))
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      boolean this_present_suibi_id = true && this.isSetSuibi_id();
      boolean that_present_suibi_id = true && that.isSetSuibi_id();
      if (this_present_suibi_id || that_present_suibi_id) {
        if (!(this_present_suibi_id && that_present_suibi_id))
          return false;
        if (!this.suibi_id.equals(that.suibi_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(selectSuibi_hfpl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      selectSuibi_hfpl_args typedOther = (selectSuibi_hfpl_args)other;

      lastComparison = Boolean.valueOf(isSetPlnr()).compareTo(typedOther.isSetPlnr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlnr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plnr, typedOther.plnr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFather_id()).compareTo(typedOther.isSetFather_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFather_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.father_id, typedOther.father_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSuibi_id()).compareTo(typedOther.isSetSuibi_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuibi_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suibi_id, typedOther.suibi_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSuibi_hfpl_args(");
      boolean first = true;

      sb.append("plnr:");
      if (this.plnr == null) {
        sb.append("null");
      } else {
        sb.append(this.plnr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("father_id:");
      if (this.father_id == null) {
        sb.append("null");
      } else {
        sb.append(this.father_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("suibi_id:");
      if (this.suibi_id == null) {
        sb.append("null");
      } else {
        sb.append(this.suibi_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSuibi_hfpl_argsStandardSchemeFactory implements SchemeFactory {
      public selectSuibi_hfpl_argsStandardScheme getScheme() {
        return new selectSuibi_hfpl_argsStandardScheme();
      }
    }

    private static class selectSuibi_hfpl_argsStandardScheme extends StandardScheme<selectSuibi_hfpl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSuibi_hfpl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLNR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.plnr = iprot.readString();
                struct.setPlnrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FATHER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.father_id = iprot.readString();
                struct.setFather_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SUIBI_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.suibi_id = iprot.readString();
                struct.setSuibi_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSuibi_hfpl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.plnr != null) {
          oprot.writeFieldBegin(PLNR_FIELD_DESC);
          oprot.writeString(struct.plnr);
          oprot.writeFieldEnd();
        }
        if (struct.father_id != null) {
          oprot.writeFieldBegin(FATHER_ID_FIELD_DESC);
          oprot.writeString(struct.father_id);
          oprot.writeFieldEnd();
        }
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        if (struct.suibi_id != null) {
          oprot.writeFieldBegin(SUIBI_ID_FIELD_DESC);
          oprot.writeString(struct.suibi_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSuibi_hfpl_argsTupleSchemeFactory implements SchemeFactory {
      public selectSuibi_hfpl_argsTupleScheme getScheme() {
        return new selectSuibi_hfpl_argsTupleScheme();
      }
    }

    private static class selectSuibi_hfpl_argsTupleScheme extends TupleScheme<selectSuibi_hfpl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSuibi_hfpl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlnr()) {
          optionals.set(0);
        }
        if (struct.isSetFather_id()) {
          optionals.set(1);
        }
        if (struct.isSetUser_id()) {
          optionals.set(2);
        }
        if (struct.isSetSuibi_id()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlnr()) {
          oprot.writeString(struct.plnr);
        }
        if (struct.isSetFather_id()) {
          oprot.writeString(struct.father_id);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
        if (struct.isSetSuibi_id()) {
          oprot.writeString(struct.suibi_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSuibi_hfpl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.plnr = iprot.readString();
          struct.setPlnrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.father_id = iprot.readString();
          struct.setFather_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
        if (incoming.get(3)) {
          struct.suibi_id = iprot.readString();
          struct.setSuibi_idIsSet(true);
        }
      }
    }

  }

  public static class selectSuibi_hfpl_result implements org.apache.thrift.TBase<selectSuibi_hfpl_result, selectSuibi_hfpl_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSuibi_hfpl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSuibi_hfpl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSuibi_hfpl_resultTupleSchemeFactory());
    }

    public Dm_Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSuibi_hfpl_result.class, metaDataMap);
    }

    public selectSuibi_hfpl_result() {
    }

    public selectSuibi_hfpl_result(
      Dm_Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSuibi_hfpl_result(selectSuibi_hfpl_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_Result(other.success);
      }
    }

    public selectSuibi_hfpl_result deepCopy() {
      return new selectSuibi_hfpl_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_Result getSuccess() {
      return this.success;
    }

    public selectSuibi_hfpl_result setSuccess(Dm_Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSuibi_hfpl_result)
        return this.equals((selectSuibi_hfpl_result)that);
      return false;
    }

    public boolean equals(selectSuibi_hfpl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(selectSuibi_hfpl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      selectSuibi_hfpl_result typedOther = (selectSuibi_hfpl_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSuibi_hfpl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSuibi_hfpl_resultStandardSchemeFactory implements SchemeFactory {
      public selectSuibi_hfpl_resultStandardScheme getScheme() {
        return new selectSuibi_hfpl_resultStandardScheme();
      }
    }

    private static class selectSuibi_hfpl_resultStandardScheme extends StandardScheme<selectSuibi_hfpl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSuibi_hfpl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSuibi_hfpl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSuibi_hfpl_resultTupleSchemeFactory implements SchemeFactory {
      public selectSuibi_hfpl_resultTupleScheme getScheme() {
        return new selectSuibi_hfpl_resultTupleScheme();
      }
    }

    private static class selectSuibi_hfpl_resultTupleScheme extends TupleScheme<selectSuibi_hfpl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSuibi_hfpl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSuibi_hfpl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class selectSuibi_hf_args implements org.apache.thrift.TBase<selectSuibi_hf_args, selectSuibi_hf_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSuibi_hf_args");

    private static final org.apache.thrift.protocol.TField SUIBI_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("suibi_id", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NR_FIELD_DESC = new org.apache.thrift.protocol.TField("nr", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSuibi_hf_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSuibi_hf_argsTupleSchemeFactory());
    }

    public String suibi_id; // required
    public String nr; // required
    public String user_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUIBI_ID((short)1, "suibi_id"),
      NR((short)2, "nr"),
      USER_ID((short)3, "user_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SUIBI_ID
            return SUIBI_ID;
          case 2: // NR
            return NR;
          case 3: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUIBI_ID, new org.apache.thrift.meta_data.FieldMetaData("suibi_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NR, new org.apache.thrift.meta_data.FieldMetaData("nr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSuibi_hf_args.class, metaDataMap);
    }

    public selectSuibi_hf_args() {
    }

    public selectSuibi_hf_args(
      String suibi_id,
      String nr,
      String user_id)
    {
      this();
      this.suibi_id = suibi_id;
      this.nr = nr;
      this.user_id = user_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSuibi_hf_args(selectSuibi_hf_args other) {
      if (other.isSetSuibi_id()) {
        this.suibi_id = other.suibi_id;
      }
      if (other.isSetNr()) {
        this.nr = other.nr;
      }
      if (other.isSetUser_id()) {
        this.user_id = other.user_id;
      }
    }

    public selectSuibi_hf_args deepCopy() {
      return new selectSuibi_hf_args(this);
    }

    @Override
    public void clear() {
      this.suibi_id = null;
      this.nr = null;
      this.user_id = null;
    }

    public String getSuibi_id() {
      return this.suibi_id;
    }

    public selectSuibi_hf_args setSuibi_id(String suibi_id) {
      this.suibi_id = suibi_id;
      return this;
    }

    public void unsetSuibi_id() {
      this.suibi_id = null;
    }

    /** Returns true if field suibi_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSuibi_id() {
      return this.suibi_id != null;
    }

    public void setSuibi_idIsSet(boolean value) {
      if (!value) {
        this.suibi_id = null;
      }
    }

    public String getNr() {
      return this.nr;
    }

    public selectSuibi_hf_args setNr(String nr) {
      this.nr = nr;
      return this;
    }

    public void unsetNr() {
      this.nr = null;
    }

    /** Returns true if field nr is set (has been assigned a value) and false otherwise */
    public boolean isSetNr() {
      return this.nr != null;
    }

    public void setNrIsSet(boolean value) {
      if (!value) {
        this.nr = null;
      }
    }

    public String getUser_id() {
      return this.user_id;
    }

    public selectSuibi_hf_args setUser_id(String user_id) {
      this.user_id = user_id;
      return this;
    }

    public void unsetUser_id() {
      this.user_id = null;
    }

    /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_id() {
      return this.user_id != null;
    }

    public void setUser_idIsSet(boolean value) {
      if (!value) {
        this.user_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUIBI_ID:
        if (value == null) {
          unsetSuibi_id();
        } else {
          setSuibi_id((String)value);
        }
        break;

      case NR:
        if (value == null) {
          unsetNr();
        } else {
          setNr((String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUser_id();
        } else {
          setUser_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUIBI_ID:
        return getSuibi_id();

      case NR:
        return getNr();

      case USER_ID:
        return getUser_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUIBI_ID:
        return isSetSuibi_id();
      case NR:
        return isSetNr();
      case USER_ID:
        return isSetUser_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSuibi_hf_args)
        return this.equals((selectSuibi_hf_args)that);
      return false;
    }

    public boolean equals(selectSuibi_hf_args that) {
      if (that == null)
        return false;

      boolean this_present_suibi_id = true && this.isSetSuibi_id();
      boolean that_present_suibi_id = true && that.isSetSuibi_id();
      if (this_present_suibi_id || that_present_suibi_id) {
        if (!(this_present_suibi_id && that_present_suibi_id))
          return false;
        if (!this.suibi_id.equals(that.suibi_id))
          return false;
      }

      boolean this_present_nr = true && this.isSetNr();
      boolean that_present_nr = true && that.isSetNr();
      if (this_present_nr || that_present_nr) {
        if (!(this_present_nr && that_present_nr))
          return false;
        if (!this.nr.equals(that.nr))
          return false;
      }

      boolean this_present_user_id = true && this.isSetUser_id();
      boolean that_present_user_id = true && that.isSetUser_id();
      if (this_present_user_id || that_present_user_id) {
        if (!(this_present_user_id && that_present_user_id))
          return false;
        if (!this.user_id.equals(that.user_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(selectSuibi_hf_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      selectSuibi_hf_args typedOther = (selectSuibi_hf_args)other;

      lastComparison = Boolean.valueOf(isSetSuibi_id()).compareTo(typedOther.isSetSuibi_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuibi_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suibi_id, typedOther.suibi_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNr()).compareTo(typedOther.isSetNr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nr, typedOther.nr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSuibi_hf_args(");
      boolean first = true;

      sb.append("suibi_id:");
      if (this.suibi_id == null) {
        sb.append("null");
      } else {
        sb.append(this.suibi_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nr:");
      if (this.nr == null) {
        sb.append("null");
      } else {
        sb.append(this.nr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_id:");
      if (this.user_id == null) {
        sb.append("null");
      } else {
        sb.append(this.user_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSuibi_hf_argsStandardSchemeFactory implements SchemeFactory {
      public selectSuibi_hf_argsStandardScheme getScheme() {
        return new selectSuibi_hf_argsStandardScheme();
      }
    }

    private static class selectSuibi_hf_argsStandardScheme extends StandardScheme<selectSuibi_hf_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSuibi_hf_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SUIBI_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.suibi_id = iprot.readString();
                struct.setSuibi_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nr = iprot.readString();
                struct.setNrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user_id = iprot.readString();
                struct.setUser_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSuibi_hf_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.suibi_id != null) {
          oprot.writeFieldBegin(SUIBI_ID_FIELD_DESC);
          oprot.writeString(struct.suibi_id);
          oprot.writeFieldEnd();
        }
        if (struct.nr != null) {
          oprot.writeFieldBegin(NR_FIELD_DESC);
          oprot.writeString(struct.nr);
          oprot.writeFieldEnd();
        }
        if (struct.user_id != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.user_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSuibi_hf_argsTupleSchemeFactory implements SchemeFactory {
      public selectSuibi_hf_argsTupleScheme getScheme() {
        return new selectSuibi_hf_argsTupleScheme();
      }
    }

    private static class selectSuibi_hf_argsTupleScheme extends TupleScheme<selectSuibi_hf_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSuibi_hf_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuibi_id()) {
          optionals.set(0);
        }
        if (struct.isSetNr()) {
          optionals.set(1);
        }
        if (struct.isSetUser_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuibi_id()) {
          oprot.writeString(struct.suibi_id);
        }
        if (struct.isSetNr()) {
          oprot.writeString(struct.nr);
        }
        if (struct.isSetUser_id()) {
          oprot.writeString(struct.user_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSuibi_hf_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.suibi_id = iprot.readString();
          struct.setSuibi_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nr = iprot.readString();
          struct.setNrIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_id = iprot.readString();
          struct.setUser_idIsSet(true);
        }
      }
    }

  }

  public static class selectSuibi_hf_result implements org.apache.thrift.TBase<selectSuibi_hf_result, selectSuibi_hf_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectSuibi_hf_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new selectSuibi_hf_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new selectSuibi_hf_resultTupleSchemeFactory());
    }

    public Dm_Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectSuibi_hf_result.class, metaDataMap);
    }

    public selectSuibi_hf_result() {
    }

    public selectSuibi_hf_result(
      Dm_Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectSuibi_hf_result(selectSuibi_hf_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_Result(other.success);
      }
    }

    public selectSuibi_hf_result deepCopy() {
      return new selectSuibi_hf_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_Result getSuccess() {
      return this.success;
    }

    public selectSuibi_hf_result setSuccess(Dm_Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectSuibi_hf_result)
        return this.equals((selectSuibi_hf_result)that);
      return false;
    }

    public boolean equals(selectSuibi_hf_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(selectSuibi_hf_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      selectSuibi_hf_result typedOther = (selectSuibi_hf_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("selectSuibi_hf_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectSuibi_hf_resultStandardSchemeFactory implements SchemeFactory {
      public selectSuibi_hf_resultStandardScheme getScheme() {
        return new selectSuibi_hf_resultStandardScheme();
      }
    }

    private static class selectSuibi_hf_resultStandardScheme extends StandardScheme<selectSuibi_hf_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectSuibi_hf_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectSuibi_hf_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectSuibi_hf_resultTupleSchemeFactory implements SchemeFactory {
      public selectSuibi_hf_resultTupleScheme getScheme() {
        return new selectSuibi_hf_resultTupleScheme();
      }
    }

    private static class selectSuibi_hf_resultTupleScheme extends TupleScheme<selectSuibi_hf_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, selectSuibi_hf_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, selectSuibi_hf_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteSuibi_args implements org.apache.thrift.TBase<deleteSuibi_args, deleteSuibi_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSuibi_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSuibi_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSuibi_argsTupleSchemeFactory());
    }

    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSuibi_args.class, metaDataMap);
    }

    public deleteSuibi_args() {
    }

    public deleteSuibi_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSuibi_args(deleteSuibi_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public deleteSuibi_args deepCopy() {
      return new deleteSuibi_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public deleteSuibi_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSuibi_args)
        return this.equals((deleteSuibi_args)that);
      return false;
    }

    public boolean equals(deleteSuibi_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteSuibi_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteSuibi_args typedOther = (deleteSuibi_args)other;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSuibi_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSuibi_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSuibi_argsStandardScheme getScheme() {
        return new deleteSuibi_argsStandardScheme();
      }
    }

    private static class deleteSuibi_argsStandardScheme extends StandardScheme<deleteSuibi_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSuibi_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSuibi_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSuibi_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSuibi_argsTupleScheme getScheme() {
        return new deleteSuibi_argsTupleScheme();
      }
    }

    private static class deleteSuibi_argsTupleScheme extends TupleScheme<deleteSuibi_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSuibi_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSuibi_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class deleteSuibi_result implements org.apache.thrift.TBase<deleteSuibi_result, deleteSuibi_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSuibi_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSuibi_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSuibi_resultTupleSchemeFactory());
    }

    public Dm_Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSuibi_result.class, metaDataMap);
    }

    public deleteSuibi_result() {
    }

    public deleteSuibi_result(
      Dm_Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSuibi_result(deleteSuibi_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_Result(other.success);
      }
    }

    public deleteSuibi_result deepCopy() {
      return new deleteSuibi_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_Result getSuccess() {
      return this.success;
    }

    public deleteSuibi_result setSuccess(Dm_Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSuibi_result)
        return this.equals((deleteSuibi_result)that);
      return false;
    }

    public boolean equals(deleteSuibi_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteSuibi_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteSuibi_result typedOther = (deleteSuibi_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSuibi_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSuibi_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSuibi_resultStandardScheme getScheme() {
        return new deleteSuibi_resultStandardScheme();
      }
    }

    private static class deleteSuibi_resultStandardScheme extends StandardScheme<deleteSuibi_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSuibi_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSuibi_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSuibi_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSuibi_resultTupleScheme getScheme() {
        return new deleteSuibi_resultTupleScheme();
      }
    }

    private static class deleteSuibi_resultTupleScheme extends TupleScheme<deleteSuibi_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSuibi_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSuibi_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class viewTuce_args implements org.apache.thrift.TBase<viewTuce_args, viewTuce_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("viewTuce_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new viewTuce_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new viewTuce_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      ID((short)2, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(viewTuce_args.class, metaDataMap);
    }

    public viewTuce_args() {
    }

    public viewTuce_args(
      String validstring,
      String id)
    {
      this();
      this.validstring = validstring;
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public viewTuce_args(viewTuce_args other) {
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public viewTuce_args deepCopy() {
      return new viewTuce_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.id = null;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public viewTuce_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getId() {
      return this.id;
    }

    public viewTuce_args setId(String id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case ID:
        return getId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof viewTuce_args)
        return this.equals((viewTuce_args)that);
      return false;
    }

    public boolean equals(viewTuce_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(viewTuce_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      viewTuce_args typedOther = (viewTuce_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("viewTuce_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class viewTuce_argsStandardSchemeFactory implements SchemeFactory {
      public viewTuce_argsStandardScheme getScheme() {
        return new viewTuce_argsStandardScheme();
      }
    }

    private static class viewTuce_argsStandardScheme extends StandardScheme<viewTuce_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, viewTuce_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.id = iprot.readString();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, viewTuce_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class viewTuce_argsTupleSchemeFactory implements SchemeFactory {
      public viewTuce_argsTupleScheme getScheme() {
        return new viewTuce_argsTupleScheme();
      }
    }

    private static class viewTuce_argsTupleScheme extends TupleScheme<viewTuce_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, viewTuce_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetId()) {
          oprot.writeString(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, viewTuce_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = iprot.readString();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class viewTuce_result implements org.apache.thrift.TBase<viewTuce_result, viewTuce_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("viewTuce_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new viewTuce_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new viewTuce_resultTupleSchemeFactory());
    }

    public Dm_App_TuceOne success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_App_TuceOne.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(viewTuce_result.class, metaDataMap);
    }

    public viewTuce_result() {
    }

    public viewTuce_result(
      Dm_App_TuceOne success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public viewTuce_result(viewTuce_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_App_TuceOne(other.success);
      }
    }

    public viewTuce_result deepCopy() {
      return new viewTuce_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_App_TuceOne getSuccess() {
      return this.success;
    }

    public viewTuce_result setSuccess(Dm_App_TuceOne success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_App_TuceOne)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof viewTuce_result)
        return this.equals((viewTuce_result)that);
      return false;
    }

    public boolean equals(viewTuce_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(viewTuce_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      viewTuce_result typedOther = (viewTuce_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("viewTuce_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class viewTuce_resultStandardSchemeFactory implements SchemeFactory {
      public viewTuce_resultStandardScheme getScheme() {
        return new viewTuce_resultStandardScheme();
      }
    }

    private static class viewTuce_resultStandardScheme extends StandardScheme<viewTuce_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, viewTuce_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_App_TuceOne();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, viewTuce_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class viewTuce_resultTupleSchemeFactory implements SchemeFactory {
      public viewTuce_resultTupleScheme getScheme() {
        return new viewTuce_resultTupleScheme();
      }
    }

    private static class viewTuce_resultTupleScheme extends TupleScheme<viewTuce_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, viewTuce_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, viewTuce_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_App_TuceOne();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchTuceListByuid_args implements org.apache.thrift.TBase<searchTuceListByuid_args, searchTuceListByuid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchTuceListByuid_args");

    private static final org.apache.thrift.protocol.TField VALIDSTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("validstring", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ISFABU_FIELD_DESC = new org.apache.thrift.protocol.TField("isfabu", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchTuceListByuid_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchTuceListByuid_argsTupleSchemeFactory());
    }

    public String validstring; // required
    public String uid; // required
    public String title; // required
    public String isfabu; // required
    public int page; // required
    public int pageSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VALIDSTRING((short)1, "validstring"),
      UID((short)2, "uid"),
      TITLE((short)3, "title"),
      ISFABU((short)4, "isfabu"),
      PAGE((short)5, "page"),
      PAGE_SIZE((short)6, "pageSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VALIDSTRING
            return VALIDSTRING;
          case 2: // UID
            return UID;
          case 3: // TITLE
            return TITLE;
          case 4: // ISFABU
            return ISFABU;
          case 5: // PAGE
            return PAGE;
          case 6: // PAGE_SIZE
            return PAGE_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGE_ISSET_ID = 0;
    private static final int __PAGESIZE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VALIDSTRING, new org.apache.thrift.meta_data.FieldMetaData("validstring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ISFABU, new org.apache.thrift.meta_data.FieldMetaData("isfabu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchTuceListByuid_args.class, metaDataMap);
    }

    public searchTuceListByuid_args() {
    }

    public searchTuceListByuid_args(
      String validstring,
      String uid,
      String title,
      String isfabu,
      int page,
      int pageSize)
    {
      this();
      this.validstring = validstring;
      this.uid = uid;
      this.title = title;
      this.isfabu = isfabu;
      this.page = page;
      setPageIsSet(true);
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchTuceListByuid_args(searchTuceListByuid_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetValidstring()) {
        this.validstring = other.validstring;
      }
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetTitle()) {
        this.title = other.title;
      }
      if (other.isSetIsfabu()) {
        this.isfabu = other.isfabu;
      }
      this.page = other.page;
      this.pageSize = other.pageSize;
    }

    public searchTuceListByuid_args deepCopy() {
      return new searchTuceListByuid_args(this);
    }

    @Override
    public void clear() {
      this.validstring = null;
      this.uid = null;
      this.title = null;
      this.isfabu = null;
      setPageIsSet(false);
      this.page = 0;
      setPageSizeIsSet(false);
      this.pageSize = 0;
    }

    public String getValidstring() {
      return this.validstring;
    }

    public searchTuceListByuid_args setValidstring(String validstring) {
      this.validstring = validstring;
      return this;
    }

    public void unsetValidstring() {
      this.validstring = null;
    }

    /** Returns true if field validstring is set (has been assigned a value) and false otherwise */
    public boolean isSetValidstring() {
      return this.validstring != null;
    }

    public void setValidstringIsSet(boolean value) {
      if (!value) {
        this.validstring = null;
      }
    }

    public String getUid() {
      return this.uid;
    }

    public searchTuceListByuid_args setUid(String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public String getTitle() {
      return this.title;
    }

    public searchTuceListByuid_args setTitle(String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    public String getIsfabu() {
      return this.isfabu;
    }

    public searchTuceListByuid_args setIsfabu(String isfabu) {
      this.isfabu = isfabu;
      return this;
    }

    public void unsetIsfabu() {
      this.isfabu = null;
    }

    /** Returns true if field isfabu is set (has been assigned a value) and false otherwise */
    public boolean isSetIsfabu() {
      return this.isfabu != null;
    }

    public void setIsfabuIsSet(boolean value) {
      if (!value) {
        this.isfabu = null;
      }
    }

    public int getPage() {
      return this.page;
    }

    public searchTuceListByuid_args setPage(int page) {
      this.page = page;
      setPageIsSet(true);
      return this;
    }

    public void unsetPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    /** Returns true if field page is set (has been assigned a value) and false otherwise */
    public boolean isSetPage() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
    }

    public void setPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
    }

    public int getPageSize() {
      return this.pageSize;
    }

    public searchTuceListByuid_args setPageSize(int pageSize) {
      this.pageSize = pageSize;
      setPageSizeIsSet(true);
      return this;
    }

    public void unsetPageSize() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetPageSize() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
    }

    public void setPageSizeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VALIDSTRING:
        if (value == null) {
          unsetValidstring();
        } else {
          setValidstring((String)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((String)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((String)value);
        }
        break;

      case ISFABU:
        if (value == null) {
          unsetIsfabu();
        } else {
          setIsfabu((String)value);
        }
        break;

      case PAGE:
        if (value == null) {
          unsetPage();
        } else {
          setPage((Integer)value);
        }
        break;

      case PAGE_SIZE:
        if (value == null) {
          unsetPageSize();
        } else {
          setPageSize((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VALIDSTRING:
        return getValidstring();

      case UID:
        return getUid();

      case TITLE:
        return getTitle();

      case ISFABU:
        return getIsfabu();

      case PAGE:
        return Integer.valueOf(getPage());

      case PAGE_SIZE:
        return Integer.valueOf(getPageSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VALIDSTRING:
        return isSetValidstring();
      case UID:
        return isSetUid();
      case TITLE:
        return isSetTitle();
      case ISFABU:
        return isSetIsfabu();
      case PAGE:
        return isSetPage();
      case PAGE_SIZE:
        return isSetPageSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchTuceListByuid_args)
        return this.equals((searchTuceListByuid_args)that);
      return false;
    }

    public boolean equals(searchTuceListByuid_args that) {
      if (that == null)
        return false;

      boolean this_present_validstring = true && this.isSetValidstring();
      boolean that_present_validstring = true && that.isSetValidstring();
      if (this_present_validstring || that_present_validstring) {
        if (!(this_present_validstring && that_present_validstring))
          return false;
        if (!this.validstring.equals(that.validstring))
          return false;
      }

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      boolean this_present_isfabu = true && this.isSetIsfabu();
      boolean that_present_isfabu = true && that.isSetIsfabu();
      if (this_present_isfabu || that_present_isfabu) {
        if (!(this_present_isfabu && that_present_isfabu))
          return false;
        if (!this.isfabu.equals(that.isfabu))
          return false;
      }

      boolean this_present_page = true;
      boolean that_present_page = true;
      if (this_present_page || that_present_page) {
        if (!(this_present_page && that_present_page))
          return false;
        if (this.page != that.page)
          return false;
      }

      boolean this_present_pageSize = true;
      boolean that_present_pageSize = true;
      if (this_present_pageSize || that_present_pageSize) {
        if (!(this_present_pageSize && that_present_pageSize))
          return false;
        if (this.pageSize != that.pageSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchTuceListByuid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchTuceListByuid_args typedOther = (searchTuceListByuid_args)other;

      lastComparison = Boolean.valueOf(isSetValidstring()).compareTo(typedOther.isSetValidstring());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValidstring()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validstring, typedOther.validstring);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsfabu()).compareTo(typedOther.isSetIsfabu());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsfabu()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isfabu, typedOther.isfabu);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchTuceListByuid_args(");
      boolean first = true;

      sb.append("validstring:");
      if (this.validstring == null) {
        sb.append("null");
      } else {
        sb.append(this.validstring);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isfabu:");
      if (this.isfabu == null) {
        sb.append("null");
      } else {
        sb.append(this.isfabu);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchTuceListByuid_argsStandardSchemeFactory implements SchemeFactory {
      public searchTuceListByuid_argsStandardScheme getScheme() {
        return new searchTuceListByuid_argsStandardScheme();
      }
    }

    private static class searchTuceListByuid_argsStandardScheme extends StandardScheme<searchTuceListByuid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchTuceListByuid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VALIDSTRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.validstring = iprot.readString();
                struct.setValidstringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ISFABU
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.isfabu = iprot.readString();
                struct.setIsfabuIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.page = iprot.readI32();
                struct.setPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // PAGE_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageSize = iprot.readI32();
                struct.setPageSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchTuceListByuid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.validstring != null) {
          oprot.writeFieldBegin(VALIDSTRING_FIELD_DESC);
          oprot.writeString(struct.validstring);
          oprot.writeFieldEnd();
        }
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        if (struct.isfabu != null) {
          oprot.writeFieldBegin(ISFABU_FIELD_DESC);
          oprot.writeString(struct.isfabu);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchTuceListByuid_argsTupleSchemeFactory implements SchemeFactory {
      public searchTuceListByuid_argsTupleScheme getScheme() {
        return new searchTuceListByuid_argsTupleScheme();
      }
    }

    private static class searchTuceListByuid_argsTupleScheme extends TupleScheme<searchTuceListByuid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchTuceListByuid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValidstring()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetTitle()) {
          optionals.set(2);
        }
        if (struct.isSetIsfabu()) {
          optionals.set(3);
        }
        if (struct.isSetPage()) {
          optionals.set(4);
        }
        if (struct.isSetPageSize()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetValidstring()) {
          oprot.writeString(struct.validstring);
        }
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
        if (struct.isSetIsfabu()) {
          oprot.writeString(struct.isfabu);
        }
        if (struct.isSetPage()) {
          oprot.writeI32(struct.page);
        }
        if (struct.isSetPageSize()) {
          oprot.writeI32(struct.pageSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchTuceListByuid_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.validstring = iprot.readString();
          struct.setValidstringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
        if (incoming.get(3)) {
          struct.isfabu = iprot.readString();
          struct.setIsfabuIsSet(true);
        }
        if (incoming.get(4)) {
          struct.page = iprot.readI32();
          struct.setPageIsSet(true);
        }
        if (incoming.get(5)) {
          struct.pageSize = iprot.readI32();
          struct.setPageSizeIsSet(true);
        }
      }
    }

  }

  public static class searchTuceListByuid_result implements org.apache.thrift.TBase<searchTuceListByuid_result, searchTuceListByuid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchTuceListByuid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchTuceListByuid_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchTuceListByuid_resultTupleSchemeFactory());
    }

    public Dm_App_TuceList success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dm_App_TuceList.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchTuceListByuid_result.class, metaDataMap);
    }

    public searchTuceListByuid_result() {
    }

    public searchTuceListByuid_result(
      Dm_App_TuceList success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchTuceListByuid_result(searchTuceListByuid_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dm_App_TuceList(other.success);
      }
    }

    public searchTuceListByuid_result deepCopy() {
      return new searchTuceListByuid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Dm_App_TuceList getSuccess() {
      return this.success;
    }

    public searchTuceListByuid_result setSuccess(Dm_App_TuceList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dm_App_TuceList)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchTuceListByuid_result)
        return this.equals((searchTuceListByuid_result)that);
      return false;
    }

    public boolean equals(searchTuceListByuid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(searchTuceListByuid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      searchTuceListByuid_result typedOther = (searchTuceListByuid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchTuceListByuid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchTuceListByuid_resultStandardSchemeFactory implements SchemeFactory {
      public searchTuceListByuid_resultStandardScheme getScheme() {
        return new searchTuceListByuid_resultStandardScheme();
      }
    }

    private static class searchTuceListByuid_resultStandardScheme extends StandardScheme<searchTuceListByuid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchTuceListByuid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dm_App_TuceList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchTuceListByuid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchTuceListByuid_resultTupleSchemeFactory implements SchemeFactory {
      public searchTuceListByuid_resultTupleScheme getScheme() {
        return new searchTuceListByuid_resultTupleScheme();
      }
    }

    private static class searchTuceListByuid_resultTupleScheme extends TupleScheme<searchTuceListByuid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchTuceListByuid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchTuceListByuid_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dm_App_TuceList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
