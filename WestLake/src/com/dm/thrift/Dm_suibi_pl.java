/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Dm_suibi_pl implements org.apache.thrift.TBase<Dm_suibi_pl, Dm_suibi_pl._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dm_suibi_pl");

  private static final org.apache.thrift.protocol.TField SUIBI_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("suibi_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NR_FIELD_DESC = new org.apache.thrift.protocol.TField("nr", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PLNR_FIELD_DESC = new org.apache.thrift.protocol.TField("plnr", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_TX_FIELD_DESC = new org.apache.thrift.protocol.TField("user_tx", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FATHER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("father_id", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new Dm_suibi_plStandardSchemeFactory());
    schemes.put(TupleScheme.class, new Dm_suibi_plTupleSchemeFactory());
  }

  public String suibi_id; // required
  public String user_id; // required
  public String nr; // required
  public String plnr; // required
  public String user_tx; // required
  public String user_name; // required
  public String father_id; // required
  public String id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUIBI_ID((short)1, "suibi_id"),
    USER_ID((short)2, "user_id"),
    NR((short)3, "nr"),
    PLNR((short)4, "plnr"),
    USER_TX((short)5, "user_tx"),
    USER_NAME((short)6, "user_name"),
    FATHER_ID((short)7, "father_id"),
    ID((short)8, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUIBI_ID
          return SUIBI_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // NR
          return NR;
        case 4: // PLNR
          return PLNR;
        case 5: // USER_TX
          return USER_TX;
        case 6: // USER_NAME
          return USER_NAME;
        case 7: // FATHER_ID
          return FATHER_ID;
        case 8: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUIBI_ID, new org.apache.thrift.meta_data.FieldMetaData("suibi_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NR, new org.apache.thrift.meta_data.FieldMetaData("nr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLNR, new org.apache.thrift.meta_data.FieldMetaData("plnr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_TX, new org.apache.thrift.meta_data.FieldMetaData("user_tx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FATHER_ID, new org.apache.thrift.meta_data.FieldMetaData("father_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dm_suibi_pl.class, metaDataMap);
  }

  public Dm_suibi_pl() {
  }

  public Dm_suibi_pl(
    String suibi_id,
    String user_id,
    String nr,
    String plnr,
    String user_tx,
    String user_name,
    String father_id,
    String id)
  {
    this();
    this.suibi_id = suibi_id;
    this.user_id = user_id;
    this.nr = nr;
    this.plnr = plnr;
    this.user_tx = user_tx;
    this.user_name = user_name;
    this.father_id = father_id;
    this.id = id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dm_suibi_pl(Dm_suibi_pl other) {
    if (other.isSetSuibi_id()) {
      this.suibi_id = other.suibi_id;
    }
    if (other.isSetUser_id()) {
      this.user_id = other.user_id;
    }
    if (other.isSetNr()) {
      this.nr = other.nr;
    }
    if (other.isSetPlnr()) {
      this.plnr = other.plnr;
    }
    if (other.isSetUser_tx()) {
      this.user_tx = other.user_tx;
    }
    if (other.isSetUser_name()) {
      this.user_name = other.user_name;
    }
    if (other.isSetFather_id()) {
      this.father_id = other.father_id;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
  }

  public Dm_suibi_pl deepCopy() {
    return new Dm_suibi_pl(this);
  }

  @Override
  public void clear() {
    this.suibi_id = null;
    this.user_id = null;
    this.nr = null;
    this.plnr = null;
    this.user_tx = null;
    this.user_name = null;
    this.father_id = null;
    this.id = null;
  }

  public String getSuibi_id() {
    return this.suibi_id;
  }

  public Dm_suibi_pl setSuibi_id(String suibi_id) {
    this.suibi_id = suibi_id;
    return this;
  }

  public void unsetSuibi_id() {
    this.suibi_id = null;
  }

  /** Returns true if field suibi_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSuibi_id() {
    return this.suibi_id != null;
  }

  public void setSuibi_idIsSet(boolean value) {
    if (!value) {
      this.suibi_id = null;
    }
  }

  public String getUser_id() {
    return this.user_id;
  }

  public Dm_suibi_pl setUser_id(String user_id) {
    this.user_id = user_id;
    return this;
  }

  public void unsetUser_id() {
    this.user_id = null;
  }

  /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_id() {
    return this.user_id != null;
  }

  public void setUser_idIsSet(boolean value) {
    if (!value) {
      this.user_id = null;
    }
  }

  public String getNr() {
    return this.nr;
  }

  public Dm_suibi_pl setNr(String nr) {
    this.nr = nr;
    return this;
  }

  public void unsetNr() {
    this.nr = null;
  }

  /** Returns true if field nr is set (has been assigned a value) and false otherwise */
  public boolean isSetNr() {
    return this.nr != null;
  }

  public void setNrIsSet(boolean value) {
    if (!value) {
      this.nr = null;
    }
  }

  public String getPlnr() {
    return this.plnr;
  }

  public Dm_suibi_pl setPlnr(String plnr) {
    this.plnr = plnr;
    return this;
  }

  public void unsetPlnr() {
    this.plnr = null;
  }

  /** Returns true if field plnr is set (has been assigned a value) and false otherwise */
  public boolean isSetPlnr() {
    return this.plnr != null;
  }

  public void setPlnrIsSet(boolean value) {
    if (!value) {
      this.plnr = null;
    }
  }

  public String getUser_tx() {
    return this.user_tx;
  }

  public Dm_suibi_pl setUser_tx(String user_tx) {
    this.user_tx = user_tx;
    return this;
  }

  public void unsetUser_tx() {
    this.user_tx = null;
  }

  /** Returns true if field user_tx is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_tx() {
    return this.user_tx != null;
  }

  public void setUser_txIsSet(boolean value) {
    if (!value) {
      this.user_tx = null;
    }
  }

  public String getUser_name() {
    return this.user_name;
  }

  public Dm_suibi_pl setUser_name(String user_name) {
    this.user_name = user_name;
    return this;
  }

  public void unsetUser_name() {
    this.user_name = null;
  }

  /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_name() {
    return this.user_name != null;
  }

  public void setUser_nameIsSet(boolean value) {
    if (!value) {
      this.user_name = null;
    }
  }

  public String getFather_id() {
    return this.father_id;
  }

  public Dm_suibi_pl setFather_id(String father_id) {
    this.father_id = father_id;
    return this;
  }

  public void unsetFather_id() {
    this.father_id = null;
  }

  /** Returns true if field father_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFather_id() {
    return this.father_id != null;
  }

  public void setFather_idIsSet(boolean value) {
    if (!value) {
      this.father_id = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public Dm_suibi_pl setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUIBI_ID:
      if (value == null) {
        unsetSuibi_id();
      } else {
        setSuibi_id((String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUser_id();
      } else {
        setUser_id((String)value);
      }
      break;

    case NR:
      if (value == null) {
        unsetNr();
      } else {
        setNr((String)value);
      }
      break;

    case PLNR:
      if (value == null) {
        unsetPlnr();
      } else {
        setPlnr((String)value);
      }
      break;

    case USER_TX:
      if (value == null) {
        unsetUser_tx();
      } else {
        setUser_tx((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUser_name();
      } else {
        setUser_name((String)value);
      }
      break;

    case FATHER_ID:
      if (value == null) {
        unsetFather_id();
      } else {
        setFather_id((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUIBI_ID:
      return getSuibi_id();

    case USER_ID:
      return getUser_id();

    case NR:
      return getNr();

    case PLNR:
      return getPlnr();

    case USER_TX:
      return getUser_tx();

    case USER_NAME:
      return getUser_name();

    case FATHER_ID:
      return getFather_id();

    case ID:
      return getId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUIBI_ID:
      return isSetSuibi_id();
    case USER_ID:
      return isSetUser_id();
    case NR:
      return isSetNr();
    case PLNR:
      return isSetPlnr();
    case USER_TX:
      return isSetUser_tx();
    case USER_NAME:
      return isSetUser_name();
    case FATHER_ID:
      return isSetFather_id();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dm_suibi_pl)
      return this.equals((Dm_suibi_pl)that);
    return false;
  }

  public boolean equals(Dm_suibi_pl that) {
    if (that == null)
      return false;

    boolean this_present_suibi_id = true && this.isSetSuibi_id();
    boolean that_present_suibi_id = true && that.isSetSuibi_id();
    if (this_present_suibi_id || that_present_suibi_id) {
      if (!(this_present_suibi_id && that_present_suibi_id))
        return false;
      if (!this.suibi_id.equals(that.suibi_id))
        return false;
    }

    boolean this_present_user_id = true && this.isSetUser_id();
    boolean that_present_user_id = true && that.isSetUser_id();
    if (this_present_user_id || that_present_user_id) {
      if (!(this_present_user_id && that_present_user_id))
        return false;
      if (!this.user_id.equals(that.user_id))
        return false;
    }

    boolean this_present_nr = true && this.isSetNr();
    boolean that_present_nr = true && that.isSetNr();
    if (this_present_nr || that_present_nr) {
      if (!(this_present_nr && that_present_nr))
        return false;
      if (!this.nr.equals(that.nr))
        return false;
    }

    boolean this_present_plnr = true && this.isSetPlnr();
    boolean that_present_plnr = true && that.isSetPlnr();
    if (this_present_plnr || that_present_plnr) {
      if (!(this_present_plnr && that_present_plnr))
        return false;
      if (!this.plnr.equals(that.plnr))
        return false;
    }

    boolean this_present_user_tx = true && this.isSetUser_tx();
    boolean that_present_user_tx = true && that.isSetUser_tx();
    if (this_present_user_tx || that_present_user_tx) {
      if (!(this_present_user_tx && that_present_user_tx))
        return false;
      if (!this.user_tx.equals(that.user_tx))
        return false;
    }

    boolean this_present_user_name = true && this.isSetUser_name();
    boolean that_present_user_name = true && that.isSetUser_name();
    if (this_present_user_name || that_present_user_name) {
      if (!(this_present_user_name && that_present_user_name))
        return false;
      if (!this.user_name.equals(that.user_name))
        return false;
    }

    boolean this_present_father_id = true && this.isSetFather_id();
    boolean that_present_father_id = true && that.isSetFather_id();
    if (this_present_father_id || that_present_father_id) {
      if (!(this_present_father_id && that_present_father_id))
        return false;
      if (!this.father_id.equals(that.father_id))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Dm_suibi_pl other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Dm_suibi_pl typedOther = (Dm_suibi_pl)other;

    lastComparison = Boolean.valueOf(isSetSuibi_id()).compareTo(typedOther.isSetSuibi_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuibi_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suibi_id, typedOther.suibi_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_id()).compareTo(typedOther.isSetUser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, typedOther.user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNr()).compareTo(typedOther.isSetNr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nr, typedOther.nr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlnr()).compareTo(typedOther.isSetPlnr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlnr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plnr, typedOther.plnr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_tx()).compareTo(typedOther.isSetUser_tx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_tx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_tx, typedOther.user_tx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFather_id()).compareTo(typedOther.isSetFather_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFather_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.father_id, typedOther.father_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dm_suibi_pl(");
    boolean first = true;

    sb.append("suibi_id:");
    if (this.suibi_id == null) {
      sb.append("null");
    } else {
      sb.append(this.suibi_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_id:");
    if (this.user_id == null) {
      sb.append("null");
    } else {
      sb.append(this.user_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nr:");
    if (this.nr == null) {
      sb.append("null");
    } else {
      sb.append(this.nr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plnr:");
    if (this.plnr == null) {
      sb.append("null");
    } else {
      sb.append(this.plnr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_tx:");
    if (this.user_tx == null) {
      sb.append("null");
    } else {
      sb.append(this.user_tx);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_name:");
    if (this.user_name == null) {
      sb.append("null");
    } else {
      sb.append(this.user_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("father_id:");
    if (this.father_id == null) {
      sb.append("null");
    } else {
      sb.append(this.father_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Dm_suibi_plStandardSchemeFactory implements SchemeFactory {
    public Dm_suibi_plStandardScheme getScheme() {
      return new Dm_suibi_plStandardScheme();
    }
  }

  private static class Dm_suibi_plStandardScheme extends StandardScheme<Dm_suibi_pl> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dm_suibi_pl struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUIBI_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.suibi_id = iprot.readString();
              struct.setSuibi_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_id = iprot.readString();
              struct.setUser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nr = iprot.readString();
              struct.setNrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLNR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plnr = iprot.readString();
              struct.setPlnrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_TX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_tx = iprot.readString();
              struct.setUser_txIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_name = iprot.readString();
              struct.setUser_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FATHER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.father_id = iprot.readString();
              struct.setFather_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dm_suibi_pl struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.suibi_id != null) {
        oprot.writeFieldBegin(SUIBI_ID_FIELD_DESC);
        oprot.writeString(struct.suibi_id);
        oprot.writeFieldEnd();
      }
      if (struct.user_id != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.user_id);
        oprot.writeFieldEnd();
      }
      if (struct.nr != null) {
        oprot.writeFieldBegin(NR_FIELD_DESC);
        oprot.writeString(struct.nr);
        oprot.writeFieldEnd();
      }
      if (struct.plnr != null) {
        oprot.writeFieldBegin(PLNR_FIELD_DESC);
        oprot.writeString(struct.plnr);
        oprot.writeFieldEnd();
      }
      if (struct.user_tx != null) {
        oprot.writeFieldBegin(USER_TX_FIELD_DESC);
        oprot.writeString(struct.user_tx);
        oprot.writeFieldEnd();
      }
      if (struct.user_name != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.user_name);
        oprot.writeFieldEnd();
      }
      if (struct.father_id != null) {
        oprot.writeFieldBegin(FATHER_ID_FIELD_DESC);
        oprot.writeString(struct.father_id);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Dm_suibi_plTupleSchemeFactory implements SchemeFactory {
    public Dm_suibi_plTupleScheme getScheme() {
      return new Dm_suibi_plTupleScheme();
    }
  }

  private static class Dm_suibi_plTupleScheme extends TupleScheme<Dm_suibi_pl> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dm_suibi_pl struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSuibi_id()) {
        optionals.set(0);
      }
      if (struct.isSetUser_id()) {
        optionals.set(1);
      }
      if (struct.isSetNr()) {
        optionals.set(2);
      }
      if (struct.isSetPlnr()) {
        optionals.set(3);
      }
      if (struct.isSetUser_tx()) {
        optionals.set(4);
      }
      if (struct.isSetUser_name()) {
        optionals.set(5);
      }
      if (struct.isSetFather_id()) {
        optionals.set(6);
      }
      if (struct.isSetId()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSuibi_id()) {
        oprot.writeString(struct.suibi_id);
      }
      if (struct.isSetUser_id()) {
        oprot.writeString(struct.user_id);
      }
      if (struct.isSetNr()) {
        oprot.writeString(struct.nr);
      }
      if (struct.isSetPlnr()) {
        oprot.writeString(struct.plnr);
      }
      if (struct.isSetUser_tx()) {
        oprot.writeString(struct.user_tx);
      }
      if (struct.isSetUser_name()) {
        oprot.writeString(struct.user_name);
      }
      if (struct.isSetFather_id()) {
        oprot.writeString(struct.father_id);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dm_suibi_pl struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.suibi_id = iprot.readString();
        struct.setSuibi_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user_id = iprot.readString();
        struct.setUser_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nr = iprot.readString();
        struct.setNrIsSet(true);
      }
      if (incoming.get(3)) {
        struct.plnr = iprot.readString();
        struct.setPlnrIsSet(true);
      }
      if (incoming.get(4)) {
        struct.user_tx = iprot.readString();
        struct.setUser_txIsSet(true);
      }
      if (incoming.get(5)) {
        struct.user_name = iprot.readString();
        struct.setUser_nameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.father_id = iprot.readString();
        struct.setFather_idIsSet(true);
      }
      if (incoming.get(7)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
    }
  }

}

