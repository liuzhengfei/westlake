/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dm.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Pageparm implements org.apache.thrift.TBase<Pageparm, Pageparm._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Pageparm");

  private static final org.apache.thrift.protocol.TField NOWPAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("nowpage", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PAGESIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pagesize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTALPAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalpage", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PageparmStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PageparmTupleSchemeFactory());
  }

  public int nowpage; // required
  public int pagesize; // required
  public String totalpage; // required
  public String total; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOWPAGE((short)1, "nowpage"),
    PAGESIZE((short)2, "pagesize"),
    TOTALPAGE((short)3, "totalpage"),
    TOTAL((short)4, "total");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOWPAGE
          return NOWPAGE;
        case 2: // PAGESIZE
          return PAGESIZE;
        case 3: // TOTALPAGE
          return TOTALPAGE;
        case 4: // TOTAL
          return TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NOWPAGE_ISSET_ID = 0;
  private static final int __PAGESIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOWPAGE, new org.apache.thrift.meta_data.FieldMetaData("nowpage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGESIZE, new org.apache.thrift.meta_data.FieldMetaData("pagesize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTALPAGE, new org.apache.thrift.meta_data.FieldMetaData("totalpage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Pageparm.class, metaDataMap);
  }

  public Pageparm() {
  }

  public Pageparm(
    int nowpage,
    int pagesize,
    String totalpage,
    String total)
  {
    this();
    this.nowpage = nowpage;
    setNowpageIsSet(true);
    this.pagesize = pagesize;
    setPagesizeIsSet(true);
    this.totalpage = totalpage;
    this.total = total;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Pageparm(Pageparm other) {
    __isset_bitfield = other.__isset_bitfield;
    this.nowpage = other.nowpage;
    this.pagesize = other.pagesize;
    if (other.isSetTotalpage()) {
      this.totalpage = other.totalpage;
    }
    if (other.isSetTotal()) {
      this.total = other.total;
    }
  }

  public Pageparm deepCopy() {
    return new Pageparm(this);
  }

  @Override
  public void clear() {
    setNowpageIsSet(false);
    this.nowpage = 0;
    setPagesizeIsSet(false);
    this.pagesize = 0;
    this.totalpage = null;
    this.total = null;
  }

  public int getNowpage() {
    return this.nowpage;
  }

  public Pageparm setNowpage(int nowpage) {
    this.nowpage = nowpage;
    setNowpageIsSet(true);
    return this;
  }

  public void unsetNowpage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOWPAGE_ISSET_ID);
  }

  /** Returns true if field nowpage is set (has been assigned a value) and false otherwise */
  public boolean isSetNowpage() {
    return EncodingUtils.testBit(__isset_bitfield, __NOWPAGE_ISSET_ID);
  }

  public void setNowpageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOWPAGE_ISSET_ID, value);
  }

  public int getPagesize() {
    return this.pagesize;
  }

  public Pageparm setPagesize(int pagesize) {
    this.pagesize = pagesize;
    setPagesizeIsSet(true);
    return this;
  }

  public void unsetPagesize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pagesize is set (has been assigned a value) and false otherwise */
  public boolean isSetPagesize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPagesizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public String getTotalpage() {
    return this.totalpage;
  }

  public Pageparm setTotalpage(String totalpage) {
    this.totalpage = totalpage;
    return this;
  }

  public void unsetTotalpage() {
    this.totalpage = null;
  }

  /** Returns true if field totalpage is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalpage() {
    return this.totalpage != null;
  }

  public void setTotalpageIsSet(boolean value) {
    if (!value) {
      this.totalpage = null;
    }
  }

  public String getTotal() {
    return this.total;
  }

  public Pageparm setTotal(String total) {
    this.total = total;
    return this;
  }

  public void unsetTotal() {
    this.total = null;
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return this.total != null;
  }

  public void setTotalIsSet(boolean value) {
    if (!value) {
      this.total = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NOWPAGE:
      if (value == null) {
        unsetNowpage();
      } else {
        setNowpage((Integer)value);
      }
      break;

    case PAGESIZE:
      if (value == null) {
        unsetPagesize();
      } else {
        setPagesize((Integer)value);
      }
      break;

    case TOTALPAGE:
      if (value == null) {
        unsetTotalpage();
      } else {
        setTotalpage((String)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NOWPAGE:
      return Integer.valueOf(getNowpage());

    case PAGESIZE:
      return Integer.valueOf(getPagesize());

    case TOTALPAGE:
      return getTotalpage();

    case TOTAL:
      return getTotal();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NOWPAGE:
      return isSetNowpage();
    case PAGESIZE:
      return isSetPagesize();
    case TOTALPAGE:
      return isSetTotalpage();
    case TOTAL:
      return isSetTotal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Pageparm)
      return this.equals((Pageparm)that);
    return false;
  }

  public boolean equals(Pageparm that) {
    if (that == null)
      return false;

    boolean this_present_nowpage = true;
    boolean that_present_nowpage = true;
    if (this_present_nowpage || that_present_nowpage) {
      if (!(this_present_nowpage && that_present_nowpage))
        return false;
      if (this.nowpage != that.nowpage)
        return false;
    }

    boolean this_present_pagesize = true;
    boolean that_present_pagesize = true;
    if (this_present_pagesize || that_present_pagesize) {
      if (!(this_present_pagesize && that_present_pagesize))
        return false;
      if (this.pagesize != that.pagesize)
        return false;
    }

    boolean this_present_totalpage = true && this.isSetTotalpage();
    boolean that_present_totalpage = true && that.isSetTotalpage();
    if (this_present_totalpage || that_present_totalpage) {
      if (!(this_present_totalpage && that_present_totalpage))
        return false;
      if (!this.totalpage.equals(that.totalpage))
        return false;
    }

    boolean this_present_total = true && this.isSetTotal();
    boolean that_present_total = true && that.isSetTotal();
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (!this.total.equals(that.total))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Pageparm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Pageparm typedOther = (Pageparm)other;

    lastComparison = Boolean.valueOf(isSetNowpage()).compareTo(typedOther.isSetNowpage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNowpage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nowpage, typedOther.nowpage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPagesize()).compareTo(typedOther.isSetPagesize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPagesize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagesize, typedOther.pagesize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalpage()).compareTo(typedOther.isSetTotalpage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalpage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalpage, typedOther.totalpage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(typedOther.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, typedOther.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Pageparm(");
    boolean first = true;

    sb.append("nowpage:");
    sb.append(this.nowpage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pagesize:");
    sb.append(this.pagesize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalpage:");
    if (this.totalpage == null) {
      sb.append("null");
    } else {
      sb.append(this.totalpage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    if (this.total == null) {
      sb.append("null");
    } else {
      sb.append(this.total);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PageparmStandardSchemeFactory implements SchemeFactory {
    public PageparmStandardScheme getScheme() {
      return new PageparmStandardScheme();
    }
  }

  private static class PageparmStandardScheme extends StandardScheme<Pageparm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Pageparm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NOWPAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nowpage = iprot.readI32();
              struct.setNowpageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGESIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pagesize = iprot.readI32();
              struct.setPagesizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTALPAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalpage = iprot.readString();
              struct.setTotalpageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.total = iprot.readString();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Pageparm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NOWPAGE_FIELD_DESC);
      oprot.writeI32(struct.nowpage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGESIZE_FIELD_DESC);
      oprot.writeI32(struct.pagesize);
      oprot.writeFieldEnd();
      if (struct.totalpage != null) {
        oprot.writeFieldBegin(TOTALPAGE_FIELD_DESC);
        oprot.writeString(struct.totalpage);
        oprot.writeFieldEnd();
      }
      if (struct.total != null) {
        oprot.writeFieldBegin(TOTAL_FIELD_DESC);
        oprot.writeString(struct.total);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PageparmTupleSchemeFactory implements SchemeFactory {
    public PageparmTupleScheme getScheme() {
      return new PageparmTupleScheme();
    }
  }

  private static class PageparmTupleScheme extends TupleScheme<Pageparm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Pageparm struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNowpage()) {
        optionals.set(0);
      }
      if (struct.isSetPagesize()) {
        optionals.set(1);
      }
      if (struct.isSetTotalpage()) {
        optionals.set(2);
      }
      if (struct.isSetTotal()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetNowpage()) {
        oprot.writeI32(struct.nowpage);
      }
      if (struct.isSetPagesize()) {
        oprot.writeI32(struct.pagesize);
      }
      if (struct.isSetTotalpage()) {
        oprot.writeString(struct.totalpage);
      }
      if (struct.isSetTotal()) {
        oprot.writeString(struct.total);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Pageparm struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.nowpage = iprot.readI32();
        struct.setNowpageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pagesize = iprot.readI32();
        struct.setPagesizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalpage = iprot.readString();
        struct.setTotalpageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.total = iprot.readString();
        struct.setTotalIsSet(true);
      }
    }
  }

}

